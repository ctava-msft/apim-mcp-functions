{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "languageVersion": "2.1-experimental",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_EXPERIMENTAL_WARNING": "This template uses ARM features that are experimental. Experimental features should be enabled for testing purposes only, as there are no guarantees about the quality or stability of these features. Do not enable these settings for any production usage, or your production environment may be subject to breaking.",
    "_EXPERIMENTAL_FEATURES_ENABLED": [
      "Extensibility"
    ],
    "_generator": {
      "name": "bicep",
      "version": "0.28.1.47646",
      "templateHash": "4671193972674991265"
    }
  },
  "parameters": {
    "environmentName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 64,
      "metadata": {
        "description": "Name of the the environment which is used to generate a short unique hash used in all resources."
      }
    },
    "location": {
      "type": "string",
      "allowedValues": [
        "australiaeast",
        "eastasia",
        "eastus",
        "eastus2",
        "northeurope",
        "southcentralus",
        "southeastasia",
        "swedencentral",
        "uksouth",
        "westus2",
        "eastus2euap"
      ],
      "metadata": {
        "azd": {
          "type": "location"
        },
        "description": "Primary location for all resources"
      },
      "minLength": 1
    },
    "vnetEnabled": {
      "type": "bool"
    },
    "apiServiceName": {
      "type": "string",
      "defaultValue": ""
    },
    "apiUserAssignedIdentityName": {
      "type": "string",
      "defaultValue": ""
    },
    "applicationInsightsName": {
      "type": "string",
      "defaultValue": ""
    },
    "appServicePlanName": {
      "type": "string",
      "defaultValue": ""
    },
    "logAnalyticsName": {
      "type": "string",
      "defaultValue": ""
    },
    "resourceGroupName": {
      "type": "string",
      "defaultValue": ""
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": ""
    },
    "vNetName": {
      "type": "string",
      "defaultValue": ""
    },
    "mcpEntraApplicationDisplayName": {
      "type": "string",
      "defaultValue": ""
    },
    "mcpEntraApplicationUniqueName": {
      "type": "string",
      "defaultValue": ""
    },
    "disableLocalAuth": {
      "type": "bool",
      "defaultValue": true
    }
  },
  "variables": {
    "$fxv#0": {
      "analysisServicesServers": "as",
      "apiManagementService": "apim-",
      "appConfigurationConfigurationStores": "appcs-",
      "applications": "app-",
      "appManagedEnvironments": "cae-",
      "appContainerApps": "ca-",
      "authorizationPolicyDefinitions": "policy-",
      "automationAutomationAccounts": "aa-",
      "blueprintBlueprints": "bp-",
      "blueprintBlueprintsArtifacts": "bpa-",
      "cacheRedis": "redis-",
      "cdnProfiles": "cdnp-",
      "cdnProfilesEndpoints": "cdne-",
      "cognitiveServicesAccounts": "cog-",
      "cognitiveServicesFormRecognizer": "cog-fr-",
      "cognitiveServicesTextAnalytics": "cog-ta-",
      "computeAvailabilitySets": "avail-",
      "computeCloudServices": "cld-",
      "computeDiskEncryptionSets": "des",
      "computeDisks": "disk",
      "computeDisksOs": "osdisk",
      "computeGalleries": "gal",
      "computeSnapshots": "snap-",
      "computeVirtualMachines": "vm",
      "computeVirtualMachineScaleSets": "vmss-",
      "containerInstanceContainerGroups": "ci",
      "containerRegistryRegistries": "cr",
      "containerServiceManagedClusters": "aks-",
      "databricksWorkspaces": "dbw-",
      "dataFactoryFactories": "adf-",
      "dataLakeAnalyticsAccounts": "dla",
      "dataLakeStoreAccounts": "dls",
      "dataMigrationServices": "dms-",
      "dBforMySQLServers": "mysql-",
      "dBforPostgreSQLServers": "psql-",
      "devicesIotHubs": "iot-",
      "devicesProvisioningServices": "provs-",
      "devicesProvisioningServicesCertificates": "pcert-",
      "documentDBDatabaseAccounts": "cosmos-",
      "eventGridDomains": "evgd-",
      "eventGridDomainsTopics": "evgt-",
      "eventGridEventSubscriptions": "evgs-",
      "eventHubNamespaces": "evhns-",
      "eventHubNamespacesEventHubs": "evh-",
      "hdInsightClustersHadoop": "hadoop-",
      "hdInsightClustersHbase": "hbase-",
      "hdInsightClustersKafka": "kafka-",
      "hdInsightClustersMl": "mls-",
      "hdInsightClustersSpark": "spark-",
      "hdInsightClustersStorm": "storm-",
      "hybridComputeMachines": "arcs-",
      "insightsActionGroups": "ag-",
      "insightsComponents": "appi-",
      "keyVaultVaults": "kv-",
      "kubernetesConnectedClusters": "arck",
      "kustoClusters": "dec",
      "kustoClustersDatabases": "dedb",
      "logicIntegrationAccounts": "ia-",
      "logicWorkflows": "logic-",
      "machineLearningServicesWorkspaces": "mlw-",
      "managedIdentityUserAssignedIdentities": "id-",
      "managementManagementGroups": "mg-",
      "migrateAssessmentProjects": "migr-",
      "networkApplicationGateways": "agw-",
      "networkApplicationSecurityGroups": "asg-",
      "networkAzureFirewalls": "afw-",
      "networkBastionHosts": "bas-",
      "networkConnections": "con-",
      "networkDnsZones": "dnsz-",
      "networkExpressRouteCircuits": "erc-",
      "networkFirewallPolicies": "afwp-",
      "networkFirewallPoliciesWebApplication": "waf",
      "networkFirewallPoliciesRuleGroups": "wafrg",
      "networkFrontDoors": "fd-",
      "networkFrontdoorWebApplicationFirewallPolicies": "fdfp-",
      "networkLoadBalancersExternal": "lbe-",
      "networkLoadBalancersInternal": "lbi-",
      "networkLoadBalancersInboundNatRules": "rule-",
      "networkLocalNetworkGateways": "lgw-",
      "networkNatGateways": "ng-",
      "networkNetworkInterfaces": "nic-",
      "networkNetworkSecurityGroups": "nsg-",
      "networkNetworkSecurityGroupsSecurityRules": "nsgsr-",
      "networkNetworkWatchers": "nw-",
      "networkPrivateDnsZones": "pdnsz-",
      "networkPrivateLinkServices": "pl-",
      "networkPublicIPAddresses": "pip-",
      "networkPublicIPPrefixes": "ippre-",
      "networkRouteFilters": "rf-",
      "networkRouteTables": "rt-",
      "networkRouteTablesRoutes": "udr-",
      "networkTrafficManagerProfiles": "traf-",
      "networkVirtualNetworkGateways": "vgw-",
      "networkVirtualNetworks": "vnet-",
      "networkVirtualNetworksSubnets": "snet-",
      "networkVirtualNetworksVirtualNetworkPeerings": "peer-",
      "networkVirtualWans": "vwan-",
      "networkVpnGateways": "vpng-",
      "networkVpnGatewaysVpnConnections": "vcn-",
      "networkVpnGatewaysVpnSites": "vst-",
      "notificationHubsNamespaces": "ntfns-",
      "notificationHubsNamespacesNotificationHubs": "ntf-",
      "operationalInsightsWorkspaces": "log-",
      "portalDashboards": "dash-",
      "powerBIDedicatedCapacities": "pbi-",
      "purviewAccounts": "pview-",
      "recoveryServicesVaults": "rsv-",
      "resourcesResourceGroups": "rg-",
      "searchSearchServices": "srch-",
      "serviceBusNamespaces": "sb-",
      "serviceBusNamespacesQueues": "sbq-",
      "serviceBusNamespacesTopics": "sbt-",
      "serviceEndPointPolicies": "se-",
      "serviceFabricClusters": "sf-",
      "signalRServiceSignalR": "sigr",
      "sqlManagedInstances": "sqlmi-",
      "sqlServers": "sql-",
      "sqlServersDataWarehouse": "sqldw-",
      "sqlServersDatabases": "sqldb-",
      "sqlServersDatabasesStretch": "sqlstrdb-",
      "storageStorageAccounts": "st",
      "storageStorageAccountsVm": "stvm",
      "storSimpleManagers": "ssimp",
      "streamAnalyticsCluster": "asa-",
      "synapseWorkspaces": "syn",
      "synapseWorkspacesAnalyticsWorkspaces": "synw",
      "synapseWorkspacesSqlPoolsDedicated": "syndp",
      "synapseWorkspacesSqlPoolsSpark": "synsp",
      "timeSeriesInsightsEnvironments": "tsi-",
      "webServerFarms": "plan-",
      "webSitesAppService": "app-",
      "webSitesAppServiceEnvironment": "ase-",
      "webSitesFunctions": "func-",
      "webStaticSites": "stapp-"
    },
    "oauth_scopes": "openid https://graph.microsoft.com/.default",
    "abbrs": "[variables('$fxv#0')]",
    "resourceToken": "[toLower(uniqueString(subscription().id, parameters('environmentName'), parameters('location')))]",
    "tags": {
      "azd-env-name": "[parameters('environmentName')]"
    },
    "functionAppName": "[if(not(empty(parameters('apiServiceName'))), parameters('apiServiceName'), format('{0}api-{1}', variables('abbrs').webSitesFunctions, variables('resourceToken')))]",
    "deploymentStorageContainerName": "[format('app-package-{0}-{1}', take(variables('functionAppName'), 32), take(toLower(uniqueString(variables('functionAppName'), variables('resourceToken'))), 7))]",
    "serviceVirtualNetworkName": "[if(not(empty(parameters('vNetName'))), parameters('vNetName'), format('{0}{1}', variables('abbrs').networkVirtualNetworks, variables('resourceToken')))]",
    "serviceVirtualNetworkAppSubnetName": "app",
    "serviceVirtualNetworkPrivateEndpointSubnetName": "private-endpoints-subnet",
    "apimResourceToken": "[toLower(uniqueString(subscription().id, parameters('resourceGroupName'), parameters('environmentName'), parameters('location')))]",
    "apiManagementName": "[format('{0}{1}', variables('abbrs').apiManagementService, variables('apimResourceToken'))]",
    "StorageBlobDataOwner": "b7e6dc6d-f1e8-4753-8033-0f276bb0955b",
    "StorageQueueDataContributor": "974c5e8b-45b9-4653-ba55-5f855dd0fb88",
    "monitoringRoleDefinitionId": "3913510d-42f4-4e42-8a64-420c390055eb"
  },
  "resources": {
    "rg": {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]"
    },
    "apimService": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[variables('apiManagementName')]",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "apiManagementName": {
            "value": "[variables('apiManagementName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.1-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "This template uses ARM features that are experimental. Experimental features should be enabled for testing purposes only, as there are no guarantees about the quality or stability of these features. Do not enable these settings for any production usage, or your production environment may be subject to breaking.",
            "_EXPERIMENTAL_FEATURES_ENABLED": [
              "Extensibility"
            ],
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "2417249338007014843"
            }
          },
          "parameters": {
            "apiManagementName": {
              "type": "string",
              "metadata": {
                "description": "The name of the API Management instance. Defaults to \"apim-<resourceSuffix>\"."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location of the API Management instance. Defaults to the resource group location."
              }
            },
            "publisherEmail": {
              "type": "string",
              "defaultValue": "noreply@microsoft.com",
              "metadata": {
                "description": "The email address of the publisher. Defaults to \"noreply@microsoft.com\"."
              }
            },
            "publisherName": {
              "type": "string",
              "defaultValue": "Microsoft",
              "metadata": {
                "description": "The name of the publisher. Defaults to \"Microsoft\"."
              }
            },
            "apimLoggerName": {
              "type": "string",
              "defaultValue": "apim-logger",
              "metadata": {
                "description": "Name of the APIM Logger"
              }
            },
            "apimLoggerDescription": {
              "type": "string",
              "defaultValue": "APIM Logger for OpenAI API",
              "metadata": {
                "description": "Description of the APIM Logger"
              }
            },
            "apimSku": {
              "type": "string",
              "defaultValue": "Basicv2",
              "allowedValues": [
                "Consumption",
                "Developer",
                "Basic",
                "Basicv2",
                "Standard",
                "Standardv2",
                "Premium"
              ],
              "metadata": {
                "description": "The pricing tier of this API Management service"
              }
            },
            "appInsightsInstrumentationKey": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The instrumentation key for Application Insights"
              }
            },
            "appInsightsId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The resource ID for Application Insights"
              }
            },
            "entraAppUserAssignedIdentityName": {
              "type": "string",
              "defaultValue": "entra-app-user-assigned-identity",
              "metadata": {
                "description": "The name of the user-assigned managed identity used as entra app FIC"
              }
            }
          },
          "resources": {
            "entraAppUserAssignedIdentity": {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[parameters('entraAppUserAssignedIdentityName')]",
              "location": "[parameters('location')]"
            },
            "apimService": {
              "type": "Microsoft.ApiManagement/service",
              "apiVersion": "2024-06-01-preview",
              "name": "[parameters('apiManagementName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('apimSku')]",
                "capacity": 1
              },
              "properties": {
                "publisherEmail": "[parameters('publisherEmail')]",
                "publisherName": "[parameters('publisherName')]"
              },
              "identity": {
                "type": "SystemAssigned, UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('entraAppUserAssignedIdentityName')))]": {}
                }
              },
              "dependsOn": [
                "entraAppUserAssignedIdentity"
              ]
            },
            "apimLogger": {
              "condition": "[and(not(empty(parameters('appInsightsId'))), not(empty(parameters('appInsightsInstrumentationKey'))))]",
              "type": "Microsoft.ApiManagement/service/loggers",
              "apiVersion": "2021-12-01-preview",
              "name": "[format('{0}/{1}', parameters('apiManagementName'), parameters('apimLoggerName'))]",
              "properties": {
                "credentials": {
                  "instrumentationKey": "[parameters('appInsightsInstrumentationKey')]"
                },
                "description": "[parameters('apimLoggerDescription')]",
                "isBuffered": false,
                "loggerType": "applicationInsights",
                "resourceId": "[parameters('appInsightsId')]"
              },
              "dependsOn": [
                "apimService"
              ]
            }
          },
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.ApiManagement/service', parameters('apiManagementName'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('apiManagementName')]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference('apimService', '2024-06-01-preview', 'full').identity.principalId]"
            },
            "gatewayUrl": {
              "type": "string",
              "value": "[reference('apimService').gatewayUrl]"
            },
            "entraAppUserAssignedIdentityPrincipleId": {
              "type": "string",
              "value": "[reference('entraAppUserAssignedIdentity').principalId]"
            },
            "entraAppUserAssignedIdentityClientId": {
              "type": "string",
              "value": "[reference('entraAppUserAssignedIdentity').clientId]"
            }
          }
        }
      },
      "dependsOn": [
        "rg"
      ]
    },
    "oauthAPIModule": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "oauthAPIModule",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "entraAppUniqueName": "[if(not(empty(parameters('mcpEntraApplicationUniqueName'))), createObject('value', parameters('mcpEntraApplicationUniqueName')), createObject('value', format('mcp-oauth-{0}{1}', variables('abbrs').applications, variables('apimResourceToken'))))]",
          "entraAppDisplayName": "[if(not(empty(parameters('mcpEntraApplicationDisplayName'))), createObject('value', parameters('mcpEntraApplicationDisplayName')), createObject('value', format('MCP-OAuth-{0}{1}', variables('abbrs').applications, variables('apimResourceToken'))))]",
          "apimServiceName": {
            "value": "[variables('apiManagementName')]"
          },
          "oauthScopes": {
            "value": "[variables('oauth_scopes')]"
          },
          "entraAppUserAssignedIdentityPrincipleId": {
            "value": "[reference('apimService').outputs.entraAppUserAssignedIdentityPrincipleId.value]"
          },
          "entraAppUserAssignedIdentityClientId": {
            "value": "[reference('apimService').outputs.entraAppUserAssignedIdentityClientId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.1-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "This template uses ARM features that are experimental. Experimental features should be enabled for testing purposes only, as there are no guarantees about the quality or stability of these features. Do not enable these settings for any production usage, or your production environment may be subject to breaking.",
            "_EXPERIMENTAL_FEATURES_ENABLED": [
              "Extensibility"
            ],
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "14415524030016852274"
            }
          },
          "parameters": {
            "apimServiceName": {
              "type": "string",
              "metadata": {
                "description": "The name of the API Management service"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The Azure region for resources"
              }
            },
            "oauthScopes": {
              "type": "string",
              "metadata": {
                "description": "The required scopes for authorization"
              }
            },
            "entraAppUserAssignedIdentityPrincipleId": {
              "type": "string",
              "metadata": {
                "description": "The principle id of the user-assigned managed identity for Entra app"
              }
            },
            "entraAppUserAssignedIdentityClientId": {
              "type": "string",
              "metadata": {
                "description": "The client ID of the user-assigned managed identity for Entra app"
              }
            },
            "entraAppUniqueName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Entra application"
              }
            },
            "entraAppDisplayName": {
              "type": "string",
              "metadata": {
                "description": "The display name of the Entra application"
              }
            },
            "mcpServerName": {
              "type": "string",
              "defaultValue": "MCP Server",
              "metadata": {
                "description": "The name of the MCP Server to display in the consent page"
              }
            },
            "existingEntraAppId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Pre-created Entra application client ID (temporary parameter until Microsoft Graph extension is supported)"
              }
            }
          },
          "variables": {
            "$fxv#0": "<!--\r\n    AUTHORIZE POLICY\r\n    This policy implements the authorization endpoint for PKCE OAuth2 flow with Entra ID.\r\n    \r\n    SECURITY NOTE: User consent is validated ONLY through secure HttpOnly cookies set by \r\n    the consent endpoint. No query parameters can bypass consent validation.\r\n    \r\n    Flow:\r\n    1. MCP client calls this endpoint with code_challenge and code_challenge_method\r\n    2. Check for existing user consent via secure cookies (redirect to consent page if needed)\r\n    3. We generate a code verifier and challenge for Entra ID\r\n    4. We generate a confirmation code to return to the MCP client later\r\n    5. We redirect the user to Entra ID login page\r\n    6. After authentication, Entra ID will redirect back to the callback endpoint\r\n-->\r\n<policies>\r\n    <inbound>\r\n        <base />\r\n        <!-- STEP 1: Retrieve PKCE parameters from MCP Client request -->\r\n        <set-variable name=\"mcpClientCodeChallenge\" value=\"@((string)context.Request.Url.Query.GetValueOrDefault(\"code_challenge\", \"\"))\" />\r\n        <set-variable name=\"mcpClientCodeChallengeMethod\" value=\"@((string)context.Request.Url.Query.GetValueOrDefault(\"code_challenge_method\", \"\"))\" />\r\n        \r\n        <!-- STEP 2: Extract client ID and parameters -->\r\n        <set-variable name=\"clientId\" value=\"@((string)context.Request.Url.Query.GetValueOrDefault(\"client_id\", \"\"))\" />\r\n        <set-variable name=\"redirect_uri\" value=\"@((string)context.Request.Url.Query.GetValueOrDefault(\"redirect_uri\", \"\"))\" />\r\n        <set-variable name=\"currentState\" value=\"@((string)context.Request.Url.Query.GetValueOrDefault(\"state\", \"\"))\" />\r\n        \r\n        <!-- Normalize the redirect URI for consistent cookie matching -->\r\n        <set-variable name=\"normalized_redirect_uri\" value=\"@{\r\n            string redirectUri = context.Variables.GetValueOrDefault<string>(\"redirect_uri\", \"\");\r\n            if (string.IsNullOrEmpty(redirectUri)) {\r\n                return \"\";\r\n            }\r\n            \r\n            try {\r\n                // URL decode the redirect URI to get the normalized form\r\n                string decodedUri = System.Net.WebUtility.UrlDecode(redirectUri);\r\n                return decodedUri;\r\n            } catch (Exception) {\r\n                // If decoding fails, use the original URI\r\n                return redirectUri;\r\n            }\r\n        }\" />\r\n        \r\n        <!-- Check for existing approval cookie for this client_id and redirect_uri combination -->\r\n        <set-variable name=\"has_approval_cookie\" value=\"@{\r\n            try {\r\n                if (string.IsNullOrEmpty(context.Variables.GetValueOrDefault<string>(\"clientId\", \"\")) || \r\n                    string.IsNullOrEmpty(context.Variables.GetValueOrDefault<string>(\"normalized_redirect_uri\", \"\"))) {\r\n                    return false;\r\n                }\r\n                  \r\n                string clientId = context.Variables.GetValueOrDefault<string>(\"clientId\", \"\");\r\n                string redirectUri = context.Variables.GetValueOrDefault<string>(\"normalized_redirect_uri\", \"\");\r\n                \r\n                // Define the cookie name for approvals (must match consent policy)\r\n                string APPROVAL_COOKIE_NAME = \"MCP_APPROVED_CLIENTS\";\r\n                \r\n                // Check for cookie in request\r\n                var cookieHeader = context.Request.Headers.GetValueOrDefault(\"Cookie\", \"\");\r\n                if (string.IsNullOrEmpty(cookieHeader)) {\r\n                    return false;\r\n                }\r\n                \r\n                // Parse cookies\r\n                string[] cookies = cookieHeader.Split(';');\r\n                foreach (string cookie in cookies) {\r\n                    string trimmedCookie = cookie.Trim();\r\n                    if (trimmedCookie.StartsWith(APPROVAL_COOKIE_NAME + \"=\")) {\r\n                        try {\r\n                            // Extract and parse the cookie value\r\n                            string cookieValue = trimmedCookie.Substring(APPROVAL_COOKIE_NAME.Length + 1);\r\n                            string decodedValue = System.Text.Encoding.UTF8.GetString(\r\n                                System.Convert.FromBase64String(cookieValue));\r\n                            JArray approvedClients = JArray.Parse(decodedValue);\r\n                            \r\n                            // Check if this client/redirect combination is approved\r\n                            string clientKey = $\"{clientId}:{redirectUri}\";\r\n                            foreach (var item in approvedClients) {\r\n                                if (item.ToString() == clientKey) {\r\n                                    return true;\r\n                                }\r\n                            }\r\n                        } catch (Exception ex) {\r\n                            context.Trace($\"Error parsing approval cookie: {ex.Message}\");\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                \r\n                return false;\r\n            } catch (Exception ex) {\r\n                context.Trace($\"Error checking approval cookie: {ex.Message}\");\r\n                return false;\r\n            }\r\n        }\" />\r\n        \r\n        <!-- Check if the client has been approved via secure cookie -->\r\n        <choose>\r\n            <when condition=\"@(context.Variables.GetValueOrDefault<bool>(\"has_approval_cookie\"))\">\r\n                <!-- Continue with normal flow - client is authorized via secure cookie -->\r\n            </when>\r\n            <otherwise>\r\n                <!-- Redirect to consent page for user approval -->\r\n                <return-response>\r\n                    <set-status code=\"302\" reason=\"Found\" />\r\n                    <set-header name=\"Location\" exists-action=\"override\">\r\n                        <value>@{\r\n                            string basePath = context.Request.OriginalUrl.Scheme + \"://\" + context.Request.OriginalUrl.Host + (context.Request.OriginalUrl.Port == 80 || context.Request.OriginalUrl.Port == 443 ? \"\" : \":\" + context.Request.OriginalUrl.Port);\r\n                            string clientId = context.Variables.GetValueOrDefault<string>(\"clientId\");\r\n                            // Use the normalized (already decoded) redirect_uri to avoid double-encoding\r\n                            string redirectUri = context.Variables.GetValueOrDefault<string>(\"normalized_redirect_uri\");\r\n                            string state = context.Variables.GetValueOrDefault<string>(\"currentState\");\r\n                            string codeChallenge = context.Variables.GetValueOrDefault<string>(\"mcpClientCodeChallenge\");\r\n                            string codeChallengeMethod = context.Variables.GetValueOrDefault<string>(\"mcpClientCodeChallengeMethod\");\r\n                            \r\n                            // URL encode parameters for the consent redirect URL\r\n                            string encodedClientId = System.Net.WebUtility.UrlEncode(clientId);\r\n                            string encodedRedirectUri = System.Net.WebUtility.UrlEncode(redirectUri);\r\n                            \r\n                            // State parameter: use as-is without additional encoding\r\n                            // context.Request.Url.Query.GetValueOrDefault() preserves the original encoding\r\n                            string encodedState = state;\r\n                            \r\n                            // Code challenge parameters: use as-is since they typically don't need encoding\r\n                            string encodedCodeChallenge = codeChallenge;\r\n                            string encodedCodeChallengeMethod = codeChallengeMethod;\r\n                            \r\n                            return $\"{basePath}/consent?client_id={encodedClientId}&redirect_uri={encodedRedirectUri}&state={encodedState}&code_challenge={encodedCodeChallenge}&code_challenge_method={encodedCodeChallengeMethod}\";\r\n                        }</value>\r\n                    </set-header>\r\n                </return-response>\r\n            </otherwise>\r\n        </choose>\r\n        \r\n        <!-- STEP 3: Generate PKCE parameters for Entra ID authentication -->\r\n        <!-- Generate a random code verifier for Entra ID -->\r\n        <set-variable name=\"codeVerifier\" value=\"@((string)Guid.NewGuid().ToString().Replace(\"-\", \"\"))\" />\r\n        <!-- Set the code challenge method for Entra ID -->\r\n        <set-variable name=\"codeChallengeMethod\" value=\"S256\" />\r\n        <!-- Generate a code challenge using SHA-256 for Entra ID -->\r\n        <set-variable name=\"codeChallenge\" value=\"@{\r\n            using (var sha256 = System.Security.Cryptography.SHA256.Create())\r\n            {\r\n                var bytes = System.Text.Encoding.UTF8.GetBytes((string)context.Variables.GetValueOrDefault(\"codeVerifier\", \"\"));\r\n                var hash = sha256.ComputeHash(bytes);\r\n                return System.Convert.ToBase64String(hash).TrimEnd('=').Replace('+', '-').Replace('/', '_');\r\n            }\r\n            }\" />\r\n\r\n        <!-- STEP 4: Construct the Entra ID authorization URL -->\r\n        <!-- Base URL for Entra ID authorization endpoint -->\r\n        <set-variable name=\"baseAuthUrl\" value=\"https://login.microsoftonline.com/{{EntraIDTenantId}}/oauth2/v2.0/authorize?response_type=code\" />\r\n        <!-- Add client ID parameter - using EntraIDClientId instead of the request client ID -->\r\n        <set-variable name=\"clientIdParam\" value=\"@(\"&client_id={{EntraIDClientId}}\")\" />        \r\n        <!-- Add PKCE parameters -->\r\n        <set-variable name=\"codeChallengeParam\" value=\"@(string.Concat(\"&code_challenge=\", context.Variables.GetValueOrDefault(\"codeChallenge\", \"\")))\" />\r\n        <set-variable name=\"codeChallengeMethodParam\" value=\"@(string.Concat(\"&code_challenge_method=\", context.Variables.GetValueOrDefault(\"codeChallengeMethod\", \"\")))\" />\r\n        <!-- Add OAuth callback parameter -->\r\n        <set-variable name=\"redirectUriParam\" value=\"@(string.Concat(\"&redirect_uri=\", \"{{OAuthCallbackUri}}\" ))\" />        \r\n        <!-- Add required scope parameter -->\r\n        <set-variable name=\"scopeParam\" value=\"@(string.Concat(\"&scope={{OAuthScopes}}\"))\" />\r\n        <!-- Generate Entra State -->\r\n        <set-variable name=\"entraState\" value=\"@((string)Guid.NewGuid().ToString())\" />\r\n        <!-- Add state parameter for security -->\r\n        <set-variable name=\"stateParam\" value=\"@(string.Concat(\"&state=\", context.Variables.GetValueOrDefault(\"entraState\", \"\")))\" />\r\n        <!-- Combine all parts to form the complete authorization URL with PKCE params -->\r\n        <set-variable name=\"authUrl\" value=\"@(string.Concat(\r\n            context.Variables.GetValueOrDefault(\"baseAuthUrl\", \"\"), \r\n            context.Variables.GetValueOrDefault(\"clientIdParam\", \"\"), \r\n            context.Variables.GetValueOrDefault(\"codeChallengeParam\", \"\"), \r\n            context.Variables.GetValueOrDefault(\"codeChallengeMethodParam\", \"\"), \r\n            context.Variables.GetValueOrDefault(\"redirectUriParam\", \"\"), \r\n            context.Variables.GetValueOrDefault(\"scopeParam\", \"\"), \r\n            context.Variables.GetValueOrDefault(\"stateParam\", \"\")))\" />        \r\n        \r\n        <!-- STEP 5: Store authentication data in cache for use in callback -->\r\n        <!-- Generate a confirmation code to return to the MCP client -->\r\n        <set-variable name=\"mcpConfirmConsentCode\" value=\"@((string)Guid.NewGuid().ToString())\" />\r\n        \r\n        <!-- Store code verifier for token exchange -->\r\n        <cache-store-value duration=\"3600\" \r\n            key=\"@(\"CodeVerifier-\"+context.Variables.GetValueOrDefault(\"entraState\", \"\"))\" \r\n            value=\"@(context.Variables.GetValueOrDefault(\"codeVerifier\", \"\"))\" />\r\n        \r\n        <!-- Map state to MCP confirmation code for callback -->\r\n        <cache-store-value duration=\"3600\" \r\n            key=\"@((string)context.Variables.GetValueOrDefault(\"entraState\"))\" \r\n            value=\"@(context.Variables.GetValueOrDefault(\"mcpConfirmConsentCode\", \"\"))\" />\r\n\r\n         <!-- Retrieve MCP Client State and Scope from request (Claude sends the state and scope param for binding the auth flow per request) -->\r\n         <set-variable name=\"mcpState\" value=\"@((string)context.Request.Url.Query.GetValueOrDefault(\"state\", \"\"))\" />\r\n         <set-variable name=\"mcpScope\" value=\"@((string)context.Request.Url.Query.GetValueOrDefault(\"scope\", \"\"))\" />\r\n        \r\n        <!-- Store MCP client PKCE data, client state and client callback redirect uri for verification during token exchange -->\r\n        <cache-store-value duration=\"3600\" \r\n            key=\"@($\"McpClientAuthData-{context.Variables.GetValueOrDefault(\"mcpConfirmConsentCode\")}\")\" \r\n            value=\"@{\r\n                // Create a JObject and populate it with values\r\n                return new JObject{\r\n                    [\"mcpClientCodeChallenge\"] = (string)context.Variables.GetValueOrDefault(\"mcpClientCodeChallenge\", \"\"),\r\n                    [\"mcpClientCodeChallengeMethod\"] = (string)context.Variables.GetValueOrDefault(\"mcpClientCodeChallengeMethod\", \"\"),\r\n                    [\"mcpClientState\"] = (string)context.Variables.GetValueOrDefault(\"mcpState\", \"\"),\r\n                    [\"mcpClientScope\"] = (string)context.Variables.GetValueOrDefault(\"mcpScope\", \"\"),\r\n                    [\"mcpCallbackRedirectUri\"] = Uri.UnescapeDataString(context.Variables.GetValueOrDefault(\"redirect_uri\", \"\"))\r\n                }.ToString();\r\n            }\" />\r\n    </inbound>\r\n    <backend>\r\n        <base />\r\n    </backend>\r\n    <outbound>\r\n        <base />        \r\n        <!-- Return the response with a 302 status code for redirect -->\r\n        <return-response>\r\n            <set-status code=\"302\" reason=\"Found\" />\r\n            <set-header name=\"Location\" exists-action=\"override\">\r\n                <value>@(context.Variables.GetValueOrDefault(\"authUrl\", \"\"))</value>\r\n            </set-header>\r\n            <!-- Add cache control headers to ensure browser follows redirect -->\r\n            <set-header name=\"Cache-Control\" exists-action=\"override\">\r\n                <value>no-store, no-cache, must-revalidate</value>\r\n            </set-header>\r\n            <set-header name=\"Pragma\" exists-action=\"override\">\r\n                <value>no-cache</value>\r\n            </set-header>\r\n            <!-- Remove any content-type that might interfere -->\r\n            <set-header name=\"Content-Type\" exists-action=\"delete\" />\r\n        </return-response>\r\n    </outbound>\r\n    <on-error>\r\n        <base />\r\n    </on-error>\r\n</policies>",
            "$fxv#1": "<!--\r\n    TOKEN POLICY\r\n    This policy implements the token endpoint for PKCE OAuth2 flow.\r\n    \r\n    Flow:\r\n    1. MCP client sends token request with code and code_verifier\r\n    2. We validate the code_verifier against the stored code_challenge\r\n    3. We retrieve the cached access token and return it to the client\r\n-->\r\n<policies>\r\n    <inbound>\r\n        <base />\r\n        <!-- STEP 1: Extract parameters from token request -->\r\n        <!-- Read the request body as a string while preserving it for later processing -->\r\n        <set-variable name=\"tokenRequestBody\" value=\"@((string)context.Request.Body.As<string>(preserveContent: true))\" />\r\n        \r\n        <!-- Extract the confirmation code from the request -->\r\n        <set-variable name=\"mcpConfirmConsentCode\" value=\"@{\r\n            // Retrieve the raw body string\r\n            var body = context.Variables.GetValueOrDefault<string>(\"tokenRequestBody\");\r\n            if (!string.IsNullOrEmpty(body))\r\n            {\r\n                // Split the body into name/value pairs\r\n                var pairs = body.Split('&');\r\n                foreach (var pair in pairs)\r\n                {\r\n                    var keyValue = pair.Split('=');\r\n                    if (keyValue.Length == 2)\r\n                    {\r\n                        if(keyValue[0] == \"code\")\r\n                        {\r\n                            return keyValue[1];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return \"\";\r\n        }\" />              \r\n        <!-- Extract the code_verifier from the request and URL-decode it -->        \r\n        <set-variable name=\"mcpClientCodeVerifier\" value=\"@{\r\n            // Retrieve the raw body string\r\n            var body = context.Variables.GetValueOrDefault<string>(\"tokenRequestBody\");\r\n            if (!string.IsNullOrEmpty(body))\r\n            {\r\n                // Split the body into name/value pairs\r\n                var pairs = body.Split('&');\r\n                foreach (var pair in pairs)\r\n                {\r\n                    var keyValue = pair.Split('=');\r\n                    if (keyValue.Length == 2)\r\n                    {\r\n                        if(keyValue[0] == \"code_verifier\")\r\n                        {\r\n                            // URL-decode the code_verifier if needed\r\n                            return System.Net.WebUtility.UrlDecode(keyValue[1]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return \"\";\r\n        }\" />\r\n            \r\n        <!-- STEP 2: Extract state parameters -->\r\n        <set-variable name=\"mcpState\" value=\"@((string)context.Request.Url.Query.GetValueOrDefault(\"state\", \"\"))\" />\r\n        <set-variable name=\"stateSession\" value=\"@((string)context.Request.Url.Query.GetValueOrDefault(\"state_session\", \"\"))\" />        \r\n    </inbound>\r\n    <backend />\r\n    <outbound>\r\n        <base />\r\n        <!-- STEP 3: Retrieve stored MCP client data -->\r\n        <!-- Lookup the stored MCP client code challenge and challenge method from the cache -->\r\n        <cache-lookup-value key=\"@($\"McpClientAuthData-{context.Variables.GetValueOrDefault(\"mcpConfirmConsentCode\")}\")\" variable-name=\"mcpClientAuthData\" />\r\n        \r\n        <!-- Extract the stored code challenge from the cached data -->\r\n        <set-variable name=\"storedMcpClientCodeChallenge\" value=\"@{\r\n            var mcpAuthDataAsJObject = JObject.Parse((string)context.Variables[\"mcpClientAuthData\"]);\r\n            return (string)mcpAuthDataAsJObject[\"mcpClientCodeChallenge\"];\r\n        }\" />            \r\n        <!-- STEP 4: Compute and validate the code challenge -->\r\n        <!-- Generate a challenge from the incoming code_verifier using the stored challenge method -->\r\n        <set-variable name=\"mcpServerComputedCodeChallenge\" value=\"@{\r\n            var mcpAuthDataAsJObject = JObject.Parse((string)context.Variables[\"mcpClientAuthData\"]);\r\n            string codeVerifier = (string)context.Variables.GetValueOrDefault(\"mcpClientCodeVerifier\", \"\");\r\n            string codeChallengeMethod = ((string)mcpAuthDataAsJObject[\"mcpClientCodeChallengeMethod\"]).ToLower();\r\n            \r\n            if(string.IsNullOrEmpty(codeVerifier)){\r\n                return string.Empty;\r\n            }\r\n            \r\n            if(codeChallengeMethod == \"plain\"){\r\n                // For \"plain\", no transformation is applied\r\n                return codeVerifier;\r\n            } else if(codeChallengeMethod == \"s256\"){\r\n                // For S256, compute the SHA256 hash, Base64 encode it, and convert to URL-safe format\r\n                using (var sha256 = System.Security.Cryptography.SHA256.Create())\r\n                {\r\n                    var bytes = System.Text.Encoding.UTF8.GetBytes(codeVerifier);\r\n                    var hash = sha256.ComputeHash(bytes);\r\n                    \r\n                    // Convert the hash to a Base64 string\r\n                    string base64 = Convert.ToBase64String(hash);\r\n\r\n                    // Convert Base64 string into a URL-safe variant\r\n                    // Replace '+' with '-', '/' with '_', and remove any '=' padding\r\n                    return base64.Replace(\"+\", \"-\").Replace(\"/\", \"_\").Replace(\"=\", \"\");\r\n                }\r\n            } else {\r\n                // Unsupported method\r\n                return string.Empty;\r\n            }\r\n        }\" />            \r\n        <!-- STEP 5: Verify code challenge matches -->\r\n        <choose>\r\n            <when condition=\"@(string.Compare((string)context.Variables.GetValueOrDefault(\"mcpServerComputedCodeChallenge\", \"\"), (string)context.Variables.GetValueOrDefault(\"storedMcpClientCodeChallenge\", \"\")) != 0)\">\r\n                <!-- If they don't match, return an error -->\r\n                <return-response>\r\n                    <set-status code=\"400\" reason=\"Bad Request\" />\r\n                    <set-body>@(\"{\\\"error\\\": \\\"code_verifier does not match.\\\"}\")</set-body>\r\n                </return-response>\r\n            </when>\r\n        </choose>\r\n\r\n        <!-- STEP 5.5: Verify client registration -->\r\n        <!-- Extract client ID and redirect URI from the token request -->\r\n        <set-variable name=\"client_id\" value=\"@{\r\n            // Retrieve the raw body string\r\n            var body = context.Variables.GetValueOrDefault<string>(\"tokenRequestBody\");\r\n            if (!string.IsNullOrEmpty(body))\r\n            {\r\n                // Split the body into name/value pairs\r\n                var pairs = body.Split('&');\r\n                foreach (var pair in pairs)\r\n                {\r\n                    var keyValue = pair.Split('=');\r\n                    if (keyValue.Length == 2)\r\n                    {\r\n                        if(keyValue[0] == \"client_id\")\r\n                        {\r\n                            return System.Net.WebUtility.UrlDecode(keyValue[1]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return \"\";\r\n        }\" />\r\n        \r\n        <set-variable name=\"redirect_uri\" value=\"@{\r\n            // Retrieve the raw body string\r\n            var body = context.Variables.GetValueOrDefault<string>(\"tokenRequestBody\");\r\n            if (!string.IsNullOrEmpty(body))\r\n            {\r\n                // Split the body into name/value pairs\r\n                var pairs = body.Split('&');\r\n                foreach (var pair in pairs)\r\n                {\r\n                    var keyValue = pair.Split('=');\r\n                    if (keyValue.Length == 2)\r\n                    {\r\n                        if(keyValue[0] == \"redirect_uri\")\r\n                        {\r\n                            return System.Net.WebUtility.UrlDecode(keyValue[1]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return \"\";\r\n        }\" />\r\n        \r\n        <!-- Normalize the redirect URI -->\r\n        <set-variable name=\"normalized_redirect_uri\" value=\"@{\r\n            string redirectUri = context.Variables.GetValueOrDefault<string>(\"redirect_uri\", \"\");\r\n            return System.Net.WebUtility.UrlDecode(redirectUri);\r\n        }\" />\r\n        \r\n        <!-- Look up client information from cache -->\r\n        <cache-lookup-value key=\"@($\"ClientInfo-{context.Variables.GetValueOrDefault<string>(\"client_id\")}\")\" variable-name=\"clientInfoJson\" />\r\n        \r\n        <!-- Verify that the client exists and the redirect URI is valid -->\r\n        <set-variable name=\"is_client_registered\" value=\"@{\r\n            try {\r\n                string clientId = context.Variables.GetValueOrDefault<string>(\"client_id\", \"\");\r\n                string redirectUri = context.Variables.GetValueOrDefault<string>(\"normalized_redirect_uri\", \"\");\r\n                \r\n                if (string.IsNullOrEmpty(clientId)) {\r\n                    return false;\r\n                }\r\n                \r\n                // Get the client info from the variable set by cache-lookup-value\r\n                string clientInfoJson = context.Variables.GetValueOrDefault<string>(\"clientInfoJson\");\r\n                  if (string.IsNullOrEmpty(clientInfoJson)) {\r\n                    context.Trace($\"Client info not found in cache for client_id: {clientId}\");\r\n                    return false;\r\n                }\r\n                \r\n                // Parse client info\r\n                JObject clientInfo = JObject.Parse(clientInfoJson);\r\n                JArray redirectUris = clientInfo[\"redirect_uris\"]?.ToObject<JArray>();\r\n                \r\n                // Check if the redirect URI is in the registered URIs\r\n                if (redirectUris != null) {\r\n                    foreach (var uri in redirectUris) {\r\n                        // Normalize the URI from the cache for comparison\r\n                        string registeredUri = System.Net.WebUtility.UrlDecode(uri.ToString());\r\n                        if (registeredUri == redirectUri) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n                \r\n                context.Trace($\"Redirect URI mismatch - URI: {redirectUri} not found in registered URIs\");\r\n                return false;\r\n            }\r\n            catch (Exception ex) {\r\n                context.Trace($\"Error checking client registration: {ex.Message}\");\r\n                return false;\r\n            }\r\n        }\" />\r\n        \r\n        <!-- Check if client is properly registered -->\r\n        <choose>\r\n            <when condition=\"@(!context.Variables.GetValueOrDefault<bool>(\"is_client_registered\"))\">\r\n                <!-- Client is not properly registered, return error -->\r\n                <return-response>\r\n                    <set-status code=\"401\" reason=\"Unauthorized\" />\r\n                    <set-header name=\"Content-Type\" exists-action=\"override\">\r\n                        <value>application/json</value>\r\n                    </set-header>\r\n                    <set-body>@{\r\n                        var errorResponse = new JObject();\r\n                        errorResponse[\"error\"] = \"invalid_client\";\r\n                        errorResponse[\"error_description\"] = \"Client not found or redirect URI is invalid.\";\r\n                        return errorResponse.ToString();\r\n                    }</set-body>\r\n                </return-response>\r\n            </when>\r\n        </choose>\r\n        \r\n        <!-- STEP 6: Retrieve cached tokens -->\r\n        <!-- Get the access token stored during the authorization process -->\r\n        <cache-lookup-value key=\"@($\"AccessToken-{context.Variables.GetValueOrDefault(\"mcpConfirmConsentCode\")}\")\" variable-name=\"cachedSessionToken\" />\r\n        \r\n        <!-- STEP 7: Generate token response -->\r\n        <set-variable name=\"jsonPayload\" value=\"@{\r\n            var accessToken = context.Variables.GetValueOrDefault<string>(\"cachedSessionToken\");\r\n            var payloadObject = new\r\n            {\r\n                access_token = accessToken,\r\n                token_type = \"Bearer\",\r\n                expires_in = 3600,\r\n                refresh_token = \"\",\r\n                scope = \"openid profile email\"\r\n            };\r\n\r\n            // Serialize the object to a JSON string.\r\n            return Newtonsoft.Json.JsonConvert.SerializeObject(payloadObject);\r\n        }\" />\r\n        <set-body template=\"none\">@{\r\n            return (string)context.Variables.GetValueOrDefault(\"jsonPayload\", \"\");\r\n        }</set-body>\r\n        <set-header name=\"access-control-allow-origin\" exists-action=\"override\">\r\n            <value>*</value>\r\n        </set-header>\r\n    </outbound>\r\n    <on-error>\r\n        <base />\r\n    </on-error>\r\n</policies>",
            "$fxv#2": "<!--\r\n    OAUTH CALLBACK POLICY\r\n    This policy implements the callback endpoint for PKCE OAuth2 flow with Entra ID.\r\n    \r\n    Flow:\r\n    1. Entra ID redirects to this endpoint with authorization code after user login\r\n    2. We exchange the authorization code for an access token\r\n    3. We retrieve the stored MCP client data and generate a session key\r\n    4. We redirect back to the MCP client with a confirmation code\r\n-->\r\n<policies>\r\n    <inbound>\r\n        <base />\r\n        <!-- STEP 1: Extract the authorization code and state from Entra ID callback -->\r\n        <set-variable name=\"authCode\" value=\"@((string)context.Request.Url.Query.GetValueOrDefault(\"code\", \"\"))\" />\r\n        <set-variable name=\"entraState\" value=\"@((string)context.Request.Url.Query.GetValueOrDefault(\"state\", \"\"))\" />\r\n        <set-variable name=\"sessionState\" value=\"@((string)context.Request.Url.Query.GetValueOrDefault(\"session_state\", \"\"))\" />\r\n        \r\n        <!-- STEP 2: Retrieve stored PKCE code verifier using the state parameter -->\r\n        <cache-lookup-value key=\"@(\"CodeVerifier-\"+context.Variables.GetValueOrDefault(\"entraState\", \"\"))\" variable-name=\"codeVerifier\" />\r\n        <!-- STEP 3: Set token request parameters -->\r\n        <set-variable name=\"codeChallengeMethod\" value=\"S256\" />\r\n        <set-variable name=\"redirectUri\" value=\"{{OAuthCallbackUri}}\" />\r\n        <set-variable name=\"clientId\" value=\"{{EntraIDClientId}}\" />\r\n        <set-variable name=\"clientAssertionType\" value=\"@(System.Net.WebUtility.UrlEncode(\"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\"))\" />\r\n        <authentication-managed-identity resource=\"api://AzureADTokenExchange\" client-id=\"{{EntraIDFicClientId}}\" output-token-variable-name=\"ficToken\"/>\r\n         \r\n        <!-- STEP 4: Configure token request to Entra ID -->\r\n        <set-method>POST</set-method>\r\n        <set-header name=\"Content-Type\" exists-action=\"override\">\r\n            <value>application/x-www-form-urlencoded</value>\r\n        </set-header>\r\n        <set-body>@{\r\n            return $\"client_id={context.Variables.GetValueOrDefault(\"clientId\")}&grant_type=authorization_code&code={context.Variables.GetValueOrDefault(\"authCode\")}&redirect_uri={context.Variables.GetValueOrDefault(\"redirectUri\")}&scope=https://graph.microsoft.com/.default&code_verifier={context.Variables.GetValueOrDefault(\"codeVerifier\")}&client_assertion_type={context.Variables.GetValueOrDefault(\"clientAssertionType\")}&client_assertion={context.Variables.GetValueOrDefault(\"ficToken\")}\";\r\n        }</set-body>\r\n        <rewrite-uri template=\"/token\" />\r\n    </inbound>\r\n\r\n    <backend>\r\n        <base />\r\n    </backend>\r\n\r\n    <outbound>\r\n        <base />\r\n        <!-- STEP 5: Process the token response from Entra ID -->\r\n        <trace source=\"apim-policy\">\r\n            <message>@(\"Token response received: \" + context.Response.Body.As<string>(preserveContent: true))</message>\r\n        </trace>        \r\n        <!-- STEP 6: Generate secure session token for MCP client -->\r\n        <set-variable name=\"IV\" value=\"{{EncryptionIV}}\" />\r\n        <set-variable name=\"key\" value=\"{{EncryptionKey}}\" />\r\n        <set-variable name=\"sessionId\" value=\"@((string)Guid.NewGuid().ToString().Replace(\"-\", \"\"))\" />\r\n        <set-variable name=\"encryptedSessionKey\" value=\"@{\r\n            // Generate a unique session ID\r\n            string sessionId = (string)context.Variables.GetValueOrDefault(\"sessionId\");\r\n            byte[] sessionIdBytes = Encoding.UTF8.GetBytes(sessionId);\r\n            \r\n            // Encrypt the session ID using AES\r\n            byte[] IV = Convert.FromBase64String((string)context.Variables[\"IV\"]);\r\n            byte[] key = Convert.FromBase64String((string)context.Variables[\"key\"]);\r\n            \r\n            byte[] encryptedBytes = sessionIdBytes.Encrypt(\"Aes\", key, IV);\r\n            \r\n            return Convert.ToBase64String(encryptedBytes);\r\n        }\" />\r\n\r\n        <!-- STEP 7: Lookup MCP client redirect URI stored during authorization -->\r\n        <cache-lookup-value key=\"@((string)context.Variables.GetValueOrDefault(\"entraState\"))\" variable-name=\"mcpConfirmConsentCode\" />\r\n        <cache-lookup-value key=\"@($\"McpClientAuthData-{context.Variables.GetValueOrDefault(\"mcpConfirmConsentCode\")}\")\" variable-name=\"mcpClientData\" />\r\n        <!-- STEP 8: Extract the stored mcp client state from cache -->\r\n        <set-variable name=\"mcpState\" value=\"@{\r\n            var mcpAuthDataAsJObject = JObject.Parse((string)context.Variables[\"mcpClientData\"]);\r\n            return (string)mcpAuthDataAsJObject[\"mcpClientState\"];\r\n        }\" />\r\n        <!-- STEP 9: Extract the stored mcp client callback redirect uri from cache -->\r\n        <set-variable name=\"callbackRedirectUri\" value=\"@{\r\n            var mcpAuthDataAsJObject = JObject.Parse((string)context.Variables[\"mcpClientData\"]);\r\n            return mcpAuthDataAsJObject[\"mcpCallbackRedirectUri\"];\r\n        }\" />\r\n        \r\n        <!-- STEP 10: Store the encrypted session key and Entra token in cache -->\r\n        <!-- Store the encrypted session key with the MCP confirmation code as key -->\r\n        <cache-store-value duration=\"3600\" \r\n            key=\"@($\"AccessToken-{context.Variables.GetValueOrDefault(\"mcpConfirmConsentCode\")}\")\" \r\n            value=\"@($\"{context.Variables.GetValueOrDefault(\"encryptedSessionKey\")}\")\" />\r\n        \r\n        <!-- Store the Entra token for later use -->\r\n        <cache-store-value duration=\"3600\" \r\n            key=\"@($\"EntraToken-{context.Variables.GetValueOrDefault(\"sessionId\")}\")\"\r\n            value=\"@(context.Response.Body.As<JObject>(preserveContent: true).ToString())\" />\r\n        \r\n        <!-- STEP 11: Redirect back to MCP client with confirmation code -->\r\n        <return-response>\r\n            <set-status code=\"302\" reason=\"Found\" />\r\n            <set-header name=\"Location\" exists-action=\"override\">\r\n                <value>@($\"{context.Variables.GetValueOrDefault(\"callbackRedirectUri\")}?code={context.Variables.GetValueOrDefault(\"mcpConfirmConsentCode\")}&state={context.Variables.GetValueOrDefault(\"mcpState\")}&state_session=statesession123\")</value>\r\n            </set-header>\r\n            <set-body />\r\n        </return-response>\r\n    </outbound>\r\n    <on-error>\r\n        <base />\r\n    </on-error>\r\n</policies>",
            "$fxv#3": "<!--\r\n    REGISTER POLICY\r\n    This policy implements the dynamic client registration endpoint for OAuth2 flow.\r\n    \r\n    Flow:\r\n    1. MCP client sends a registration request with redirect URIs\r\n    2. We store the registration information in cache for later verification\r\n    3. We generate and return client credentials with the provided redirect URIs\r\n-->\r\n<policies>\r\n    <inbound>\r\n        <base />\r\n        <!-- STEP 1: Extract client registration data from request -->\r\n        <set-variable name=\"requestBody\" value=\"@(context.Request.Body.As<JObject>(preserveContent: true))\" />\r\n          <!-- STEP 2: Store registration information in cache -->\r\n        <cache-store-value duration=\"3600\" \r\n            key=\"DynamicClientRegistration\" \r\n            value=\"@(context.Variables.GetValueOrDefault<JObject>(\"requestBody\").ToString())\" />\r\n        \r\n        <!-- Store the redirect URI -->\r\n        <cache-store-value duration=\"3600\" \r\n            key=\"ClientRedirectUri\" \r\n            value=\"@(context.Variables.GetValueOrDefault<JObject>(\"requestBody\")[\"redirect_uris\"][0].ToString())\" />\r\n\r\n        <!-- Generate a unique client ID (GUID) -->\r\n        <set-variable name=\"uniqueClientId\" value=\"@(Guid.NewGuid().ToString())\" />\r\n        \r\n        <!-- Store client info by client ID for easy lookup during consent -->\r\n        <cache-store-value duration=\"3600\" \r\n            key=\"@($\"ClientInfo-{context.Variables.GetValueOrDefault<string>(\"uniqueClientId\")}\")\" \r\n            value=\"@{\r\n                var requestBody = context.Variables.GetValueOrDefault<JObject>(\"requestBody\");\r\n                var clientInfo = new JObject();\r\n                clientInfo[\"client_name\"] = requestBody[\"client_name\"]?.ToString() ?? \"Unknown Application\";\r\n                clientInfo[\"client_uri\"] = requestBody[\"client_uri\"]?.ToString() ?? \"\";\r\n                clientInfo[\"redirect_uris\"] = requestBody[\"redirect_uris\"];\r\n                return clientInfo.ToString();\r\n            }\" />\r\n        \r\n        <!-- STEP 3: Set response content type -->\r\n        <set-header name=\"Content-Type\" exists-action=\"override\">\r\n            <value>application/json</value>\r\n        </set-header>\r\n        \r\n        <!-- STEP 4: Return client credentials response -->\r\n        <return-response>\r\n            <set-status code=\"200\" reason=\"OK\" />\r\n            <set-header name=\"access-control-allow-origin\" exists-action=\"override\">\r\n                <value>*</value>\r\n            </set-header>\r\n            <set-body template=\"none\">@{\r\n                var requestBody = context.Variables.GetValueOrDefault<JObject>(\"requestBody\");\r\n                \r\n                // Generate timestamps dynamically\r\n                // Current time in seconds since epoch (Unix timestamp)\r\n                long currentTimeSeconds = DateTimeOffset.UtcNow.ToUnixTimeSeconds();\r\n                \r\n                // Client ID issued at current time\r\n                long clientIdIssuedAt = currentTimeSeconds;\r\n                \r\n                // Client secret expires in 1 year (31536000 seconds = 365 days)\r\n                long clientSecretExpiresAt = currentTimeSeconds + 31536000;\r\n\r\n                // Use the generated client ID from earlier\r\n                string uniqueClientId = context.Variables.GetValueOrDefault<string>(\"uniqueClientId\", Guid.NewGuid().ToString());\r\n                \r\n                return new JObject\r\n                {\r\n                    [\"client_id\"] = uniqueClientId,\r\n                    [\"client_id_issued_at\"] = clientIdIssuedAt,\r\n                    [\"client_secret_expires_at\"] = clientSecretExpiresAt,\r\n                    [\"redirect_uris\"] = requestBody[\"redirect_uris\"]?.ToObject<JArray>(),\r\n                    [\"client_name\"] = requestBody[\"client_name\"]?.ToString() ?? \"Unknown Application\",\r\n                    [\"client_uri\"] = requestBody[\"client_uri\"]?.ToString() ?? \"\"\r\n                }.ToString();\r\n            }</set-body>\r\n        </return-response>\r\n    </inbound>\r\n    <backend />\r\n    <outbound>\r\n        <base />\r\n    </outbound>\r\n    <on-error>\r\n        <base />\r\n    </on-error>\r\n</policies>",
            "$fxv#4": "<!--\r\n    REGISTER OPTIONS POLICY\r\n    This policy handles the OPTIONS pre-flight requests for the OAuth client registration endpoint.\r\n    It returns the appropriate CORS headers to allow cross-origin requests.\r\n-->\r\n<policies>\r\n    <inbound>\r\n        <!-- Return a 200 OK response with appropriate CORS headers -->\r\n        <return-response>\r\n            <set-status code=\"200\" reason=\"OK\" />\r\n            <set-header name=\"Access-Control-Allow-Origin\" exists-action=\"override\">\r\n                <value>*</value>\r\n            </set-header>\r\n            <set-header name=\"Access-Control-Allow-Methods\" exists-action=\"override\">\r\n                <value>GET, OPTIONS</value>\r\n            </set-header>\r\n            <set-header name=\"Access-Control-Allow-Headers\" exists-action=\"override\">\r\n                <value>Content-Type, Authorization</value>\r\n            </set-header>\r\n            <set-header name=\"Access-Control-Max-Age\" exists-action=\"override\">\r\n                <value>86400</value>\r\n            </set-header>\r\n            <set-body />\r\n        </return-response>\r\n        <base />\r\n    </inbound>\r\n    <backend>\r\n        <base />\r\n    </backend>\r\n    <outbound>\r\n        <base />\r\n    </outbound>\r\n    <on-error>\r\n        <base />\r\n    </on-error>\r\n</policies>\r\n",
            "$fxv#5": "<!--\r\n    OAUTH METADATA OPTIONS POLICY\r\n    This policy handles OPTIONS requests to the OAuth metadata endpoint, implementing CORS support\r\n    for cross-origin requests to the OAuth authorization server.\r\n-->\r\n<policies>\r\n    <inbound>\r\n        <!-- Return CORS headers for OPTIONS requests -->\r\n        <return-response>\r\n            <set-status code=\"200\" reason=\"OK\" />\r\n            <set-header name=\"Access-Control-Allow-Origin\" exists-action=\"override\">\r\n                <value>*</value>\r\n            </set-header>\r\n            <set-header name=\"Access-Control-Allow-Methods\" exists-action=\"override\">\r\n                <value>GET, OPTIONS</value>\r\n            </set-header>\r\n            <set-header name=\"Access-Control-Allow-Headers\" exists-action=\"override\">\r\n                <value>Content-Type, Authorization</value>\r\n            </set-header>\r\n            <set-header name=\"Access-Control-Max-Age\" exists-action=\"override\">\r\n                <value>86400</value>\r\n            </set-header>\r\n            <set-body />\r\n        </return-response>\r\n        <base />\r\n    </inbound>\r\n    <backend>\r\n        <base />\r\n    </backend>\r\n    <outbound>\r\n        <base />\r\n    </outbound>\r\n    <on-error>\r\n        <base />\r\n    </on-error>\r\n</policies>",
            "$fxv#6": "<!--\r\n    OAUTH METADATA POLICY\r\n    This policy implements the OpenID Connect and OAuth 2.0 discovery endpoint (.well-known/oauth-authorization-server).\r\n-->\r\n<policies>\r\n    <inbound>\r\n        <!-- Return the OAuth metadata in JSON format -->\r\n        <return-response>\r\n            <set-status code=\"200\" reason=\"OK\" />\r\n            <set-header name=\"Content-Type\" exists-action=\"override\">\r\n                <value>application/json; charset=utf-8</value>\r\n            </set-header>\r\n            <set-header name=\"access-control-allow-origin\" exists-action=\"override\">\r\n                <value>*</value>\r\n            </set-header>                \r\n            <set-body>\r\n                {\r\n                    \"issuer\": \"{{APIMGatewayURL}}\",\r\n                    \"service_documentation\": \"https://microsoft.com/\",\r\n                    \"authorization_endpoint\": \"{{APIMGatewayURL}}/authorize\",\r\n                    \"token_endpoint\": \"{{APIMGatewayURL}}/token\",\r\n                    \"revocation_endpoint\": \"{{APIMGatewayURL}}/revoke\",\r\n                    \"registration_endpoint\": \"{{APIMGatewayURL}}/register\",\r\n                    \"response_types_supported\": [\r\n                        \"code\"\r\n                    ],\r\n                    \"code_challenge_methods_supported\": [\r\n                        \"S256\"\r\n                    ],\r\n                    \"token_endpoint_auth_methods_supported\": [\r\n                        \"none\"\r\n                    ],\r\n                    \"grant_types_supported\": [\r\n                        \"authorization_code\",\r\n                        \"refresh_token\"\r\n                    ],\r\n                    \"revocation_endpoint_auth_methods_supported\": [\r\n                        \"client_secret_post\"\r\n                    ]\r\n                }\r\n            </set-body>\r\n        </return-response>\r\n        <base />\r\n    </inbound>\r\n    <backend>\r\n        <base />\r\n    </backend>\r\n    <outbound>\r\n        <base />\r\n    </outbound>\r\n    <on-error>\r\n        <base />\r\n    </on-error>\r\n</policies>",
            "$fxv#7": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<!--\r\n    Consent Policy - Handles user consent for OAuth client applications\r\n    \r\n    Flow:\r\n    1. Check existing consent status (cookies)\r\n    2. Display consent form for new clients\r\n    3. Process user response (allow/deny)\r\n    4. Store decision and redirect appropriately\r\n-->\r\n<policies>\r\n    <inbound>        \r\n        <base />        \r\n        <!-- Helper function to extract parameters from form/query -->\r\n        <set-variable name=\"form_body\" value=\"@{\r\n            if (context.Request.Method == \"POST\") {\r\n                string contentType = context.Request.Headers.GetValueOrDefault(\"Content-Type\", \"\");\r\n                if (contentType.Contains(\"application/x-www-form-urlencoded\")) {\r\n                    return context.Request.Body.As<string>(preserveContent: true);\r\n                }\r\n            }\r\n            return \"\";\r\n        }\" />\r\n        \r\n        <!-- Extract request parameters using consolidated logic -->\r\n        <set-variable name=\"client_id\" value=\"@{\r\n            string formBody = context.Variables.GetValueOrDefault<string>(\"form_body\", \"\");\r\n            \r\n            // Check form data first (POST)\r\n            if (!string.IsNullOrEmpty(formBody)) {\r\n                string[] pairs = formBody.Split('&');\r\n                foreach (string pair in pairs) {\r\n                    string[] keyValue = pair.Split(new char[] {'='}, 2);\r\n                    if (keyValue.Length == 2 && keyValue[0] == \"client_id\") {\r\n                        return System.Net.WebUtility.UrlDecode(keyValue[1]);\r\n                    }\r\n                }\r\n            }\r\n            // Fallback to query string (GET)\r\n            return (string)context.Request.Url.Query.GetValueOrDefault(\"client_id\", \"\");\r\n        }\" />\r\n        \r\n        <set-variable name=\"redirect_uri\" value=\"@{\r\n            string formBody = context.Variables.GetValueOrDefault<string>(\"form_body\", \"\");\r\n            \r\n            // Check form data first (POST)\r\n            if (!string.IsNullOrEmpty(formBody)) {\r\n                string[] pairs = formBody.Split('&');\r\n                foreach (string pair in pairs) {\r\n                    string[] keyValue = pair.Split(new char[] {'='}, 2);\r\n                    if (keyValue.Length == 2 && keyValue[0] == \"redirect_uri\") {\r\n                        return keyValue[1]; // Keep encoded for normalization\r\n                    }\r\n                }\r\n            }\r\n            // Fallback to query string (GET)\r\n            return (string)context.Request.Url.Query.GetValueOrDefault(\"redirect_uri\", \"\");\r\n        }\" />\r\n        \r\n        <set-variable name=\"state\" value=\"@{\r\n            string formBody = context.Variables.GetValueOrDefault<string>(\"form_body\", \"\");\r\n            \r\n            // Check form data first (POST)\r\n            if (!string.IsNullOrEmpty(formBody)) {\r\n                string[] pairs = formBody.Split('&');\r\n                foreach (string pair in pairs) {\r\n                    string[] keyValue = pair.Split(new char[] {'='}, 2);\r\n                    if (keyValue.Length == 2 && keyValue[0] == \"state\") {\r\n                        return keyValue[1]; // Keep encoded\r\n                    }\r\n                }\r\n            }\r\n            // Fallback to query string (GET)\r\n            return (string)context.Request.Url.Query.GetValueOrDefault(\"state\", \"\") ?? \"\";\r\n        }\" />\r\n        \r\n        <set-variable name=\"code_challenge\" value=\"@{\r\n            string formBody = context.Variables.GetValueOrDefault<string>(\"form_body\", \"\");\r\n            \r\n            // Check form data first (POST)\r\n            if (!string.IsNullOrEmpty(formBody)) {\r\n                string[] pairs = formBody.Split('&');\r\n                foreach (string pair in pairs) {\r\n                    string[] keyValue = pair.Split(new char[] {'='}, 2);\r\n                    if (keyValue.Length == 2 && keyValue[0] == \"code_challenge\") {\r\n                        return keyValue[1]; // Keep encoded\r\n                    }\r\n                }\r\n            }\r\n            // Fallback to query string (GET)\r\n            return (string)context.Request.Url.Query.GetValueOrDefault(\"code_challenge\", \"\");\r\n        }\" />\r\n        \r\n        <set-variable name=\"code_challenge_method\" value=\"@{\r\n            string formBody = context.Variables.GetValueOrDefault<string>(\"form_body\", \"\");\r\n            \r\n            // Check form data first (POST)\r\n            if (!string.IsNullOrEmpty(formBody)) {\r\n                string[] pairs = formBody.Split('&');\r\n                foreach (string pair in pairs) {\r\n                    string[] keyValue = pair.Split(new char[] {'='}, 2);\r\n                    if (keyValue.Length == 2 && keyValue[0] == \"code_challenge_method\") {\r\n                        return keyValue[1]; // Keep encoded\r\n                    }\r\n                }\r\n            }\r\n            // Fallback to query string (GET)\r\n            return (string)context.Request.Url.Query.GetValueOrDefault(\"code_challenge_method\", \"\");\r\n        }\" />\r\n      \r\n         <set-variable name=\"access_denied_template\" value=\"@{\r\n            return @\"<!DOCTYPE html>\r\n<html lang='en'>\r\n<head>    <meta charset='UTF-8'>\r\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\r\n    <title>Access Denied</title>\r\n    <style>\r\n__COMMON_STYLES__\r\n        .error-details {\r\n            background-color: #f8f9fa;\r\n            border: 1px solid #dee2e6;\r\n            border-radius: 8px;\r\n            padding: 20px;\r\n            margin: 20px 0;\r\n            font-family: 'Courier New', Consolas, monospace;\r\n            font-size: 14px;\r\n            line-height: 1.6;\r\n            white-space: pre-wrap;\r\n            overflow-x: auto;\r\n        }\r\n        \r\n        .error-title {\r\n            color: #dc3545;\r\n            font-weight: bold;\r\n            margin-bottom: 10px;\r\n        }\r\n        \r\n        .debug-section {\r\n            margin-top: 15px;\r\n            padding-top: 15px;\r\n            border-top: 1px solid #dee2e6;\r\n        }\r\n        \r\n        .debug-label {\r\n            font-weight: bold;\r\n            color: #495057;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class='consent-container'>\r\n        <h1 class='denial-heading'>Access Denied</h1>\r\n        <div class='error-details'>\r\n            <div class='error-title'>Error Details:</div>\r\n            __DENIAL_MESSAGE__\r\n        </div>\r\n        <p>The application will not be able to access your data.</p>\r\n        <p>You can close this window safely.</p>\r\n    </div>\r\n</body>\r\n</html>\";\r\n        }\" />\r\n        \r\n        <!-- Reusable function to generate 403 error response -->\r\n        <set-variable name=\"generate_403_response\" value=\"@{\r\n            string errorTemplate = context.Variables.GetValueOrDefault<string>(\"access_denied_template\");\r\n            string commonStyles = context.Variables.GetValueOrDefault<string>(\"common_styles\");\r\n            string message = \"Access denied.\";\r\n            \r\n            // Replace placeholders with actual content\r\n            errorTemplate = errorTemplate.Replace(\"__COMMON_STYLES__\", commonStyles);\r\n            errorTemplate = errorTemplate.Replace(\"__DENIAL_MESSAGE__\", message);\r\n            \r\n            return errorTemplate;\r\n        }\" />\r\n            <!-- Error page template -->\r\n        <set-variable name=\"client_not_found_template\" value=\"@{\r\n            return @\"<!DOCTYPE html>\r\n<html lang='en'>\r\n<head>    \r\n    <meta charset='UTF-8'>\r\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\r\n    <title>Client Not Found</title>\r\n    <style>\r\n__COMMON_STYLES__\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class='consent-container'>        \r\n        <h1 class='denial-heading'>Client Not Found</h1>\r\n        <p>The client registration for the specified client was not found.</p>\r\n        <div class='client-info'>\r\n            <p><strong>Client ID:</strong> <code>__CLIENT_ID_DISPLAY__</code></p>\r\n            <p><strong>Redirect URI:</strong> <code>__REDIRECT_URI__</code></p>\r\n        </div>\r\n        <p>Please ensure that you are using a properly registered client application.</p>\r\n        <p>You can close this window safely.</p>\r\n    </div>\r\n</body>\r\n</html>\";\r\n        }\" />\r\n        <!-- Normalize redirect URI by handling potential double-encoding -->\r\n        <set-variable name=\"normalized_redirect_uri\" value=\"@{\r\n            string redirectUri = context.Variables.GetValueOrDefault<string>(\"redirect_uri\", \"\");\r\n            \r\n            if (string.IsNullOrEmpty(redirectUri)) {\r\n                return \"\";\r\n            }\r\n            \r\n            try {\r\n                string firstDecode = System.Net.WebUtility.UrlDecode(redirectUri);\r\n                \r\n                // Check if still encoded (contains % followed by hex digits)\r\n                if (firstDecode.Contains(\"%\") && System.Text.RegularExpressions.Regex.IsMatch(firstDecode, @\"%[0-9A-Fa-f]{2}\")) {\r\n                    // Double-encoded, decode again\r\n                    string secondDecode = System.Net.WebUtility.UrlDecode(firstDecode);\r\n                    return secondDecode;\r\n                } else {\r\n                    // Single encoding, first decode is sufficient\r\n                    return firstDecode;\r\n                }\r\n            } catch (Exception) {\r\n                // If decoding fails, return original value\r\n                return redirectUri;\r\n            }\r\n        }\" />\r\n        \r\n        <!-- Cache client information lookup -->\r\n        <cache-lookup-value key=\"@($\"ClientInfo-{context.Variables.GetValueOrDefault<string>(\"client_id\")}\")\" variable-name=\"clientInfoJson\" />\r\n        \r\n        <!-- Get OAuth scopes from configuration -->\r\n        <set-variable name=\"oauth_scopes\" value=\"{{OAuthScopes}}\" />\r\n        \r\n        <!-- Generate CSRF token for form protection (GET requests only) -->\r\n        <set-variable name=\"csrf_token\" value=\"@{\r\n            // Only generate tokens for GET requests (showing consent form)\r\n            // POST requests validate existing tokens, not generate new ones\r\n            if (context.Request.Method != \"GET\") {\r\n                return \"\";\r\n            }\r\n            \r\n            // Generate random CSRF token using Guid and timestamp\r\n            string guidPart = Guid.NewGuid().ToString(\"N\");\r\n            string timestampPart = DateTime.UtcNow.Ticks.ToString();\r\n            string combinedString = guidPart + timestampPart;\r\n            \r\n            // Create URL-safe token by encoding combined string\r\n            string token = System.Convert.ToBase64String(\r\n                System.Text.Encoding.UTF8.GetBytes(combinedString)\r\n            ).Replace(\"+\", \"-\").Replace(\"/\", \"_\").Replace(\"=\", \"\").Substring(0, 32);\r\n            \r\n            return token;\r\n        }\" />\r\n        \r\n        <!-- Cache CSRF token for validation (GET requests only) -->\r\n        <choose>\r\n            <when condition=\"@(context.Request.Method == \"GET\" && !string.IsNullOrEmpty(context.Variables.GetValueOrDefault<string>(\"csrf_token\")))\">\r\n                <cache-store-value key=\"@($\"CSRF-{context.Variables.GetValueOrDefault<string>(\"csrf_token\")}\")\" \r\n                                  value=\"@{\r\n                                      string clientId = context.Variables.GetValueOrDefault<string>(\"client_id\", \"\");\r\n                                      string normalizedRedirectUri = context.Variables.GetValueOrDefault<string>(\"normalized_redirect_uri\", \"\");\r\n                                      string timestamp = DateTime.UtcNow.ToString(\"yyyy-MM-ddTHH:mm:ssZ\");\r\n                                      string tokenData = $\"{clientId}:{normalizedRedirectUri}:{timestamp}\";\r\n                                      \r\n                                      // Add debugging metadata\r\n                                      string debugInfo = $\"CACHED_AT:{DateTime.UtcNow:yyyy-MM-ddTHH:mm:ss.fffZ}\";\r\n                                      return $\"{tokenData}|{debugInfo}\";\r\n                                  }\" \r\n                                  duration=\"900\" />\r\n                <!-- Track token caching for debugging -->\r\n                <set-variable name=\"csrf_token_cached\" value=\"true\" />\r\n            </when>\r\n            <otherwise>\r\n                <set-variable name=\"csrf_token_cached\" value=\"false\" />\r\n            </otherwise>\r\n        </choose>\r\n          <!-- Validate client registration -->\r\n        <set-variable name=\"is_client_registered\" value=\"@{\r\n            try {\r\n                string clientId = context.Variables.GetValueOrDefault<string>(\"client_id\", \"\");\r\n                string redirectUri = context.Variables.GetValueOrDefault<string>(\"normalized_redirect_uri\", \"\");\r\n                \r\n                if (string.IsNullOrEmpty(clientId)) {\r\n                    return false;\r\n                }\r\n                \r\n                // Get client info from cache lookup\r\n                string clientInfoJson = context.Variables.GetValueOrDefault<string>(\"clientInfoJson\");\r\n                  if (string.IsNullOrEmpty(clientInfoJson)) {\r\n                    return false;\r\n                }\r\n                \r\n                // Parse client configuration\r\n                JObject clientInfo = JObject.Parse(clientInfoJson);\r\n                JArray redirectUris = clientInfo[\"redirect_uris\"]?.ToObject<JArray>();\r\n                \r\n                // Validate redirect URI is registered\r\n                if (redirectUris != null) {\r\n                    foreach (var uri in redirectUris) {\r\n                        // Normalize registered URI for comparison\r\n                        string registeredUri = System.Net.WebUtility.UrlDecode(uri.ToString());\r\n                        if (registeredUri == redirectUri) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n                \r\n                return false;\r\n            }\r\n            catch (Exception ex) {\r\n                return false;\r\n            }\r\n        }\" />\r\n        \r\n        <!-- Extract client name from cache -->\r\n        <set-variable name=\"client_name\" value=\"@{\r\n            try {\r\n                string clientId = context.Variables.GetValueOrDefault<string>(\"client_id\", \"\");\r\n                \r\n                if (string.IsNullOrEmpty(clientId)) {\r\n                    return \"Unknown Application\";\r\n                }\r\n                \r\n                // Get client info from cache lookup\r\n                string clientInfoJson = context.Variables.GetValueOrDefault<string>(\"clientInfoJson\");\r\n                \r\n                if (string.IsNullOrEmpty(clientInfoJson)) {\r\n                    return clientId;\r\n                }\r\n                \r\n                // Parse client configuration\r\n                JObject clientInfo = JObject.Parse(clientInfoJson);\r\n                string clientName = clientInfo[\"client_name\"]?.ToString();\r\n                \r\n                return string.IsNullOrEmpty(clientName) ? clientId : clientName;\r\n            }\r\n            catch (Exception ex) {\r\n                return context.Variables.GetValueOrDefault<string>(\"client_id\", \"Unknown Application\");\r\n            }\r\n        }\" />\r\n        \r\n        <!-- Extract client URI from cache -->\r\n        <set-variable name=\"client_uri\" value=\"@{\r\n            try {\r\n                // Get client info from cache lookup\r\n                string clientInfoJson = context.Variables.GetValueOrDefault<string>(\"clientInfoJson\");\r\n                \r\n                if (string.IsNullOrEmpty(clientInfoJson)) {\r\n                    return \"N/A\";\r\n                }\r\n                \r\n                // Parse client configuration\r\n                JObject clientInfo = JObject.Parse(clientInfoJson);\r\n                string clientUri = clientInfo[\"client_uri\"]?.ToString();\r\n                \r\n                return string.IsNullOrEmpty(clientUri) ? \"N/A\" : clientUri;\r\n            }\r\n            catch (Exception ex) {\r\n                return \"N/A\";\r\n            }\r\n        }\" />\r\n        \r\n        <!-- Define common styles for consent and error pages -->\r\n        <set-variable name=\"common_styles\" value=\"@{\r\n            return @\"        body {\r\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n            max-width: 100%;\r\n            margin: 0;            padding: 0;\r\n            line-height: 1.6;\r\n            min-height: 100vh;\r\n            background: linear-gradient(135deg, #1f1f1f, #333344, #3f4066); /* Modern dark gradient */\r\n            color: #333333;\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n        }.container, .consent-container {\r\n            background-color: #ffffff;\r\n            border-radius: 4px; /* Adding some subtle rounding */\r\n            padding: 30px;\r\n            max-width: 600px;            width: 90%;\r\n            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);\r\n            border: none;\r\n        }\r\n        \r\n        h1 {\r\n            margin-bottom: 20px;\r\n            border-bottom: 1px solid #EDEBE9;\r\n            padding-bottom: 10px;\r\n            font-weight: 500;\r\n        }\r\n        .consent-heading {\r\n            color: #0078D4; /* Microsoft Blue */\r\n        }\r\n        .denial-heading {\r\n            color: #D83B01; /* Microsoft Attention color */\r\n        }\r\n        \r\n        p {\r\n            margin: 15px 0;\r\n            line-height: 1.7;\r\n            color: #323130; /* Microsoft text color */\r\n        }          .client-info {\r\n            background-color: #F5F5F5; /* Light gray background for info boxes */\r\n            padding: 15px;\r\n            border-radius: 4px; /* Adding some subtle rounding */\r\n            margin: 15px 0;\r\n            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\r\n            border: 1px solid #EDEBE9;\r\n        }\r\n          .client-info p {\r\n            display: flex;\r\n            align-items: flex-start;\r\n            margin: 8px 0;\r\n        }\r\n        \r\n        .client-info strong {\r\n            min-width: 160px;\r\n            flex-shrink: 0;\r\n            text-align: left;\r\n            padding-right: 15px;\r\n            color: #0078D4; /* Microsoft Blue */\r\n        }\r\n          .client-info code {\r\n            font-family: 'Consolas', 'Monaco', 'Courier New', monospace;\r\n            background-color: rgba(240, 240, 250, 0.5);\r\n            padding: 2px 6px;\r\n            border-radius: 4px; /* Adding some subtle rounding */\r\n            color: #0078D4; /* Microsoft Blue */\r\n            word-break: break-all;\r\n        }\r\n          .btn {\r\n            display: inline-block;\r\n            padding: 8px 16px;\r\n            margin: 10px 0;\r\n            border-radius: 4px; /* Adding some subtle rounding */\r\n            text-decoration: none;\r\n            font-weight: 600;\r\n            cursor: pointer;\r\n            transition: all 0.2s ease;\r\n        }\r\n        \r\n        .btn-primary {\r\n            background-color: #0078D4; /* Microsoft Blue */\r\n            color: white;\r\n            border: none;\r\n        }\r\n        .btn-primary:hover {\r\n            background-color: #106EBE; /* Microsoft Blue hover */\r\n            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\r\n        }\r\n        \r\n        .btn-secondary {\r\n            background-color: #D83B01; /* Microsoft Red */\r\n            color: white; /* White text */\r\n            border: none;\r\n        }\r\n        .btn-secondary:hover {\r\n            background-color: #A80000; /* Darker red on hover */\r\n            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\r\n        }\r\n          .buttons {\r\n            margin-top: 20px;\r\n            display: flex;\r\n            gap: 10px;\r\n            justify-content: flex-start;\r\n        }\r\n        \r\n        a {\r\n            color: #0078D4; /* Microsoft Blue */\r\n            text-decoration: none;\r\n            font-weight: 600;\r\n        }\r\n        a:hover {\r\n            text-decoration: underline;\r\n        }\r\n        strong {\r\n            color: #0078D4; /* Microsoft Blue */\r\n            font-weight: 600;\r\n        }          .error-message {\r\n            background-color: #FDE7E9; /* Light red background */\r\n            padding: 15px;\r\n            margin: 15px 0;\r\n            border-radius: 4px; /* Adding some subtle rounding */\r\n            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\r\n            border-left: 3px solid #D83B01; /* Microsoft Attention color */\r\n        }\r\n        \r\n        .error-message p {\r\n            margin: 8px 0;\r\n        }\r\n        \r\n        .error-message p:first-child {\r\n            font-weight: 500;\r\n            color: #D83B01; /* Microsoft Attention color */\r\n        }\";\r\n        }\" />\r\n        \r\n        <!-- Consent page HTML template -->\r\n        <set-variable name=\"consent_page_template\" value=\"@{\r\n            return @\"<!DOCTYPE html>\r\n<html lang='en'>\r\n<head>    <meta charset='UTF-8'>\r\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\r\n    <title>Application Consent</title>\r\n    <style>\r\n__COMMON_STYLES__    /* Additional styles for scopes list */\r\n    .scopes-list {\r\n        margin: 0;\r\n        padding-left: 0;\r\n    }\r\n    .scopes-list li {\r\n        list-style-type: none;\r\n        padding: 4px 0;\r\n        display: flex;\r\n    }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class='consent-container'>\r\n        <h1 class='consent-heading'>Application Access Request</h1>\r\n\r\n        <p>The following application is requesting access to <strong>{{MCPServerName}}</strong>, which might include access to everything <strong>{{MCPServerName}}</strong> has been and will be granted access to.</p>\r\n        \r\n        <div class='client-info'>\r\n            <p><strong>Application Name:</strong> <code>__CLIENT_NAME__</code></p>\r\n            <p><strong>Application Website:</strong> <code>__CLIENT_URI__</code></p>\r\n            <p><strong>Application ID:</strong> <code>__CLIENT_ID_DISPLAY__</code></p>\r\n            <p><strong>Redirect URI:</strong> <code>__REDIRECT_URI__</code></p>\r\n        </div>        \r\n        <p>The application will have access to the following scopes, used by <strong>{{MCPServerName}}</strong>:</p>\r\n        <div class='client-info'>\r\n            <ul class='scopes-list'>\r\n                <li>__OAUTH_SCOPES__</li>\r\n            </ul>\r\n        </div>        <div class='buttons'>\r\n            <form method='post' action='__CONSENT_ACTION_URL__' style='display: inline-block;'>\r\n                <input type='hidden' name='client_id' value='__CLIENT_ID_FORM__'>\r\n                <input type='hidden' name='redirect_uri' value='__REDIRECT_URI__'>\r\n                <input type='hidden' name='state' value='__STATE__'>\r\n                <input type='hidden' name='code_challenge' value='__CODE_CHALLENGE__'>\r\n                <input type='hidden' name='code_challenge_method' value='__CODE_CHALLENGE_METHOD__'>\r\n                <input type='hidden' name='csrf_token' value='__CSRF_TOKEN__'>\r\n                <input type='hidden' name='consent_action' value='allow'>\r\n                <button type='submit' class='btn btn-primary'>Allow</button>\r\n            </form>\r\n            \r\n            <form method='post' action='__CONSENT_ACTION_URL__' style='display: inline-block;'>                <input type='hidden' name='client_id' value='__CLIENT_ID_FORM__'>\r\n                <input type='hidden' name='redirect_uri' value='__REDIRECT_URI__'>\r\n                <input type='hidden' name='state' value='__STATE__'>\r\n                <input type='hidden' name='code_challenge' value='__CODE_CHALLENGE__'>\r\n                <input type='hidden' name='code_challenge_method' value='__CODE_CHALLENGE_METHOD__'>\r\n                <input type='hidden' name='csrf_token' value='__CSRF_TOKEN__'>\r\n                <input type='hidden' name='consent_action' value='deny'>\r\n                <button type='submit' class='btn btn-secondary'>Deny</button>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</body>\r\n</html>\";\r\n        }\" />\r\n\r\n        <!-- Check for existing client denial cookie -->\r\n        <set-variable name=\"has_denial_cookie\" value=\"@{\r\n            try {\r\n                if (string.IsNullOrEmpty(context.Variables.GetValueOrDefault<string>(\"client_id\", \"\")) || \r\n                    string.IsNullOrEmpty(context.Variables.GetValueOrDefault<string>(\"redirect_uri\", \"\"))) {\r\n                    return false;\r\n                }\r\n                  \r\n                string clientId = context.Variables.GetValueOrDefault<string>(\"client_id\", \"\");\r\n                // Use normalized redirect URI for consistency\r\n                string redirectUri = context.Variables.GetValueOrDefault<string>(\"normalized_redirect_uri\", \"\");\r\n                \r\n                // Cookie name for client denials\r\n                string DENIAL_COOKIE_NAME = \"MCP_DENIED_CLIENTS\";\r\n                \r\n                // Check for denial cookie in request\r\n                var cookieHeader = context.Request.Headers.GetValueOrDefault(\"Cookie\", \"\");\r\n                if (string.IsNullOrEmpty(cookieHeader)) {\r\n                    return false;\r\n                }\r\n                \r\n                // Parse cookie header for denial cookie\r\n                string[] cookies = cookieHeader.Split(';');\r\n                foreach (string cookie in cookies) {\r\n                    string trimmedCookie = cookie.Trim();\r\n                    if (trimmedCookie.StartsWith(DENIAL_COOKIE_NAME + \"=\")) {\r\n                        // Extract cookie value\r\n                        string cookieValue = trimmedCookie.Substring(DENIAL_COOKIE_NAME.Length + 1);\r\n                        try {\r\n                            // Parse base64-encoded JSON array of denied clients\r\n                            string decodedValue = System.Text.Encoding.UTF8.GetString(\r\n                                System.Convert.FromBase64String(cookieValue.Split('.')[0]));\r\n                            JArray deniedClients = JArray.Parse(decodedValue);                            \r\n                            \r\n                            // Create client/redirect identifier\r\n                            // Use normalized redirect URI for consistency\r\n                            string clientKey = $\"{clientId}:{redirectUri}\";\r\n                            \r\n                            foreach (var item in deniedClients) {\r\n                                string itemString = item.ToString();\r\n                                \r\n                                // Direct comparison using normalized URI\r\n                                if (itemString == clientKey) {\r\n                                    return true;\r\n                                }\r\n                                \r\n                                // Handle URL-encoded redirect URI in stored cookie\r\n                                try {\r\n                                    string storedValue = itemString;\r\n                                    if (storedValue.Contains(':')) {\r\n                                        string[] parts = storedValue.Split(new char[] {':'}, 2);\r\n                                        if (parts.Length == 2) {\r\n                                            string storedClientId = parts[0];\r\n                                            // Decode stored redirect URI for comparison\r\n                                            string storedRedirectUri = System.Net.WebUtility.UrlDecode(parts[1]);\r\n                                            \r\n                                            // Compare both decoded forms\r\n                                            if (storedClientId == clientId && storedRedirectUri == redirectUri) {\r\n                                                return true;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                } catch (Exception ex) {\r\n                                    // Ignore comparison errors and continue\r\n                                }\r\n                            }\r\n                        } catch (Exception ex) {\r\n                            // Ignore cookie parsing errors and continue\r\n                        }\r\n                    }\r\n                }\r\n                \r\n                return false;\r\n            } catch (Exception ex) {\r\n                return false;\r\n            }\r\n        }\" />\r\n        \r\n        <!-- Check for existing client approval cookie -->\r\n        <set-variable name=\"has_approval_cookie\" value=\"@{\r\n            try {\r\n                if (string.IsNullOrEmpty(context.Variables.GetValueOrDefault<string>(\"client_id\", \"\")) || \r\n                    string.IsNullOrEmpty(context.Variables.GetValueOrDefault<string>(\"redirect_uri\", \"\"))) {\r\n                    return false;\r\n                }\r\n                  \r\n                string clientId = context.Variables.GetValueOrDefault<string>(\"client_id\", \"\");\r\n                // Use normalized redirect URI for consistency\r\n                string redirectUri = context.Variables.GetValueOrDefault<string>(\"normalized_redirect_uri\", \"\");\r\n                \r\n                // Cookie name for client approvals\r\n                string APPROVAL_COOKIE_NAME = \"MCP_APPROVED_CLIENTS\";\r\n                \r\n                // Check for approval cookie in request\r\n                var cookieHeader = context.Request.Headers.GetValueOrDefault(\"Cookie\", \"\");\r\n                if (string.IsNullOrEmpty(cookieHeader)) {\r\n                    return false;\r\n                }\r\n                \r\n                // Parse cookie header for approval cookie\r\n                string[] cookies = cookieHeader.Split(';');\r\n                foreach (string cookie in cookies) {\r\n                    string trimmedCookie = cookie.Trim();\r\n                    if (trimmedCookie.StartsWith(APPROVAL_COOKIE_NAME + \"=\")) {\r\n                        // Extract cookie value\r\n                        string cookieValue = trimmedCookie.Substring(APPROVAL_COOKIE_NAME.Length + 1);\r\n                        try {                            \r\n                            // Parse base64-encoded JSON array of approved clients\r\n                            string decodedValue = System.Text.Encoding.UTF8.GetString(\r\n                                System.Convert.FromBase64String(cookieValue.Split('.')[0]));\r\n                            JArray approvedClients = JArray.Parse(decodedValue);\r\n                            \r\n                            // Create client/redirect identifier\r\n                            // Use normalized redirect URI for consistency\r\n                            string clientKey = $\"{clientId}:{redirectUri}\";\r\n                            \r\n                            foreach (var item in approvedClients) {\r\n                                string itemString = item.ToString();\r\n                                \r\n                                // Direct comparison using normalized URI\r\n                                if (itemString == clientKey) {\r\n                                    return true;\r\n                                }\r\n                                \r\n                                // Handle URL-encoded redirect URI in stored cookie\r\n                                try {\r\n                                    string storedValue = itemString;\r\n                                    if (storedValue.Contains(':')) {\r\n                                        string[] parts = storedValue.Split(new char[] {':'}, 2);\r\n                                        if (parts.Length == 2) {\r\n                                            string storedClientId = parts[0];\r\n                                            // Decode stored redirect URI for comparison\r\n                                            string storedRedirectUri = System.Net.WebUtility.UrlDecode(parts[1]);\r\n                                            \r\n                                            // Compare both decoded forms\r\n                                            if (storedClientId == clientId && storedRedirectUri == redirectUri) {\r\n                                                return true;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                } catch (Exception ex) {\r\n                                    // Ignore comparison errors and continue\r\n                                }\r\n                            }\r\n                        } catch (Exception ex) {\r\n                            // Ignore cookie parsing errors and continue\r\n                        }\r\n                    }\r\n                }\r\n                \r\n                return false;\r\n            } catch (Exception ex) {\r\n                return false;\r\n            }\r\n        }\" />\r\n        \r\n        <set-variable name=\"consent_action\" value=\"@{\r\n            string formBody = context.Variables.GetValueOrDefault<string>(\"form_body\", \"\");\r\n            \r\n            if (!string.IsNullOrEmpty(formBody)) {\r\n                string[] pairs = formBody.Split('&');\r\n                foreach (string pair in pairs) {\r\n                    string[] keyValue = pair.Split(new char[] {'='}, 2);\r\n                    if (keyValue.Length == 2 && keyValue[0] == \"consent_action\") {\r\n                        return System.Net.WebUtility.UrlDecode(keyValue[1]);\r\n                    }\r\n                }\r\n                // Fallback to JSON parsing if form parsing failed\r\n                return context.Request.Body.As<JObject>(preserveContent: true)[\"consent_action\"]?.ToString() ?? \"\";\r\n            }\r\n            return \"\";\r\n        }\" />\r\n        \r\n        <!-- Extract CSRF token from form data -->\r\n        <set-variable name=\"csrf_token_from_form\" value=\"@{\r\n            string formBody = context.Variables.GetValueOrDefault<string>(\"form_body\", \"\");\r\n            \r\n            if (!string.IsNullOrEmpty(formBody)) {\r\n                string[] pairs = formBody.Split('&');\r\n                foreach (string pair in pairs) {\r\n                    string[] keyValue = pair.Split(new char[] {'='}, 2);\r\n                    if (keyValue.Length == 2 && keyValue[0] == \"csrf_token\") {\r\n                        return System.Net.WebUtility.UrlDecode(keyValue[1]);\r\n                    }\r\n                }\r\n            }\r\n            return \"\";\r\n        }\" />\r\n        \r\n        <!-- Validate CSRF token for POST requests -->\r\n        <set-variable name=\"csrf_valid\" value=\"@{\r\n            if (context.Request.Method != \"POST\") {\r\n                return true; // Only validate POST requests\r\n            }\r\n            \r\n            string submittedToken = context.Variables.GetValueOrDefault<string>(\"csrf_token_from_form\", \"\");\r\n            if (string.IsNullOrEmpty(submittedToken)) {\r\n                return false;\r\n            }\r\n            \r\n            // Token cache lookup validation happens next\r\n            string cacheKey = $\"CSRF-{submittedToken}\";\r\n            \r\n            return true; // Initial validation passes, detailed validation follows\r\n        }\" />\r\n        \r\n        <!-- Validate Origin/Referer headers for CSRF protection -->\r\n        <set-variable name=\"origin_referer_valid\" value=\"@{\r\n            if (context.Request.Method != \"POST\") {\r\n                return true; // Only validate state-changing operations\r\n            }\r\n            \r\n            // Get the target origin (expected origin)\r\n            string targetOrigin = \"{{APIMGatewayURL}}\";\r\n            \r\n            // Remove protocol and trailing slash for comparison\r\n            if (targetOrigin.StartsWith(\"https://\")) {\r\n                targetOrigin = targetOrigin.Substring(8);\r\n            } else if (targetOrigin.StartsWith(\"http://\")) {\r\n                targetOrigin = targetOrigin.Substring(7);\r\n            }\r\n            if (targetOrigin.EndsWith(\"/\")) {\r\n                targetOrigin = targetOrigin.TrimEnd('/');\r\n            }\r\n            \r\n            // First check Origin header (preferred)\r\n            string originHeader = context.Request.Headers.GetValueOrDefault(\"Origin\", \"\");\r\n            if (!string.IsNullOrEmpty(originHeader)) {\r\n                try {\r\n                    Uri originUri = new Uri(originHeader);\r\n                    string sourceOrigin = originUri.Host;\r\n                    if (originUri.Port != 80 && originUri.Port != 443) {\r\n                        sourceOrigin += \":\" + originUri.Port;\r\n                    }\r\n                    \r\n                    if (sourceOrigin.Equals(targetOrigin, StringComparison.OrdinalIgnoreCase)) {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                } catch (Exception ex) {\r\n                    return false;\r\n                }\r\n            }\r\n            \r\n            // Fallback to Referer header if Origin is not present\r\n            string refererHeader = context.Request.Headers.GetValueOrDefault(\"Referer\", \"\");\r\n            if (!string.IsNullOrEmpty(refererHeader)) {\r\n                try {\r\n                    Uri refererUri = new Uri(refererHeader);\r\n                    string sourceOrigin = refererUri.Host;\r\n                    if (refererUri.Port != 80 && refererUri.Port != 443) {\r\n                        sourceOrigin += \":\" + refererUri.Port;\r\n                    }\r\n                    \r\n                    if (sourceOrigin.Equals(targetOrigin, StringComparison.OrdinalIgnoreCase)) {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                } catch (Exception ex) {\r\n                    return false;\r\n                }\r\n            }\r\n            \r\n            // Neither Origin nor Referer header present - this is suspicious for POST requests\r\n            // OWASP recommends blocking such requests for better security\r\n            return false; // Block requests without proper origin validation\r\n        }\" />\r\n        \r\n        <!-- Validate Fetch Metadata headers for CSRF protection -->\r\n        <set-variable name=\"fetch_metadata_valid\" value=\"@{\r\n            // Check Sec-Fetch-Site header for cross-site request detection\r\n            string secFetchSite = context.Request.Headers.GetValueOrDefault(\"Sec-Fetch-Site\", \"\");\r\n            \r\n            // Allow same-origin, same-site, and direct navigation\r\n            if (string.IsNullOrEmpty(secFetchSite) || \r\n                secFetchSite == \"same-origin\" || \r\n                secFetchSite == \"same-site\" || \r\n                secFetchSite == \"none\") {\r\n                return true;\r\n            }\r\n            \r\n            // Block cross-site POST requests\r\n            if (context.Request.Method == \"POST\" && secFetchSite == \"cross-site\") {\r\n                return false;\r\n            }\r\n            \r\n            // Allow other values for compatibility\r\n            return true;\r\n        }\" />\r\n        \r\n        <!-- Lookup CSRF token from cache -->\r\n        <cache-lookup-value key=\"@($\"CSRF-{context.Variables.GetValueOrDefault<string>(\"csrf_token_from_form\")}\")\" variable-name=\"csrf_token_data\" />\r\n        \r\n        <!-- Validate CSRF token details -->\r\n        <set-variable name=\"csrf_validation_result\" value=\"@{\r\n            if (context.Request.Method != \"POST\") {\r\n                return \"valid\"; // No validation needed for GET requests\r\n            }\r\n            \r\n            string submittedToken = context.Variables.GetValueOrDefault<string>(\"csrf_token_from_form\", \"\");\r\n            if (string.IsNullOrEmpty(submittedToken)) {\r\n                return \"missing_token\";\r\n            }\r\n            \r\n            string tokenData = context.Variables.GetValueOrDefault<string>(\"csrf_token_data\");\r\n            if (string.IsNullOrEmpty(tokenData)) {\r\n                return \"invalid_token\";\r\n            }\r\n            \r\n            try {\r\n                // Extract token data (before debug info separator)\r\n                string actualTokenData = tokenData;\r\n                if (tokenData.Contains(\"|\")) {\r\n                    actualTokenData = tokenData.Split('|')[0];\r\n                }\r\n                \r\n                // Parse token data: client_id:redirect_uri:timestamp\r\n                // Since both redirect_uri and timestamp can contain colons, we need to be very careful\r\n                // The timestamp format is: YYYY-MM-DDTHH:mm:ssZ\r\n                // So we look for the last occurrence of a timestamp pattern\r\n                \r\n                // Find the last occurrence of a timestamp pattern (YYYY-MM-DDTHH:mm:ssZ)\r\n                var timestampPattern = @\":\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$\";\r\n                var timestampMatch = System.Text.RegularExpressions.Regex.Match(actualTokenData, timestampPattern);\r\n                \r\n                if (!timestampMatch.Success) {\r\n                    return \"malformed_token\";\r\n                }\r\n                \r\n                // Extract the timestamp (without the leading colon)\r\n                string timestampStr = timestampMatch.Value.Substring(1);\r\n                \r\n                // Extract everything before the timestamp match as the client_id:redirect_uri part\r\n                string clientAndRedirect = actualTokenData.Substring(0, timestampMatch.Index);\r\n                \r\n                // Split client_id:redirect_uri on the first colon only\r\n                int firstColonIndex = clientAndRedirect.IndexOf(':');\r\n                if (firstColonIndex == -1) {\r\n                    return \"malformed_token\";\r\n                }\r\n                \r\n                string tokenClientId = clientAndRedirect.Substring(0, firstColonIndex);\r\n                string tokenRedirectUri = clientAndRedirect.Substring(firstColonIndex + 1);\r\n                \r\n                // Validate client_id and redirect_uri match using constant-time comparison\r\n                string currentClientId = context.Variables.GetValueOrDefault<string>(\"client_id\", \"\");\r\n                string currentRedirectUri = context.Variables.GetValueOrDefault<string>(\"normalized_redirect_uri\", \"\");\r\n                \r\n                // Constant-time string comparison for client_id to prevent timing attacks\r\n                bool clientIdMatches = true;\r\n                if (tokenClientId == null || currentClientId == null) {\r\n                    clientIdMatches = (tokenClientId == currentClientId);\r\n                } else if (tokenClientId.Length != currentClientId.Length) {\r\n                    clientIdMatches = false;\r\n                } else {\r\n                    int result = 0;\r\n                    for (int i = 0; i < tokenClientId.Length; i++) {\r\n                        result |= tokenClientId[i] ^ currentClientId[i];\r\n                    }\r\n                    clientIdMatches = (result == 0);\r\n                }\r\n                \r\n                if (!clientIdMatches) {\r\n                    return \"client_mismatch\";\r\n                }\r\n                \r\n                // Constant-time string comparison for redirect_uri to prevent timing attacks\r\n                bool redirectUriMatches = true;\r\n                if (tokenRedirectUri == null || currentRedirectUri == null) {\r\n                    redirectUriMatches = (tokenRedirectUri == currentRedirectUri);\r\n                } else if (tokenRedirectUri.Length != currentRedirectUri.Length) {\r\n                    redirectUriMatches = false;\r\n                } else {\r\n                    int result = 0;\r\n                    for (int i = 0; i < tokenRedirectUri.Length; i++) {\r\n                        result |= tokenRedirectUri[i] ^ currentRedirectUri[i];\r\n                    }\r\n                    redirectUriMatches = (result == 0);\r\n                }\r\n                \r\n                if (!redirectUriMatches) {\r\n                    return \"redirect_mismatch\";\r\n                }\r\n                \r\n                // Validate timestamp (token should not be older than 15 minutes)\r\n                DateTime tokenTime;\r\n                try {\r\n                    tokenTime = DateTime.Parse(timestampStr);\r\n                } catch (Exception) {\r\n                    return \"invalid_timestamp\";\r\n                }\r\n                \r\n                TimeSpan age = DateTime.UtcNow - tokenTime;\r\n                if (age.TotalMinutes > 15) {\r\n                    return \"expired_token\";\r\n                }\r\n                \r\n                return \"valid\";\r\n                \r\n            } catch (Exception ex) {\r\n                return \"validation_error\";\r\n            }\r\n        }\" />\r\n        \r\n        <!-- If this is a form submission, process the consent choice -->\r\n        <choose>\r\n            <when condition=\"@(context.Request.Method == \"POST\")\">\r\n                <!-- Validate Origin/Referer headers -->\r\n                <choose>\r\n                    <when condition=\"@(!context.Variables.GetValueOrDefault<bool>(\"origin_referer_valid\"))\">\r\n                        <!-- Origin/Referer validation failed -->\r\n                        <return-response>\r\n                            <set-status code=\"403\" reason=\"Forbidden\" />\r\n                            <set-header name=\"Content-Type\" exists-action=\"override\">\r\n                                <value>text/html</value>\r\n                            </set-header>\r\n                            <set-header name=\"Cache-Control\" exists-action=\"override\">\r\n                                <value>no-store, no-cache</value>\r\n                            </set-header>\r\n                            <set-header name=\"Pragma\" exists-action=\"override\">\r\n                                <value>no-cache</value>\r\n                            </set-header>\r\n                            <set-body>@(context.Variables.GetValueOrDefault<string>(\"generate_403_response\"))</set-body>\r\n                        </return-response>\r\n                    </when>\r\n                    <otherwise>\r\n                        <!-- Origin/Referer validation passed -->\r\n                        <!-- Validate Fetch Metadata headers -->\r\n                        <choose>\r\n                            <when condition=\"@(!context.Variables.GetValueOrDefault<bool>(\"fetch_metadata_valid\"))\">\r\n                                <!-- Fetch metadata validation failed -->\r\n                                <return-response>\r\n                                    <set-status code=\"403\" reason=\"Forbidden\" />\r\n                                    <set-header name=\"Content-Type\" exists-action=\"override\">\r\n                                        <value>text/html</value>\r\n                                    </set-header>\r\n                                    <set-header name=\"Cache-Control\" exists-action=\"override\">\r\n                                        <value>no-store, no-cache</value>\r\n                                    </set-header>\r\n                                    <set-header name=\"Pragma\" exists-action=\"override\">\r\n                                        <value>no-cache</value>\r\n                                    </set-header>\r\n                                    <set-body>@(context.Variables.GetValueOrDefault<string>(\"generate_403_response\"))</set-body>\r\n                                </return-response>\r\n                            </when>\r\n                            <otherwise>\r\n                                <!-- Fetch metadata validation passed -->\r\n                                <!-- Validate CSRF token -->\r\n                                <choose>\r\n                                    <when condition=\"@(context.Variables.GetValueOrDefault<string>(\"csrf_validation_result\") != \"valid\")\">\r\n                                        <!-- CSRF validation failed -->\r\n                                        <return-response>\r\n                                            <set-status code=\"403\" reason=\"Forbidden\" />\r\n                                            <set-header name=\"Content-Type\" exists-action=\"override\">\r\n                                                <value>text/html</value>\r\n                                            </set-header>\r\n                                            <set-header name=\"Cache-Control\" exists-action=\"override\">\r\n                                                <value>no-store, no-cache</value>\r\n                                            </set-header>\r\n                                            <set-header name=\"Pragma\" exists-action=\"override\">\r\n                                                <value>no-cache</value>\r\n                                            </set-header>\r\n                                            <set-body>@(context.Variables.GetValueOrDefault<string>(\"generate_403_response\"))</set-body>\r\n                                        </return-response>\r\n                                    </when>\r\n                                    <otherwise>\r\n                                        <!-- CSRF validation passed -->\r\n                                        <!-- Delete CSRF token from cache to prevent reuse -->\r\n                                        <cache-remove-value key=\"@($\"CSRF-{context.Variables.GetValueOrDefault<string>(\"csrf_token_from_form\")}\")\" />\r\n                                        \r\n                                        <choose>\r\n                                            <when condition=\"@(context.Variables.GetValueOrDefault<string>(\"consent_action\") == \"allow\")\">\r\n                        <!-- Process consent approval -->\r\n                        <set-variable name=\"response_status_code\" value=\"302\" />\r\n                        <set-variable name=\"response_redirect_location\" value=\"@{\r\n                            string baseUrl = \"{{APIMGatewayURL}}\";\r\n                            \r\n                            // Use already extracted parameters instead of re-parsing form data\r\n                            string clientId = context.Variables.GetValueOrDefault<string>(\"client_id\", \"\");\r\n                            string redirectUri = context.Variables.GetValueOrDefault<string>(\"normalized_redirect_uri\", \"\");\r\n                            string state = context.Variables.GetValueOrDefault<string>(\"state\", \"\");\r\n                            \r\n                            // URL encode parameters to prevent injection attacks\r\n                            string encodedClientId = System.Net.WebUtility.UrlEncode(clientId);\r\n                            string encodedRedirectUri = System.Net.WebUtility.UrlEncode(redirectUri);\r\n                            // State is already properly encoded from form submission, don't double-encode\r\n                            string encodedState = state;\r\n                            \r\n                            // Add PKCE parameters if they exist\r\n                            string codeChallenge = context.Variables.GetValueOrDefault<string>(\"code_challenge\", \"\");\r\n                            string codeChallengeMethod = context.Variables.GetValueOrDefault<string>(\"code_challenge_method\", \"\");\r\n                            \r\n                            string url = $\"{baseUrl}/authorize?client_id={encodedClientId}&redirect_uri={encodedRedirectUri}&state={encodedState}\";\r\n                            \r\n                            if (!string.IsNullOrEmpty(codeChallenge)) {\r\n                                url += $\"&code_challenge={System.Net.WebUtility.UrlEncode(codeChallenge)}\";\r\n                            }\r\n                            \r\n                            if (!string.IsNullOrEmpty(codeChallengeMethod)) {\r\n                                url += $\"&code_challenge_method={System.Net.WebUtility.UrlEncode(codeChallengeMethod)}\";\r\n                            }\r\n                            \r\n                            return url;\r\n                        }\" />\r\n                          <!-- Calculate approval cookie value -->\r\n                        <set-variable name=\"approval_cookie\" value=\"@{\r\n                            string cookieName = \"MCP_APPROVED_CLIENTS\";\r\n                            \r\n                            // Use already extracted parameters instead of re-parsing form data\r\n                            string clientId = context.Variables.GetValueOrDefault<string>(\"client_id\", \"\");\r\n                            string redirectUri = context.Variables.GetValueOrDefault<string>(\"normalized_redirect_uri\", \"\");\r\n                            \r\n                            // Create a unique identifier for this client/redirect combination\r\n                            string clientKey = $\"{clientId}:{redirectUri}\";\r\n                            \r\n                            // Check for existing cookie\r\n                            var cookieHeader = context.Request.Headers.GetValueOrDefault(\"Cookie\", \"\");\r\n                            JArray approvedClients = new JArray();\r\n                            \r\n                            if (!string.IsNullOrEmpty(cookieHeader)) {\r\n                                // Parse cookies to find our approval cookie\r\n                                string[] cookies = cookieHeader.Split(';');\r\n                                foreach (string cookie in cookies) {\r\n                                    string trimmedCookie = cookie.Trim();\r\n                                    if (trimmedCookie.StartsWith(cookieName + \"=\")) {\r\n                                        try {\r\n                                            // Extract and parse the cookie value\r\n                                            string cookieValue = trimmedCookie.Substring(cookieName.Length + 1);\r\n                                            // Get the payload part (before the first dot if cookie is signed)\r\n                                            string payload = cookieValue.Contains('.') ? \r\n                                                cookieValue.Split('.')[0] : cookieValue;\r\n                                            string decodedValue = System.Text.Encoding.UTF8.GetString(\r\n                                                System.Convert.FromBase64String(payload));\r\n                                            approvedClients = JArray.Parse(decodedValue);\r\n                                        } catch (Exception) {\r\n                                            // If parsing fails, we'll just create a new cookie\r\n                                            approvedClients = new JArray();\r\n                                        }\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                            \r\n                            // Add the current client if not already in the list\r\n                            bool clientExists = false;\r\n                            foreach (var item in approvedClients) {\r\n                                if (item.ToString() == clientKey) {\r\n                                    clientExists = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            \r\n                            if (!clientExists) {\r\n                                approvedClients.Add(clientKey);\r\n                            }\r\n                            \r\n                            // Base64 encode the client list\r\n                            string jsonClients = approvedClients.ToString(Newtonsoft.Json.Formatting.None);\r\n                            string encodedClients = System.Convert.ToBase64String(\r\n                                System.Text.Encoding.UTF8.GetBytes(jsonClients));\r\n                            \r\n                            // Return the full cookie string with appropriate settings\r\n                            return $\"{cookieName}={encodedClients}; Max-Age=31536000; Path=/; Secure; HttpOnly; SameSite=Lax\";\r\n                        }\" />\r\n                        \r\n                        <!-- Set variables for outbound policy awareness -->\r\n                        <set-variable name=\"consent_approved\" value=\"true\" />\r\n                        <set-variable name=\"cookie_name\" value=\"MCP_APPROVED_CLIENTS\" />\r\n                        \r\n                        <!-- Return the response with the cookie already set -->\r\n                        <return-response>\r\n                            <set-status code=\"302\" reason=\"Found\" />\r\n                            <set-header name=\"Location\" exists-action=\"override\">\r\n                                <value>@(context.Variables.GetValueOrDefault<string>(\"response_redirect_location\", \"\"))</value>\r\n                            </set-header>\r\n                            <set-header name=\"Set-Cookie\" exists-action=\"append\">\r\n                                <value>@(context.Variables.GetValueOrDefault<string>(\"approval_cookie\"))</value>\r\n                            </set-header>\r\n                        </return-response>\r\n                    </when>\r\n                    <when condition=\"@(context.Variables.GetValueOrDefault<string>(\"consent_action\") == \"deny\")\">\r\n                        <!-- Process consent denial -->\r\n                        <set-variable name=\"response_status_code\" value=\"403\" />\r\n                        <set-variable name=\"response_content_type\" value=\"text/html\" />\r\n                        <set-variable name=\"response_cache_control\" value=\"no-store, no-cache\" />\r\n                        <set-variable name=\"response_pragma\" value=\"no-cache\" />\r\n                        \r\n                        <!-- Calculate the cookie value right here in inbound before returning response -->\r\n                        <set-variable name=\"denial_cookie\" value=\"@{\r\n                            string cookieName = \"MCP_DENIED_CLIENTS\";\r\n                            \r\n                            // Use already extracted parameters instead of re-parsing form data\r\n                            string clientId = context.Variables.GetValueOrDefault<string>(\"client_id\", \"\");\r\n                            string redirectUri = context.Variables.GetValueOrDefault<string>(\"normalized_redirect_uri\", \"\");\r\n                            \r\n                            // Create a unique identifier for this client/redirect combination\r\n                            string clientKey = $\"{clientId}:{redirectUri}\";\r\n                            \r\n                            // Check for existing cookie\r\n                            var cookieHeader = context.Request.Headers.GetValueOrDefault(\"Cookie\", \"\");\r\n                            JArray deniedClients = new JArray();\r\n                            \r\n                            if (!string.IsNullOrEmpty(cookieHeader)) {\r\n                                // Parse cookies to find our denial cookie\r\n                                string[] cookies = cookieHeader.Split(';');\r\n                                foreach (string cookie in cookies) {\r\n                                    string trimmedCookie = cookie.Trim();\r\n                                    if (trimmedCookie.StartsWith(cookieName + \"=\")) {\r\n                                        try {\r\n                                            // Extract and parse the cookie value\r\n                                            string cookieValue = trimmedCookie.Substring(cookieName.Length + 1);\r\n                                            // Get the payload part (before the first dot if cookie is signed)\r\n                                            string payload = cookieValue.Contains('.') ? \r\n                                                cookieValue.Split('.')[0] : cookieValue;\r\n                                            string decodedValue = System.Text.Encoding.UTF8.GetString(\r\n                                                System.Convert.FromBase64String(payload));\r\n                                            deniedClients = JArray.Parse(decodedValue);\r\n                                        } catch (Exception) {\r\n                                            // If parsing fails, we'll just create a new cookie\r\n                                            deniedClients = new JArray();\r\n                                        }\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                            \r\n                            // Add the current client if not already in the list\r\n                            bool clientExists = false;\r\n                            foreach (var item in deniedClients) {\r\n                                if (item.ToString() == clientKey) {\r\n                                    clientExists = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            \r\n                            if (!clientExists) {\r\n                                deniedClients.Add(clientKey);\r\n                            }\r\n                            \r\n                            // Base64 encode the client list\r\n                            string jsonClients = deniedClients.ToString(Newtonsoft.Json.Formatting.None);\r\n                            string encodedClients = System.Convert.ToBase64String(\r\n                                System.Text.Encoding.UTF8.GetBytes(jsonClients));\r\n                            \r\n                            // Return the full cookie string with appropriate settings\r\n                            return $\"{cookieName}={encodedClients}; Max-Age=31536000; Path=/; Secure; HttpOnly; SameSite=Lax\";\r\n                        }\" />                        <!-- Store the HTML content for the access denied page -->\r\n                        <set-variable name=\"response_body\" value=\"@{\r\n                            string denialTemplate = context.Variables.GetValueOrDefault<string>(\"access_denied_template\");\r\n                            string commonStyles = context.Variables.GetValueOrDefault<string>(\"common_styles\");\r\n                            \r\n                            // Replace placeholders with actual content\r\n                            denialTemplate = denialTemplate.Replace(\"__COMMON_STYLES__\", commonStyles);\r\n                            denialTemplate = denialTemplate.Replace(\"__DENIAL_MESSAGE__\", \r\n                                \"You have denied authorization for this application against the MCP server.\");\r\n                            \r\n                            return denialTemplate;\r\n                        }\" />\r\n                        \r\n                        <!-- Set variables for outbound policy awareness -->\r\n                        <set-variable name=\"consent_denied\" value=\"true\" />\r\n                        <set-variable name=\"cookie_name\" value=\"MCP_DENIED_CLIENTS\" />\r\n                        \r\n                        <!-- Return the response with the cookie already set -->\r\n                        <return-response>\r\n                            <set-status code=\"403\" reason=\"Forbidden\" />\r\n                            <set-header name=\"Content-Type\" exists-action=\"override\">\r\n                                <value>text/html</value>\r\n                            </set-header>\r\n                            <set-header name=\"Cache-Control\" exists-action=\"override\">\r\n                                <value>no-store, no-cache</value>\r\n                            </set-header>\r\n                            <set-header name=\"Pragma\" exists-action=\"override\">\r\n                                <value>no-cache</value>\r\n                            </set-header>\r\n                            <set-header name=\"Set-Cookie\" exists-action=\"append\">\r\n                                <value>@(context.Variables.GetValueOrDefault<string>(\"denial_cookie\"))</value>\r\n                            </set-header>\r\n                            <set-body>@(context.Variables.GetValueOrDefault<string>(\"response_body\", \"\"))</set-body>\r\n                        </return-response>\r\n                    </when>\r\n                    <otherwise>\r\n                        <!-- Invalid consent action - return error -->\r\n                        <return-response>\r\n                            <set-status code=\"403\" reason=\"Forbidden\" />\r\n                            <set-header name=\"Content-Type\" exists-action=\"override\">\r\n                                <value>text/html</value>\r\n                            </set-header>\r\n                            <!-- Explicitly disable any redirects -->\r\n                            <set-header name=\"Cache-Control\" exists-action=\"override\">\r\n                                <value>no-store, no-cache</value>\r\n                            </set-header>\r\n                            <set-header name=\"Pragma\" exists-action=\"override\">\r\n                                <value>no-cache</value>\r\n                            </set-header>\r\n                            <set-body>@{\r\n                                string denialTemplate = context.Variables.GetValueOrDefault<string>(\"access_denied_template\");\r\n                                string commonStyles = context.Variables.GetValueOrDefault<string>(\"common_styles\");\r\n                                string consentAction = context.Variables.GetValueOrDefault<string>(\"consent_action\", \"\");\r\n                                \r\n                                string detailedMessage = $\"Invalid consent action '{consentAction}' received. Expected 'allow' or 'deny'. This may indicate a form tampering attempt or a browser compatibility issue.\";\r\n                                \r\n                                // Replace placeholders with actual content\r\n                                denialTemplate = denialTemplate.Replace(\"__COMMON_STYLES__\", commonStyles);\r\n                                denialTemplate = denialTemplate.Replace(\"__DENIAL_MESSAGE__\", detailedMessage);\r\n                                \r\n                                return denialTemplate;\r\n                            }</set-body>\r\n                        </return-response>\r\n                                            </otherwise>\r\n                                        </choose>\r\n                                    </otherwise>\r\n                                </choose>\r\n                            </otherwise>\r\n                        </choose>\r\n                    </otherwise>\r\n                </choose>\r\n            </when>\r\n            <!-- For GET requests, check for cookies first, then display consent page if no cookie found -->\r\n            <otherwise>\r\n                <choose>\r\n                    <!-- If there's an approval cookie, skip consent and redirect to authorization endpoint -->\r\n                    <when condition=\"@(context.Variables.GetValueOrDefault<bool>(\"has_approval_cookie\"))\">\r\n                        <!-- Set redirect location to authorization endpoint -->\r\n                        <set-variable name=\"response_redirect_location\" value=\"@{\r\n                            string baseUrl = \"{{APIMGatewayURL}}\";\r\n                            string clientId = context.Variables.GetValueOrDefault<string>(\"client_id\", \"\");\r\n                            string redirectUri = context.Variables.GetValueOrDefault<string>(\"normalized_redirect_uri\", \"\");\r\n                            string state = context.Variables.GetValueOrDefault<string>(\"state\", \"\");\r\n                            \r\n                            // URL encode parameters to prevent injection attacks\r\n                            string encodedClientId = System.Net.WebUtility.UrlEncode(clientId);\r\n                            string encodedRedirectUri = System.Net.WebUtility.UrlEncode(redirectUri);\r\n                            // State is already properly encoded, don't double-encode\r\n                            string encodedState = state;\r\n                            \r\n                            // Add PKCE parameters if they exist\r\n                            string codeChallenge = context.Variables.GetValueOrDefault<string>(\"code_challenge\", \"\");\r\n                            string codeChallengeMethod = context.Variables.GetValueOrDefault<string>(\"code_challenge_method\", \"\");\r\n                            \r\n                            string url = $\"{baseUrl}/authorize?client_id={encodedClientId}&redirect_uri={encodedRedirectUri}&state={encodedState}\";\r\n                            \r\n                            if (!string.IsNullOrEmpty(codeChallenge)) {\r\n                                url += $\"&code_challenge={System.Net.WebUtility.UrlEncode(codeChallenge)}\";\r\n                            }\r\n                            \r\n                            if (!string.IsNullOrEmpty(codeChallengeMethod)) {\r\n                                url += $\"&code_challenge_method={System.Net.WebUtility.UrlEncode(codeChallengeMethod)}\";\r\n                            }\r\n                            \r\n                            return url;\r\n                        }\" />\r\n                        \r\n                        <!-- Redirect to authorization endpoint -->\r\n                        <return-response>\r\n                            <set-status code=\"302\" reason=\"Found\" />\r\n                            <set-header name=\"Location\" exists-action=\"override\">\r\n                                <value>@(context.Variables.GetValueOrDefault<string>(\"response_redirect_location\", \"\"))</value>\r\n                            </set-header>\r\n                        </return-response>\r\n                    </when>\r\n                    \r\n                    <!-- If there's a denial cookie, return access denied page immediately -->\r\n                    <when condition=\"@(context.Variables.GetValueOrDefault<bool>(\"has_denial_cookie\"))\">\r\n                        <return-response>\r\n                            <set-status code=\"403\" reason=\"Forbidden\" />\r\n                            <set-header name=\"Content-Type\" exists-action=\"override\">\r\n                                <value>text/html</value>\r\n                            </set-header>\r\n                            <!-- Explicitly disable any redirects -->\r\n                            <set-header name=\"Cache-Control\" exists-action=\"override\">\r\n                                <value>no-store, no-cache</value>\r\n                            </set-header>\r\n                            <set-header name=\"Pragma\" exists-action=\"override\">\r\n                                <value>no-cache</value>\r\n                            </set-header>\r\n                            <set-body>@{\r\n                                string denialTemplate = context.Variables.GetValueOrDefault<string>(\"access_denied_template\");\r\n                                string commonStyles = context.Variables.GetValueOrDefault<string>(\"common_styles\");\r\n                                \r\n                                // Replace placeholders with actual content\r\n                                denialTemplate = denialTemplate.Replace(\"__COMMON_STYLES__\", commonStyles);\r\n                                denialTemplate = denialTemplate.Replace(\"__DENIAL_MESSAGE__\", \r\n                                    \"You have previously denied access to this application.\");\r\n                                \r\n                                return denialTemplate;\r\n                            }</set-body>\r\n                        </return-response>\r\n                    </when>\r\n                      <!-- If no cookies found, show the consent screen -->\r\n                    <otherwise>\r\n                        <!-- Check if client is registered first -->\r\n                        <choose>\r\n                            <when condition=\"@(!context.Variables.GetValueOrDefault<bool>(\"is_client_registered\"))\">\r\n                                <!-- Client is not registered, show error page -->\r\n                                <return-response>\r\n                                    <set-status code=\"403\" reason=\"Forbidden\" />\r\n                                    <set-header name=\"Content-Type\" exists-action=\"override\">\r\n                                        <value>text/html</value>\r\n                                    </set-header>\r\n                                    <set-header name=\"Cache-Control\" exists-action=\"override\">\r\n                                        <value>no-store, no-cache</value>\r\n                                    </set-header>\r\n                                    <set-header name=\"Pragma\" exists-action=\"override\">\r\n                                        <value>no-cache</value>\r\n                                    </set-header>\r\n                                    <set-body>@{\r\n                                        string template = context.Variables.GetValueOrDefault<string>(\"client_not_found_template\");\r\n                                        string commonStyles = context.Variables.GetValueOrDefault<string>(\"common_styles\");\r\n                                        string clientId = context.Variables.GetValueOrDefault<string>(\"client_id\", \"\");\r\n                                        string redirectUri = context.Variables.GetValueOrDefault<string>(\"normalized_redirect_uri\", \"\");\r\n                                        \r\n                                        // Replace placeholders with HTML-encoded content to prevent XSS\r\n                                        template = template.Replace(\"__COMMON_STYLES__\", commonStyles);\r\n                                        template = template.Replace(\"__CLIENT_ID_DISPLAY__\", System.Net.WebUtility.HtmlEncode(clientId));\r\n                                        template = template.Replace(\"__REDIRECT_URI__\", System.Net.WebUtility.HtmlEncode(redirectUri));\r\n                                        \r\n                                        return template;\r\n                                    }</set-body>\r\n                                </return-response>\r\n                            </when>\r\n                            <otherwise>                                <!-- Client is registered, get client name from the cache -->\r\n                                <!-- Build consent page using the standardized template -->\r\n                                <set-variable name=\"consent_page\" value=\"@{\r\n                                    string template = context.Variables.GetValueOrDefault<string>(\"consent_page_template\");\r\n                                    string commonStyles = context.Variables.GetValueOrDefault<string>(\"common_styles\");\r\n                                    \r\n                                    // Use the service URL from APIM configuration\r\n                                    string basePath = \"{{APIMGatewayURL}}\";\r\n                                    \r\n                                    string clientId = context.Variables.GetValueOrDefault<string>(\"client_id\", \"\");\r\n                                    string clientName = context.Variables.GetValueOrDefault<string>(\"client_name\", \"Unknown Application\");\r\n                                    string clientUri = context.Variables.GetValueOrDefault<string>(\"client_uri\", \"N/A\");\r\n                                    string oauthScopes = context.Variables.GetValueOrDefault<string>(\"oauth_scopes\", \"\");\r\n                                    \r\n                                    // Get the normalized (human-readable) redirect URI for display\r\n                                    string normalizedRedirectUri = context.Variables.GetValueOrDefault<string>(\"normalized_redirect_uri\", \"\");\r\n                                    \r\n                                    // Use the normalized redirect URI for form submission to ensure consistency\r\n                                    string formRedirectUri = context.Variables.GetValueOrDefault<string>(\"normalized_redirect_uri\", \"\");\r\n                                    string htmlEncodedFormUri = System.Net.WebUtility.HtmlEncode(formRedirectUri);\r\n                                    \r\n                                    string state = context.Variables.GetValueOrDefault<string>(\"state\", \"\");\r\n                                    string csrfToken = context.Variables.GetValueOrDefault<string>(\"csrf_token\", \"\");\r\n                                    \r\n                                    // Create a temporary placeholder for the form fields\r\n                                    string FORM_FIELD_PLACEHOLDER = \"___ENCODED_REDIRECT_URI___\";\r\n                                    \r\n                                    // Replace the styles first\r\n                                    template = template.Replace(\"__COMMON_STYLES__\", commonStyles);\r\n                                    \r\n                                    // First, create a temporary placeholder for the form fields\r\n                                    template = template.Replace(\"value='__REDIRECT_URI__'\", \"value='\" + FORM_FIELD_PLACEHOLDER + \"'\");\r\n                                      \r\n                                    // Replace template placeholders with properly encoded values\r\n                                    template = template.Replace(\"__CLIENT_NAME__\", System.Net.WebUtility.HtmlEncode(clientName));\r\n                                    template = template.Replace(\"__CLIENT_URI__\", System.Net.WebUtility.HtmlEncode(clientUri));\r\n                                    // For display purposes, use HtmlEncode for safety\r\n                                    template = template.Replace(\"__CLIENT_ID_DISPLAY__\", System.Net.WebUtility.HtmlEncode(clientId));\r\n                                    template = template.Replace(\"__REDIRECT_URI__\", System.Net.WebUtility.HtmlEncode(normalizedRedirectUri));\r\n                                    // For form field values, use HtmlEncode for XSS protection\r\n                                    template = template.Replace(\"__CLIENT_ID_FORM__\", System.Net.WebUtility.HtmlEncode(clientId));\r\n                                    // State needs to be URL-decoded first since it comes URL-encoded from query, then HTML-encoded for form safety\r\n                                    string decodedState = System.Net.WebUtility.UrlDecode(state);\r\n                                    template = template.Replace(\"__STATE__\", System.Net.WebUtility.HtmlEncode(decodedState));\r\n                                    template = template.Replace(\"__CODE_CHALLENGE__\", System.Net.WebUtility.HtmlEncode(context.Variables.GetValueOrDefault<string>(\"code_challenge\", \"\")));\r\n                                    template = template.Replace(\"__CODE_CHALLENGE_METHOD__\", System.Net.WebUtility.HtmlEncode(context.Variables.GetValueOrDefault<string>(\"code_challenge_method\", \"\")));\r\n                                    template = template.Replace(\"__CSRF_TOKEN__\", System.Net.WebUtility.HtmlEncode(csrfToken));\r\n                                    template = template.Replace(\"__CONSENT_ACTION_URL__\", basePath + \"/consent\");                                    \r\n                                    // Handle space-separated OAuth scopes and create individual list items with HTML encoding\r\n                                    string[] scopeArray = oauthScopes.Split(new char[] {' '}, StringSplitOptions.RemoveEmptyEntries);\r\n                                    StringBuilder scopeList = new StringBuilder();\r\n                                    \r\n                                    foreach (string scope in scopeArray) {\r\n                                        scopeList.AppendLine($\"<li><code>{System.Net.WebUtility.HtmlEncode(scope)}</code></li>\");\r\n                                    }\r\n                                    \r\n                                    template = template.Replace(\"__OAUTH_SCOPES__\", scopeList.ToString());\r\n                                    \r\n                                // Replace form field placeholder with encoded URI\r\n                                template = template.Replace(FORM_FIELD_PLACEHOLDER, htmlEncodedFormUri);                                    return template;\r\n                                }\" />\r\n                                \r\n                                <!-- Return consent page -->\r\n                                <return-response>\r\n                                    <set-status code=\"200\" reason=\"OK\" />\r\n                                    <set-header name=\"Content-Type\" exists-action=\"override\">\r\n                                        <value>text/html</value>\r\n                                    </set-header>\r\n                                    <!-- Security headers -->\r\n                                    <set-header name=\"X-Frame-Options\" exists-action=\"override\">\r\n                                        <value>DENY</value>\r\n                                    </set-header>\r\n                                    <set-header name=\"X-Content-Type-Options\" exists-action=\"override\">\r\n                                        <value>nosniff</value>\r\n                                    </set-header>\r\n                                    <set-header name=\"X-XSS-Protection\" exists-action=\"override\">\r\n                                        <value>1; mode=block</value>\r\n                                    </set-header>\r\n                                    <set-header name=\"Referrer-Policy\" exists-action=\"override\">\r\n                                        <value>strict-origin-when-cross-origin</value>\r\n                                    </set-header>\r\n                                    <set-header name=\"Content-Security-Policy\" exists-action=\"override\">\r\n                                        <value>default-src 'self'; style-src 'unsafe-inline'; script-src 'none'; object-src 'none'; base-uri 'self'; form-action 'self' https:</value>\r\n                                    </set-header>\r\n                                    <set-header name=\"Cache-Control\" exists-action=\"override\">\r\n                                        <value>no-store, no-cache, must-revalidate</value>\r\n                                    </set-header>\r\n                                    <set-header name=\"Pragma\" exists-action=\"override\">\r\n                                        <value>no-cache</value>\r\n                                    </set-header>\r\n                                    <set-body>@{\r\n                                        return context.Variables.GetValueOrDefault<string>(\"consent_page\", \"\");\r\n                                    }</set-body>\r\n                                </return-response>\r\n                            </otherwise>\r\n                        </choose>\r\n                    </otherwise>\r\n                </choose>\r\n            </otherwise>\r\n        </choose>\r\n    </inbound>\r\n    <backend>\r\n        <base />\r\n    </backend>\r\n    <outbound>\r\n        <base />\r\n        <!-- Debug trace for variable verification -->\r\n        <trace source=\"outbound-debug\" severity=\"information\">\r\n            <message>@{\r\n                return $\"Outbound policy: consent_approved={context.Variables.GetValueOrDefault<bool>(\"consent_approved\")}, consent_denied={context.Variables.GetValueOrDefault<bool>(\"consent_denied\")}, cookie_name={context.Variables.GetValueOrDefault<string>(\"cookie_name\")}\";\r\n            }</message>\r\n        </trace>\r\n        \r\n        <!-- Set cookies based on consent decision -->\r\n        <choose>\r\n            <!-- Handle approval cookie -->\r\n            <when condition=\"@(context.Variables.GetValueOrDefault<bool>(\"consent_approved\"))\">\r\n                <set-header name=\"Set-Cookie\" exists-action=\"append\">\r\n                    <value>@{\r\n                        string cookieName = context.Variables.GetValueOrDefault<string>(\"cookie_name\", \"MCP_APPROVED_CLIENTS\");\r\n                        string clientId = context.Variables.GetValueOrDefault<string>(\"client_id\", \"\");\r\n                        // Use normalized redirect URI for cookies\r\n                        string redirectUri = context.Variables.GetValueOrDefault<string>(\"normalized_redirect_uri\", \"\");\r\n                        \r\n                        // Create unique client/redirect identifier\r\n                        string clientKey = $\"{clientId}:{redirectUri}\";\r\n                        \r\n                        // Check for existing cookie\r\n                        var cookieHeader = context.Request.Headers.GetValueOrDefault(\"Cookie\", \"\");\r\n                        JArray approvedClients = new JArray();\r\n                        \r\n                        if (!string.IsNullOrEmpty(cookieHeader)) {\r\n                            // Parse cookies to find approval cookie\r\n                            string[] cookies = cookieHeader.Split(';');\r\n                            foreach (string cookie in cookies) {\r\n                                string trimmedCookie = cookie.Trim();\r\n                                if (trimmedCookie.StartsWith(cookieName + \"=\")) {\r\n                                    try {\r\n                                        // Extract and parse cookie value\r\n                                        string cookieValue = trimmedCookie.Substring(cookieName.Length + 1);\r\n                                        // Get payload part (before first dot if signed)\r\n                                        string payload = cookieValue.Contains('.') ? \r\n                                            cookieValue.Split('.')[0] : cookieValue;\r\n                                        string decodedValue = System.Text.Encoding.UTF8.GetString(\r\n                                            System.Convert.FromBase64String(payload));\r\n                                        approvedClients = JArray.Parse(decodedValue);\r\n                                    } catch (Exception) {\r\n                                        // If parsing fails, create new cookie\r\n                                        approvedClients = new JArray();\r\n                                    }\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        \r\n                        // Add the current client if not already in the list\r\n                        bool clientExists = false;\r\n                        foreach (var item in approvedClients) {\r\n                            if (item.ToString() == clientKey) {\r\n                                clientExists = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        \r\n                        if (!clientExists) {\r\n                            approvedClients.Add(clientKey);\r\n                        }\r\n                        \r\n                        // Base64 encode the client list\r\n                        string jsonClients = approvedClients.ToString(Newtonsoft.Json.Formatting.None);\r\n                        string encodedClients = System.Convert.ToBase64String(\r\n                            System.Text.Encoding.UTF8.GetBytes(jsonClients));\r\n                        \r\n                        // Return the cookie with appropriate settings\r\n                        return $\"{cookieName}={encodedClients}; Max-Age=31536000; Path=/; Secure; HttpOnly; SameSite=Lax\";\r\n                    }</value>\r\n                </set-header>\r\n                \r\n                <!-- Set response status and redirect for approval -->\r\n                <set-status code=\"@(context.Variables.GetValueOrDefault<int>(\"response_status_code\", 302))\" reason=\"Found\" />\r\n                <set-header name=\"Location\" exists-action=\"override\">\r\n                    <value>@(context.Variables.GetValueOrDefault<string>(\"response_redirect_location\", \"\"))</value>\r\n                </set-header>\r\n            </when>\r\n            \r\n            <!-- Handle denial cookie -->\r\n            <when condition=\"@(context.Variables.GetValueOrDefault<bool>(\"consent_denied\"))\">\r\n                <set-header name=\"Set-Cookie\" exists-action=\"append\">\r\n                    <value>@{\r\n                        string cookieName = context.Variables.GetValueOrDefault<string>(\"cookie_name\", \"MCP_DENIED_CLIENTS\");\r\n                        string clientId = context.Variables.GetValueOrDefault<string>(\"client_id\", \"\");\r\n                        // Use normalized redirect URI for cookies\r\n                        string redirectUri = context.Variables.GetValueOrDefault<string>(\"normalized_redirect_uri\", \"\");\r\n                        \r\n                        // Create unique client/redirect identifier\r\n                        string clientKey = $\"{clientId}:{redirectUri}\";\r\n                        \r\n                        // Check for existing cookie\r\n                        var cookieHeader = context.Request.Headers.GetValueOrDefault(\"Cookie\", \"\");\r\n                        JArray deniedClients = new JArray();\r\n                        \r\n                        if (!string.IsNullOrEmpty(cookieHeader)) {\r\n                            // Parse cookies to find denial cookie\r\n                            string[] cookies = cookieHeader.Split(';');\r\n                            foreach (string cookie in cookies) {\r\n                                string trimmedCookie = cookie.Trim();\r\n                                if (trimmedCookie.StartsWith(cookieName + \"=\")) {\r\n                                    try {\r\n                                        // Extract and parse cookie value\r\n                                        string cookieValue = trimmedCookie.Substring(cookieName.Length + 1);\r\n                                        // Get payload part (before first dot if signed)\r\n                                        string payload = cookieValue.Contains('.') ? \r\n                                            cookieValue.Split('.')[0] : cookieValue;\r\n                                        string decodedValue = System.Text.Encoding.UTF8.GetString(\r\n                                            System.Convert.FromBase64String(payload));\r\n                                        deniedClients = JArray.Parse(decodedValue);\r\n                                    } catch (Exception) {\r\n                                        // If parsing fails, create new cookie\r\n                                        deniedClients = new JArray();\r\n                                    }\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        \r\n                        // Add client if not already in list\r\n                        bool clientExists = false;\r\n                        foreach (var item in deniedClients) {\r\n                            if (item.ToString() == clientKey) {\r\n                                clientExists = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        \r\n                        if (!clientExists) {\r\n                            deniedClients.Add(clientKey);\r\n                        }\r\n                        \r\n                        // Base64 encode client list\r\n                        string jsonClients = deniedClients.ToString(Newtonsoft.Json.Formatting.None);\r\n                        string encodedClients = System.Convert.ToBase64String(\r\n                            System.Text.Encoding.UTF8.GetBytes(jsonClients));\r\n                        \r\n                        // Return cookie with security settings\r\n                        return $\"{cookieName}={encodedClients}; Max-Age=31536000; Path=/; Secure; HttpOnly; SameSite=Lax\";\r\n                    }</value>\r\n                </set-header>\r\n            </when>\r\n        </choose>\r\n    </outbound>\r\n    <on-error>\r\n        <base />\r\n    </on-error>\r\n</policies>\r\n",
            "$fxv#8": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<!--\r\n    Consent Policy - Handles user consent for OAuth client applications\r\n    \r\n    Flow:\r\n    1. Check existing consent status (cookies)\r\n    2. Display consent form for new clients\r\n    3. Process user response (allow/deny)\r\n    4. Store decision and redirect appropriately\r\n-->\r\n<policies>\r\n    <inbound>        \r\n        <base />        \r\n        <!-- Helper function to extract parameters from form/query -->\r\n        <set-variable name=\"form_body\" value=\"@{\r\n            if (context.Request.Method == \"POST\") {\r\n                string contentType = context.Request.Headers.GetValueOrDefault(\"Content-Type\", \"\");\r\n                if (contentType.Contains(\"application/x-www-form-urlencoded\")) {\r\n                    return context.Request.Body.As<string>(preserveContent: true);\r\n                }\r\n            }\r\n            return \"\";\r\n        }\" />\r\n        \r\n        <!-- Extract request parameters using consolidated logic -->\r\n        <set-variable name=\"client_id\" value=\"@{\r\n            string formBody = context.Variables.GetValueOrDefault<string>(\"form_body\", \"\");\r\n            \r\n            // Check form data first (POST)\r\n            if (!string.IsNullOrEmpty(formBody)) {\r\n                string[] pairs = formBody.Split('&');\r\n                foreach (string pair in pairs) {\r\n                    string[] keyValue = pair.Split(new char[] {'='}, 2);\r\n                    if (keyValue.Length == 2 && keyValue[0] == \"client_id\") {\r\n                        return System.Net.WebUtility.UrlDecode(keyValue[1]);\r\n                    }\r\n                }\r\n            }\r\n            // Fallback to query string (GET)\r\n            return (string)context.Request.Url.Query.GetValueOrDefault(\"client_id\", \"\");\r\n        }\" />\r\n        \r\n        <set-variable name=\"redirect_uri\" value=\"@{\r\n            string formBody = context.Variables.GetValueOrDefault<string>(\"form_body\", \"\");\r\n            \r\n            // Check form data first (POST)\r\n            if (!string.IsNullOrEmpty(formBody)) {\r\n                string[] pairs = formBody.Split('&');\r\n                foreach (string pair in pairs) {\r\n                    string[] keyValue = pair.Split(new char[] {'='}, 2);\r\n                    if (keyValue.Length == 2 && keyValue[0] == \"redirect_uri\") {\r\n                        return keyValue[1]; // Keep encoded for normalization\r\n                    }\r\n                }\r\n            }\r\n            // Fallback to query string (GET)\r\n            return (string)context.Request.Url.Query.GetValueOrDefault(\"redirect_uri\", \"\");\r\n        }\" />\r\n        \r\n        <set-variable name=\"state\" value=\"@{\r\n            string formBody = context.Variables.GetValueOrDefault<string>(\"form_body\", \"\");\r\n            \r\n            // Check form data first (POST)\r\n            if (!string.IsNullOrEmpty(formBody)) {\r\n                string[] pairs = formBody.Split('&');\r\n                foreach (string pair in pairs) {\r\n                    string[] keyValue = pair.Split(new char[] {'='}, 2);\r\n                    if (keyValue.Length == 2 && keyValue[0] == \"state\") {\r\n                        return keyValue[1]; // Keep encoded\r\n                    }\r\n                }\r\n            }\r\n            // Fallback to query string (GET)\r\n            return (string)context.Request.Url.Query.GetValueOrDefault(\"state\", \"\") ?? \"\";\r\n        }\" />\r\n        \r\n        <set-variable name=\"code_challenge\" value=\"@{\r\n            string formBody = context.Variables.GetValueOrDefault<string>(\"form_body\", \"\");\r\n            \r\n            // Check form data first (POST)\r\n            if (!string.IsNullOrEmpty(formBody)) {\r\n                string[] pairs = formBody.Split('&');\r\n                foreach (string pair in pairs) {\r\n                    string[] keyValue = pair.Split(new char[] {'='}, 2);\r\n                    if (keyValue.Length == 2 && keyValue[0] == \"code_challenge\") {\r\n                        return keyValue[1]; // Keep encoded\r\n                    }\r\n                }\r\n            }\r\n            // Fallback to query string (GET)\r\n            return (string)context.Request.Url.Query.GetValueOrDefault(\"code_challenge\", \"\");\r\n        }\" />\r\n        \r\n        <set-variable name=\"code_challenge_method\" value=\"@{\r\n            string formBody = context.Variables.GetValueOrDefault<string>(\"form_body\", \"\");\r\n            \r\n            // Check form data first (POST)\r\n            if (!string.IsNullOrEmpty(formBody)) {\r\n                string[] pairs = formBody.Split('&');\r\n                foreach (string pair in pairs) {\r\n                    string[] keyValue = pair.Split(new char[] {'='}, 2);\r\n                    if (keyValue.Length == 2 && keyValue[0] == \"code_challenge_method\") {\r\n                        return keyValue[1]; // Keep encoded\r\n                    }\r\n                }\r\n            }\r\n            // Fallback to query string (GET)\r\n            return (string)context.Request.Url.Query.GetValueOrDefault(\"code_challenge_method\", \"\");\r\n        }\" />\r\n      \r\n         <set-variable name=\"access_denied_template\" value=\"@{\r\n            return @\"<!DOCTYPE html>\r\n<html lang='en'>\r\n<head>    <meta charset='UTF-8'>\r\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\r\n    <title>Access Denied</title>\r\n    <style>\r\n__COMMON_STYLES__\r\n        .error-details {\r\n            background-color: #f8f9fa;\r\n            border: 1px solid #dee2e6;\r\n            border-radius: 8px;\r\n            padding: 20px;\r\n            margin: 20px 0;\r\n            font-family: 'Courier New', Consolas, monospace;\r\n            font-size: 14px;\r\n            line-height: 1.6;\r\n            white-space: pre-wrap;\r\n            overflow-x: auto;\r\n        }\r\n        \r\n        .error-title {\r\n            color: #dc3545;\r\n            font-weight: bold;\r\n            margin-bottom: 10px;\r\n        }\r\n        \r\n        .debug-section {\r\n            margin-top: 15px;\r\n            padding-top: 15px;\r\n            border-top: 1px solid #dee2e6;\r\n        }\r\n        \r\n        .debug-label {\r\n            font-weight: bold;\r\n            color: #495057;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class='consent-container'>\r\n        <h1 class='denial-heading'>Access Denied</h1>\r\n        <div class='error-details'>\r\n            <div class='error-title'>Error Details:</div>\r\n            __DENIAL_MESSAGE__\r\n        </div>\r\n        <p>The application will not be able to access your data.</p>\r\n        <p>You can close this window safely.</p>\r\n    </div>\r\n</body>\r\n</html>\";\r\n        }\" />\r\n        \r\n        <!-- Reusable function to generate 403 error response -->\r\n        <set-variable name=\"generate_403_response\" value=\"@{\r\n            string errorTemplate = context.Variables.GetValueOrDefault<string>(\"access_denied_template\");\r\n            string commonStyles = context.Variables.GetValueOrDefault<string>(\"common_styles\");\r\n            string message = \"Access denied.\";\r\n            \r\n            // Replace placeholders with actual content\r\n            errorTemplate = errorTemplate.Replace(\"__COMMON_STYLES__\", commonStyles);\r\n            errorTemplate = errorTemplate.Replace(\"__DENIAL_MESSAGE__\", message);\r\n            \r\n            return errorTemplate;\r\n        }\" />\r\n            <!-- Error page template -->\r\n        <set-variable name=\"client_not_found_template\" value=\"@{\r\n            return @\"<!DOCTYPE html>\r\n<html lang='en'>\r\n<head>    \r\n    <meta charset='UTF-8'>\r\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\r\n    <title>Client Not Found</title>\r\n    <style>\r\n__COMMON_STYLES__\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class='consent-container'>        \r\n        <h1 class='denial-heading'>Client Not Found</h1>\r\n        <p>The client registration for the specified client was not found.</p>\r\n        <div class='client-info'>\r\n            <p><strong>Client ID:</strong> <code>__CLIENT_ID_DISPLAY__</code></p>\r\n            <p><strong>Redirect URI:</strong> <code>__REDIRECT_URI__</code></p>\r\n        </div>\r\n        <p>Please ensure that you are using a properly registered client application.</p>\r\n        <p>You can close this window safely.</p>\r\n    </div>\r\n</body>\r\n</html>\";\r\n        }\" />\r\n        <!-- Normalize redirect URI by handling potential double-encoding -->\r\n        <set-variable name=\"normalized_redirect_uri\" value=\"@{\r\n            string redirectUri = context.Variables.GetValueOrDefault<string>(\"redirect_uri\", \"\");\r\n            \r\n            if (string.IsNullOrEmpty(redirectUri)) {\r\n                return \"\";\r\n            }\r\n            \r\n            try {\r\n                string firstDecode = System.Net.WebUtility.UrlDecode(redirectUri);\r\n                \r\n                // Check if still encoded (contains % followed by hex digits)\r\n                if (firstDecode.Contains(\"%\") && System.Text.RegularExpressions.Regex.IsMatch(firstDecode, @\"%[0-9A-Fa-f]{2}\")) {\r\n                    // Double-encoded, decode again\r\n                    string secondDecode = System.Net.WebUtility.UrlDecode(firstDecode);\r\n                    return secondDecode;\r\n                } else {\r\n                    // Single encoding, first decode is sufficient\r\n                    return firstDecode;\r\n                }\r\n            } catch (Exception) {\r\n                // If decoding fails, return original value\r\n                return redirectUri;\r\n            }\r\n        }\" />\r\n        \r\n        <!-- Cache client information lookup -->\r\n        <cache-lookup-value key=\"@($\"ClientInfo-{context.Variables.GetValueOrDefault<string>(\"client_id\")}\")\" variable-name=\"clientInfoJson\" />\r\n        \r\n        <!-- Get OAuth scopes from configuration -->\r\n        <set-variable name=\"oauth_scopes\" value=\"{{OAuthScopes}}\" />\r\n        \r\n        <!-- Generate CSRF token for form protection (GET requests only) -->\r\n        <set-variable name=\"csrf_token\" value=\"@{\r\n            // Only generate tokens for GET requests (showing consent form)\r\n            // POST requests validate existing tokens, not generate new ones\r\n            if (context.Request.Method != \"GET\") {\r\n                return \"\";\r\n            }\r\n            \r\n            // Generate random CSRF token using Guid and timestamp\r\n            string guidPart = Guid.NewGuid().ToString(\"N\");\r\n            string timestampPart = DateTime.UtcNow.Ticks.ToString();\r\n            string combinedString = guidPart + timestampPart;\r\n            \r\n            // Create URL-safe token by encoding combined string\r\n            string token = System.Convert.ToBase64String(\r\n                System.Text.Encoding.UTF8.GetBytes(combinedString)\r\n            ).Replace(\"+\", \"-\").Replace(\"/\", \"_\").Replace(\"=\", \"\").Substring(0, 32);\r\n            \r\n            return token;\r\n        }\" />\r\n        \r\n        <!-- Cache CSRF token for validation (GET requests only) -->\r\n        <choose>\r\n            <when condition=\"@(context.Request.Method == \"GET\" && !string.IsNullOrEmpty(context.Variables.GetValueOrDefault<string>(\"csrf_token\")))\">\r\n                <cache-store-value key=\"@($\"CSRF-{context.Variables.GetValueOrDefault<string>(\"csrf_token\")}\")\" \r\n                                  value=\"@{\r\n                                      string clientId = context.Variables.GetValueOrDefault<string>(\"client_id\", \"\");\r\n                                      string normalizedRedirectUri = context.Variables.GetValueOrDefault<string>(\"normalized_redirect_uri\", \"\");\r\n                                      string timestamp = DateTime.UtcNow.ToString(\"yyyy-MM-ddTHH:mm:ssZ\");\r\n                                      string tokenData = $\"{clientId}:{normalizedRedirectUri}:{timestamp}\";\r\n                                      \r\n                                      // Add debugging metadata\r\n                                      string debugInfo = $\"CACHED_AT:{DateTime.UtcNow:yyyy-MM-ddTHH:mm:ss.fffZ}\";\r\n                                      return $\"{tokenData}|{debugInfo}\";\r\n                                  }\" \r\n                                  duration=\"900\" />\r\n                <!-- Track token caching for debugging -->\r\n                <set-variable name=\"csrf_token_cached\" value=\"true\" />\r\n            </when>\r\n            <otherwise>\r\n                <set-variable name=\"csrf_token_cached\" value=\"false\" />\r\n            </otherwise>\r\n        </choose>\r\n          <!-- Validate client registration -->\r\n        <set-variable name=\"is_client_registered\" value=\"@{\r\n            try {\r\n                string clientId = context.Variables.GetValueOrDefault<string>(\"client_id\", \"\");\r\n                string redirectUri = context.Variables.GetValueOrDefault<string>(\"normalized_redirect_uri\", \"\");\r\n                \r\n                if (string.IsNullOrEmpty(clientId)) {\r\n                    return false;\r\n                }\r\n                \r\n                // Get client info from cache lookup\r\n                string clientInfoJson = context.Variables.GetValueOrDefault<string>(\"clientInfoJson\");\r\n                  if (string.IsNullOrEmpty(clientInfoJson)) {\r\n                    return false;\r\n                }\r\n                \r\n                // Parse client configuration\r\n                JObject clientInfo = JObject.Parse(clientInfoJson);\r\n                JArray redirectUris = clientInfo[\"redirect_uris\"]?.ToObject<JArray>();\r\n                \r\n                // Validate redirect URI is registered\r\n                if (redirectUris != null) {\r\n                    foreach (var uri in redirectUris) {\r\n                        // Normalize registered URI for comparison\r\n                        string registeredUri = System.Net.WebUtility.UrlDecode(uri.ToString());\r\n                        if (registeredUri == redirectUri) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n                \r\n                return false;\r\n            }\r\n            catch (Exception ex) {\r\n                return false;\r\n            }\r\n        }\" />\r\n        \r\n        <!-- Extract client name from cache -->\r\n        <set-variable name=\"client_name\" value=\"@{\r\n            try {\r\n                string clientId = context.Variables.GetValueOrDefault<string>(\"client_id\", \"\");\r\n                \r\n                if (string.IsNullOrEmpty(clientId)) {\r\n                    return \"Unknown Application\";\r\n                }\r\n                \r\n                // Get client info from cache lookup\r\n                string clientInfoJson = context.Variables.GetValueOrDefault<string>(\"clientInfoJson\");\r\n                \r\n                if (string.IsNullOrEmpty(clientInfoJson)) {\r\n                    return clientId;\r\n                }\r\n                \r\n                // Parse client configuration\r\n                JObject clientInfo = JObject.Parse(clientInfoJson);\r\n                string clientName = clientInfo[\"client_name\"]?.ToString();\r\n                \r\n                return string.IsNullOrEmpty(clientName) ? clientId : clientName;\r\n            }\r\n            catch (Exception ex) {\r\n                return context.Variables.GetValueOrDefault<string>(\"client_id\", \"Unknown Application\");\r\n            }\r\n        }\" />\r\n        \r\n        <!-- Extract client URI from cache -->\r\n        <set-variable name=\"client_uri\" value=\"@{\r\n            try {\r\n                // Get client info from cache lookup\r\n                string clientInfoJson = context.Variables.GetValueOrDefault<string>(\"clientInfoJson\");\r\n                \r\n                if (string.IsNullOrEmpty(clientInfoJson)) {\r\n                    return \"N/A\";\r\n                }\r\n                \r\n                // Parse client configuration\r\n                JObject clientInfo = JObject.Parse(clientInfoJson);\r\n                string clientUri = clientInfo[\"client_uri\"]?.ToString();\r\n                \r\n                return string.IsNullOrEmpty(clientUri) ? \"N/A\" : clientUri;\r\n            }\r\n            catch (Exception ex) {\r\n                return \"N/A\";\r\n            }\r\n        }\" />\r\n        \r\n        <!-- Define common styles for consent and error pages -->\r\n        <set-variable name=\"common_styles\" value=\"@{\r\n            return @\"        body {\r\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n            max-width: 100%;\r\n            margin: 0;            padding: 0;\r\n            line-height: 1.6;\r\n            min-height: 100vh;\r\n            background: linear-gradient(135deg, #1f1f1f, #333344, #3f4066); /* Modern dark gradient */\r\n            color: #333333;\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n        }.container, .consent-container {\r\n            background-color: #ffffff;\r\n            border-radius: 4px; /* Adding some subtle rounding */\r\n            padding: 30px;\r\n            max-width: 600px;            width: 90%;\r\n            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);\r\n            border: none;\r\n        }\r\n        \r\n        h1 {\r\n            margin-bottom: 20px;\r\n            border-bottom: 1px solid #EDEBE9;\r\n            padding-bottom: 10px;\r\n            font-weight: 500;\r\n        }\r\n        .consent-heading {\r\n            color: #0078D4; /* Microsoft Blue */\r\n        }\r\n        .denial-heading {\r\n            color: #D83B01; /* Microsoft Attention color */\r\n        }\r\n        \r\n        p {\r\n            margin: 15px 0;\r\n            line-height: 1.7;\r\n            color: #323130; /* Microsoft text color */\r\n        }          .client-info {\r\n            background-color: #F5F5F5; /* Light gray background for info boxes */\r\n            padding: 15px;\r\n            border-radius: 4px; /* Adding some subtle rounding */\r\n            margin: 15px 0;\r\n            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\r\n            border: 1px solid #EDEBE9;\r\n        }\r\n          .client-info p {\r\n            display: flex;\r\n            align-items: flex-start;\r\n            margin: 8px 0;\r\n        }\r\n        \r\n        .client-info strong {\r\n            min-width: 160px;\r\n            flex-shrink: 0;\r\n            text-align: left;\r\n            padding-right: 15px;\r\n            color: #0078D4; /* Microsoft Blue */\r\n        }\r\n          .client-info code {\r\n            font-family: 'Consolas', 'Monaco', 'Courier New', monospace;\r\n            background-color: rgba(240, 240, 250, 0.5);\r\n            padding: 2px 6px;\r\n            border-radius: 4px; /* Adding some subtle rounding */\r\n            color: #0078D4; /* Microsoft Blue */\r\n            word-break: break-all;\r\n        }\r\n          .btn {\r\n            display: inline-block;\r\n            padding: 8px 16px;\r\n            margin: 10px 0;\r\n            border-radius: 4px; /* Adding some subtle rounding */\r\n            text-decoration: none;\r\n            font-weight: 600;\r\n            cursor: pointer;\r\n            transition: all 0.2s ease;\r\n        }\r\n        \r\n        .btn-primary {\r\n            background-color: #0078D4; /* Microsoft Blue */\r\n            color: white;\r\n            border: none;\r\n        }\r\n        .btn-primary:hover {\r\n            background-color: #106EBE; /* Microsoft Blue hover */\r\n            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\r\n        }\r\n        \r\n        .btn-secondary {\r\n            background-color: #D83B01; /* Microsoft Red */\r\n            color: white; /* White text */\r\n            border: none;\r\n        }\r\n        .btn-secondary:hover {\r\n            background-color: #A80000; /* Darker red on hover */\r\n            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\r\n        }\r\n          .buttons {\r\n            margin-top: 20px;\r\n            display: flex;\r\n            gap: 10px;\r\n            justify-content: flex-start;\r\n        }\r\n        \r\n        a {\r\n            color: #0078D4; /* Microsoft Blue */\r\n            text-decoration: none;\r\n            font-weight: 600;\r\n        }\r\n        a:hover {\r\n            text-decoration: underline;\r\n        }\r\n        strong {\r\n            color: #0078D4; /* Microsoft Blue */\r\n            font-weight: 600;\r\n        }          .error-message {\r\n            background-color: #FDE7E9; /* Light red background */\r\n            padding: 15px;\r\n            margin: 15px 0;\r\n            border-radius: 4px; /* Adding some subtle rounding */\r\n            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\r\n            border-left: 3px solid #D83B01; /* Microsoft Attention color */\r\n        }\r\n        \r\n        .error-message p {\r\n            margin: 8px 0;\r\n        }\r\n        \r\n        .error-message p:first-child {\r\n            font-weight: 500;\r\n            color: #D83B01; /* Microsoft Attention color */\r\n        }\";\r\n        }\" />\r\n        \r\n        <!-- Consent page HTML template -->\r\n        <set-variable name=\"consent_page_template\" value=\"@{\r\n            return @\"<!DOCTYPE html>\r\n<html lang='en'>\r\n<head>    <meta charset='UTF-8'>\r\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\r\n    <title>Application Consent</title>\r\n    <style>\r\n__COMMON_STYLES__    /* Additional styles for scopes list */\r\n    .scopes-list {\r\n        margin: 0;\r\n        padding-left: 0;\r\n    }\r\n    .scopes-list li {\r\n        list-style-type: none;\r\n        padding: 4px 0;\r\n        display: flex;\r\n    }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class='consent-container'>\r\n        <h1 class='consent-heading'>Application Access Request</h1>\r\n\r\n        <p>The following application is requesting access to <strong>{{MCPServerName}}</strong>, which might include access to everything <strong>{{MCPServerName}}</strong> has been and will be granted access to.</p>\r\n        \r\n        <div class='client-info'>\r\n            <p><strong>Application Name:</strong> <code>__CLIENT_NAME__</code></p>\r\n            <p><strong>Application Website:</strong> <code>__CLIENT_URI__</code></p>\r\n            <p><strong>Application ID:</strong> <code>__CLIENT_ID_DISPLAY__</code></p>\r\n            <p><strong>Redirect URI:</strong> <code>__REDIRECT_URI__</code></p>\r\n        </div>        \r\n        <p>The application will have access to the following scopes, used by <strong>{{MCPServerName}}</strong>:</p>\r\n        <div class='client-info'>\r\n            <ul class='scopes-list'>\r\n                <li>__OAUTH_SCOPES__</li>\r\n            </ul>\r\n        </div>        <div class='buttons'>\r\n            <form method='post' action='__CONSENT_ACTION_URL__' style='display: inline-block;'>\r\n                <input type='hidden' name='client_id' value='__CLIENT_ID_FORM__'>\r\n                <input type='hidden' name='redirect_uri' value='__REDIRECT_URI__'>\r\n                <input type='hidden' name='state' value='__STATE__'>\r\n                <input type='hidden' name='code_challenge' value='__CODE_CHALLENGE__'>\r\n                <input type='hidden' name='code_challenge_method' value='__CODE_CHALLENGE_METHOD__'>\r\n                <input type='hidden' name='csrf_token' value='__CSRF_TOKEN__'>\r\n                <input type='hidden' name='consent_action' value='allow'>\r\n                <button type='submit' class='btn btn-primary'>Allow</button>\r\n            </form>\r\n            \r\n            <form method='post' action='__CONSENT_ACTION_URL__' style='display: inline-block;'>                <input type='hidden' name='client_id' value='__CLIENT_ID_FORM__'>\r\n                <input type='hidden' name='redirect_uri' value='__REDIRECT_URI__'>\r\n                <input type='hidden' name='state' value='__STATE__'>\r\n                <input type='hidden' name='code_challenge' value='__CODE_CHALLENGE__'>\r\n                <input type='hidden' name='code_challenge_method' value='__CODE_CHALLENGE_METHOD__'>\r\n                <input type='hidden' name='csrf_token' value='__CSRF_TOKEN__'>\r\n                <input type='hidden' name='consent_action' value='deny'>\r\n                <button type='submit' class='btn btn-secondary'>Deny</button>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</body>\r\n</html>\";\r\n        }\" />\r\n\r\n        <!-- Check for existing client denial cookie -->\r\n        <set-variable name=\"has_denial_cookie\" value=\"@{\r\n            try {\r\n                if (string.IsNullOrEmpty(context.Variables.GetValueOrDefault<string>(\"client_id\", \"\")) || \r\n                    string.IsNullOrEmpty(context.Variables.GetValueOrDefault<string>(\"redirect_uri\", \"\"))) {\r\n                    return false;\r\n                }\r\n                  \r\n                string clientId = context.Variables.GetValueOrDefault<string>(\"client_id\", \"\");\r\n                // Use normalized redirect URI for consistency\r\n                string redirectUri = context.Variables.GetValueOrDefault<string>(\"normalized_redirect_uri\", \"\");\r\n                \r\n                // Cookie name for client denials\r\n                string DENIAL_COOKIE_NAME = \"MCP_DENIED_CLIENTS\";\r\n                \r\n                // Check for denial cookie in request\r\n                var cookieHeader = context.Request.Headers.GetValueOrDefault(\"Cookie\", \"\");\r\n                if (string.IsNullOrEmpty(cookieHeader)) {\r\n                    return false;\r\n                }\r\n                \r\n                // Parse cookie header for denial cookie\r\n                string[] cookies = cookieHeader.Split(';');\r\n                foreach (string cookie in cookies) {\r\n                    string trimmedCookie = cookie.Trim();\r\n                    if (trimmedCookie.StartsWith(DENIAL_COOKIE_NAME + \"=\")) {\r\n                        // Extract cookie value\r\n                        string cookieValue = trimmedCookie.Substring(DENIAL_COOKIE_NAME.Length + 1);\r\n                        try {\r\n                            // Parse base64-encoded JSON array of denied clients\r\n                            string decodedValue = System.Text.Encoding.UTF8.GetString(\r\n                                System.Convert.FromBase64String(cookieValue.Split('.')[0]));\r\n                            JArray deniedClients = JArray.Parse(decodedValue);                            \r\n                            \r\n                            // Create client/redirect identifier\r\n                            // Use normalized redirect URI for consistency\r\n                            string clientKey = $\"{clientId}:{redirectUri}\";\r\n                            \r\n                            foreach (var item in deniedClients) {\r\n                                string itemString = item.ToString();\r\n                                \r\n                                // Direct comparison using normalized URI\r\n                                if (itemString == clientKey) {\r\n                                    return true;\r\n                                }\r\n                                \r\n                                // Handle URL-encoded redirect URI in stored cookie\r\n                                try {\r\n                                    string storedValue = itemString;\r\n                                    if (storedValue.Contains(':')) {\r\n                                        string[] parts = storedValue.Split(new char[] {':'}, 2);\r\n                                        if (parts.Length == 2) {\r\n                                            string storedClientId = parts[0];\r\n                                            // Decode stored redirect URI for comparison\r\n                                            string storedRedirectUri = System.Net.WebUtility.UrlDecode(parts[1]);\r\n                                            \r\n                                            // Compare both decoded forms\r\n                                            if (storedClientId == clientId && storedRedirectUri == redirectUri) {\r\n                                                return true;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                } catch (Exception ex) {\r\n                                    // Ignore comparison errors and continue\r\n                                }\r\n                            }\r\n                        } catch (Exception ex) {\r\n                            // Ignore cookie parsing errors and continue\r\n                        }\r\n                    }\r\n                }\r\n                \r\n                return false;\r\n            } catch (Exception ex) {\r\n                return false;\r\n            }\r\n        }\" />\r\n        \r\n        <!-- Check for existing client approval cookie -->\r\n        <set-variable name=\"has_approval_cookie\" value=\"@{\r\n            try {\r\n                if (string.IsNullOrEmpty(context.Variables.GetValueOrDefault<string>(\"client_id\", \"\")) || \r\n                    string.IsNullOrEmpty(context.Variables.GetValueOrDefault<string>(\"redirect_uri\", \"\"))) {\r\n                    return false;\r\n                }\r\n                  \r\n                string clientId = context.Variables.GetValueOrDefault<string>(\"client_id\", \"\");\r\n                // Use normalized redirect URI for consistency\r\n                string redirectUri = context.Variables.GetValueOrDefault<string>(\"normalized_redirect_uri\", \"\");\r\n                \r\n                // Cookie name for client approvals\r\n                string APPROVAL_COOKIE_NAME = \"MCP_APPROVED_CLIENTS\";\r\n                \r\n                // Check for approval cookie in request\r\n                var cookieHeader = context.Request.Headers.GetValueOrDefault(\"Cookie\", \"\");\r\n                if (string.IsNullOrEmpty(cookieHeader)) {\r\n                    return false;\r\n                }\r\n                \r\n                // Parse cookie header for approval cookie\r\n                string[] cookies = cookieHeader.Split(';');\r\n                foreach (string cookie in cookies) {\r\n                    string trimmedCookie = cookie.Trim();\r\n                    if (trimmedCookie.StartsWith(APPROVAL_COOKIE_NAME + \"=\")) {\r\n                        // Extract cookie value\r\n                        string cookieValue = trimmedCookie.Substring(APPROVAL_COOKIE_NAME.Length + 1);\r\n                        try {                            \r\n                            // Parse base64-encoded JSON array of approved clients\r\n                            string decodedValue = System.Text.Encoding.UTF8.GetString(\r\n                                System.Convert.FromBase64String(cookieValue.Split('.')[0]));\r\n                            JArray approvedClients = JArray.Parse(decodedValue);\r\n                            \r\n                            // Create client/redirect identifier\r\n                            // Use normalized redirect URI for consistency\r\n                            string clientKey = $\"{clientId}:{redirectUri}\";\r\n                            \r\n                            foreach (var item in approvedClients) {\r\n                                string itemString = item.ToString();\r\n                                \r\n                                // Direct comparison using normalized URI\r\n                                if (itemString == clientKey) {\r\n                                    return true;\r\n                                }\r\n                                \r\n                                // Handle URL-encoded redirect URI in stored cookie\r\n                                try {\r\n                                    string storedValue = itemString;\r\n                                    if (storedValue.Contains(':')) {\r\n                                        string[] parts = storedValue.Split(new char[] {':'}, 2);\r\n                                        if (parts.Length == 2) {\r\n                                            string storedClientId = parts[0];\r\n                                            // Decode stored redirect URI for comparison\r\n                                            string storedRedirectUri = System.Net.WebUtility.UrlDecode(parts[1]);\r\n                                            \r\n                                            // Compare both decoded forms\r\n                                            if (storedClientId == clientId && storedRedirectUri == redirectUri) {\r\n                                                return true;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                } catch (Exception ex) {\r\n                                    // Ignore comparison errors and continue\r\n                                }\r\n                            }\r\n                        } catch (Exception ex) {\r\n                            // Ignore cookie parsing errors and continue\r\n                        }\r\n                    }\r\n                }\r\n                \r\n                return false;\r\n            } catch (Exception ex) {\r\n                return false;\r\n            }\r\n        }\" />\r\n        \r\n        <set-variable name=\"consent_action\" value=\"@{\r\n            string formBody = context.Variables.GetValueOrDefault<string>(\"form_body\", \"\");\r\n            \r\n            if (!string.IsNullOrEmpty(formBody)) {\r\n                string[] pairs = formBody.Split('&');\r\n                foreach (string pair in pairs) {\r\n                    string[] keyValue = pair.Split(new char[] {'='}, 2);\r\n                    if (keyValue.Length == 2 && keyValue[0] == \"consent_action\") {\r\n                        return System.Net.WebUtility.UrlDecode(keyValue[1]);\r\n                    }\r\n                }\r\n                // Fallback to JSON parsing if form parsing failed\r\n                return context.Request.Body.As<JObject>(preserveContent: true)[\"consent_action\"]?.ToString() ?? \"\";\r\n            }\r\n            return \"\";\r\n        }\" />\r\n        \r\n        <!-- Extract CSRF token from form data -->\r\n        <set-variable name=\"csrf_token_from_form\" value=\"@{\r\n            string formBody = context.Variables.GetValueOrDefault<string>(\"form_body\", \"\");\r\n            \r\n            if (!string.IsNullOrEmpty(formBody)) {\r\n                string[] pairs = formBody.Split('&');\r\n                foreach (string pair in pairs) {\r\n                    string[] keyValue = pair.Split(new char[] {'='}, 2);\r\n                    if (keyValue.Length == 2 && keyValue[0] == \"csrf_token\") {\r\n                        return System.Net.WebUtility.UrlDecode(keyValue[1]);\r\n                    }\r\n                }\r\n            }\r\n            return \"\";\r\n        }\" />\r\n        \r\n        <!-- Validate CSRF token for POST requests -->\r\n        <set-variable name=\"csrf_valid\" value=\"@{\r\n            if (context.Request.Method != \"POST\") {\r\n                return true; // Only validate POST requests\r\n            }\r\n            \r\n            string submittedToken = context.Variables.GetValueOrDefault<string>(\"csrf_token_from_form\", \"\");\r\n            if (string.IsNullOrEmpty(submittedToken)) {\r\n                return false;\r\n            }\r\n            \r\n            // Token cache lookup validation happens next\r\n            string cacheKey = $\"CSRF-{submittedToken}\";\r\n            \r\n            return true; // Initial validation passes, detailed validation follows\r\n        }\" />\r\n        \r\n        <!-- Validate Origin/Referer headers for CSRF protection -->\r\n        <set-variable name=\"origin_referer_valid\" value=\"@{\r\n            if (context.Request.Method != \"POST\") {\r\n                return true; // Only validate state-changing operations\r\n            }\r\n            \r\n            // Get the target origin (expected origin)\r\n            string targetOrigin = \"{{APIMGatewayURL}}\";\r\n            \r\n            // Remove protocol and trailing slash for comparison\r\n            if (targetOrigin.StartsWith(\"https://\")) {\r\n                targetOrigin = targetOrigin.Substring(8);\r\n            } else if (targetOrigin.StartsWith(\"http://\")) {\r\n                targetOrigin = targetOrigin.Substring(7);\r\n            }\r\n            if (targetOrigin.EndsWith(\"/\")) {\r\n                targetOrigin = targetOrigin.TrimEnd('/');\r\n            }\r\n            \r\n            // First check Origin header (preferred)\r\n            string originHeader = context.Request.Headers.GetValueOrDefault(\"Origin\", \"\");\r\n            if (!string.IsNullOrEmpty(originHeader)) {\r\n                try {\r\n                    Uri originUri = new Uri(originHeader);\r\n                    string sourceOrigin = originUri.Host;\r\n                    if (originUri.Port != 80 && originUri.Port != 443) {\r\n                        sourceOrigin += \":\" + originUri.Port;\r\n                    }\r\n                    \r\n                    if (sourceOrigin.Equals(targetOrigin, StringComparison.OrdinalIgnoreCase)) {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                } catch (Exception ex) {\r\n                    return false;\r\n                }\r\n            }\r\n            \r\n            // Fallback to Referer header if Origin is not present\r\n            string refererHeader = context.Request.Headers.GetValueOrDefault(\"Referer\", \"\");\r\n            if (!string.IsNullOrEmpty(refererHeader)) {\r\n                try {\r\n                    Uri refererUri = new Uri(refererHeader);\r\n                    string sourceOrigin = refererUri.Host;\r\n                    if (refererUri.Port != 80 && refererUri.Port != 443) {\r\n                        sourceOrigin += \":\" + refererUri.Port;\r\n                    }\r\n                    \r\n                    if (sourceOrigin.Equals(targetOrigin, StringComparison.OrdinalIgnoreCase)) {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                } catch (Exception ex) {\r\n                    return false;\r\n                }\r\n            }\r\n            \r\n            // Neither Origin nor Referer header present - this is suspicious for POST requests\r\n            // OWASP recommends blocking such requests for better security\r\n            return false; // Block requests without proper origin validation\r\n        }\" />\r\n        \r\n        <!-- Validate Fetch Metadata headers for CSRF protection -->\r\n        <set-variable name=\"fetch_metadata_valid\" value=\"@{\r\n            // Check Sec-Fetch-Site header for cross-site request detection\r\n            string secFetchSite = context.Request.Headers.GetValueOrDefault(\"Sec-Fetch-Site\", \"\");\r\n            \r\n            // Allow same-origin, same-site, and direct navigation\r\n            if (string.IsNullOrEmpty(secFetchSite) || \r\n                secFetchSite == \"same-origin\" || \r\n                secFetchSite == \"same-site\" || \r\n                secFetchSite == \"none\") {\r\n                return true;\r\n            }\r\n            \r\n            // Block cross-site POST requests\r\n            if (context.Request.Method == \"POST\" && secFetchSite == \"cross-site\") {\r\n                return false;\r\n            }\r\n            \r\n            // Allow other values for compatibility\r\n            return true;\r\n        }\" />\r\n        \r\n        <!-- Lookup CSRF token from cache -->\r\n        <cache-lookup-value key=\"@($\"CSRF-{context.Variables.GetValueOrDefault<string>(\"csrf_token_from_form\")}\")\" variable-name=\"csrf_token_data\" />\r\n        \r\n        <!-- Validate CSRF token details -->\r\n        <set-variable name=\"csrf_validation_result\" value=\"@{\r\n            if (context.Request.Method != \"POST\") {\r\n                return \"valid\"; // No validation needed for GET requests\r\n            }\r\n            \r\n            string submittedToken = context.Variables.GetValueOrDefault<string>(\"csrf_token_from_form\", \"\");\r\n            if (string.IsNullOrEmpty(submittedToken)) {\r\n                return \"missing_token\";\r\n            }\r\n            \r\n            string tokenData = context.Variables.GetValueOrDefault<string>(\"csrf_token_data\");\r\n            if (string.IsNullOrEmpty(tokenData)) {\r\n                return \"invalid_token\";\r\n            }\r\n            \r\n            try {\r\n                // Extract token data (before debug info separator)\r\n                string actualTokenData = tokenData;\r\n                if (tokenData.Contains(\"|\")) {\r\n                    actualTokenData = tokenData.Split('|')[0];\r\n                }\r\n                \r\n                // Parse token data: client_id:redirect_uri:timestamp\r\n                // Since both redirect_uri and timestamp can contain colons, we need to be very careful\r\n                // The timestamp format is: YYYY-MM-DDTHH:mm:ssZ\r\n                // So we look for the last occurrence of a timestamp pattern\r\n                \r\n                // Find the last occurrence of a timestamp pattern (YYYY-MM-DDTHH:mm:ssZ)\r\n                var timestampPattern = @\":\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$\";\r\n                var timestampMatch = System.Text.RegularExpressions.Regex.Match(actualTokenData, timestampPattern);\r\n                \r\n                if (!timestampMatch.Success) {\r\n                    return \"malformed_token\";\r\n                }\r\n                \r\n                // Extract the timestamp (without the leading colon)\r\n                string timestampStr = timestampMatch.Value.Substring(1);\r\n                \r\n                // Extract everything before the timestamp match as the client_id:redirect_uri part\r\n                string clientAndRedirect = actualTokenData.Substring(0, timestampMatch.Index);\r\n                \r\n                // Split client_id:redirect_uri on the first colon only\r\n                int firstColonIndex = clientAndRedirect.IndexOf(':');\r\n                if (firstColonIndex == -1) {\r\n                    return \"malformed_token\";\r\n                }\r\n                \r\n                string tokenClientId = clientAndRedirect.Substring(0, firstColonIndex);\r\n                string tokenRedirectUri = clientAndRedirect.Substring(firstColonIndex + 1);\r\n                \r\n                // Validate client_id and redirect_uri match using constant-time comparison\r\n                string currentClientId = context.Variables.GetValueOrDefault<string>(\"client_id\", \"\");\r\n                string currentRedirectUri = context.Variables.GetValueOrDefault<string>(\"normalized_redirect_uri\", \"\");\r\n                \r\n                // Constant-time string comparison for client_id to prevent timing attacks\r\n                bool clientIdMatches = true;\r\n                if (tokenClientId == null || currentClientId == null) {\r\n                    clientIdMatches = (tokenClientId == currentClientId);\r\n                } else if (tokenClientId.Length != currentClientId.Length) {\r\n                    clientIdMatches = false;\r\n                } else {\r\n                    int result = 0;\r\n                    for (int i = 0; i < tokenClientId.Length; i++) {\r\n                        result |= tokenClientId[i] ^ currentClientId[i];\r\n                    }\r\n                    clientIdMatches = (result == 0);\r\n                }\r\n                \r\n                if (!clientIdMatches) {\r\n                    return \"client_mismatch\";\r\n                }\r\n                \r\n                // Constant-time string comparison for redirect_uri to prevent timing attacks\r\n                bool redirectUriMatches = true;\r\n                if (tokenRedirectUri == null || currentRedirectUri == null) {\r\n                    redirectUriMatches = (tokenRedirectUri == currentRedirectUri);\r\n                } else if (tokenRedirectUri.Length != currentRedirectUri.Length) {\r\n                    redirectUriMatches = false;\r\n                } else {\r\n                    int result = 0;\r\n                    for (int i = 0; i < tokenRedirectUri.Length; i++) {\r\n                        result |= tokenRedirectUri[i] ^ currentRedirectUri[i];\r\n                    }\r\n                    redirectUriMatches = (result == 0);\r\n                }\r\n                \r\n                if (!redirectUriMatches) {\r\n                    return \"redirect_mismatch\";\r\n                }\r\n                \r\n                // Validate timestamp (token should not be older than 15 minutes)\r\n                DateTime tokenTime;\r\n                try {\r\n                    tokenTime = DateTime.Parse(timestampStr);\r\n                } catch (Exception) {\r\n                    return \"invalid_timestamp\";\r\n                }\r\n                \r\n                TimeSpan age = DateTime.UtcNow - tokenTime;\r\n                if (age.TotalMinutes > 15) {\r\n                    return \"expired_token\";\r\n                }\r\n                \r\n                return \"valid\";\r\n                \r\n            } catch (Exception ex) {\r\n                return \"validation_error\";\r\n            }\r\n        }\" />\r\n        \r\n        <!-- If this is a form submission, process the consent choice -->\r\n        <choose>\r\n            <when condition=\"@(context.Request.Method == \"POST\")\">\r\n                <!-- Validate Origin/Referer headers -->\r\n                <choose>\r\n                    <when condition=\"@(!context.Variables.GetValueOrDefault<bool>(\"origin_referer_valid\"))\">\r\n                        <!-- Origin/Referer validation failed -->\r\n                        <return-response>\r\n                            <set-status code=\"403\" reason=\"Forbidden\" />\r\n                            <set-header name=\"Content-Type\" exists-action=\"override\">\r\n                                <value>text/html</value>\r\n                            </set-header>\r\n                            <set-header name=\"Cache-Control\" exists-action=\"override\">\r\n                                <value>no-store, no-cache</value>\r\n                            </set-header>\r\n                            <set-header name=\"Pragma\" exists-action=\"override\">\r\n                                <value>no-cache</value>\r\n                            </set-header>\r\n                            <set-body>@(context.Variables.GetValueOrDefault<string>(\"generate_403_response\"))</set-body>\r\n                        </return-response>\r\n                    </when>\r\n                    <otherwise>\r\n                        <!-- Origin/Referer validation passed -->\r\n                        <!-- Validate Fetch Metadata headers -->\r\n                        <choose>\r\n                            <when condition=\"@(!context.Variables.GetValueOrDefault<bool>(\"fetch_metadata_valid\"))\">\r\n                                <!-- Fetch metadata validation failed -->\r\n                                <return-response>\r\n                                    <set-status code=\"403\" reason=\"Forbidden\" />\r\n                                    <set-header name=\"Content-Type\" exists-action=\"override\">\r\n                                        <value>text/html</value>\r\n                                    </set-header>\r\n                                    <set-header name=\"Cache-Control\" exists-action=\"override\">\r\n                                        <value>no-store, no-cache</value>\r\n                                    </set-header>\r\n                                    <set-header name=\"Pragma\" exists-action=\"override\">\r\n                                        <value>no-cache</value>\r\n                                    </set-header>\r\n                                    <set-body>@(context.Variables.GetValueOrDefault<string>(\"generate_403_response\"))</set-body>\r\n                                </return-response>\r\n                            </when>\r\n                            <otherwise>\r\n                                <!-- Fetch metadata validation passed -->\r\n                                <!-- Validate CSRF token -->\r\n                                <choose>\r\n                                    <when condition=\"@(context.Variables.GetValueOrDefault<string>(\"csrf_validation_result\") != \"valid\")\">\r\n                                        <!-- CSRF validation failed -->\r\n                                        <return-response>\r\n                                            <set-status code=\"403\" reason=\"Forbidden\" />\r\n                                            <set-header name=\"Content-Type\" exists-action=\"override\">\r\n                                                <value>text/html</value>\r\n                                            </set-header>\r\n                                            <set-header name=\"Cache-Control\" exists-action=\"override\">\r\n                                                <value>no-store, no-cache</value>\r\n                                            </set-header>\r\n                                            <set-header name=\"Pragma\" exists-action=\"override\">\r\n                                                <value>no-cache</value>\r\n                                            </set-header>\r\n                                            <set-body>@(context.Variables.GetValueOrDefault<string>(\"generate_403_response\"))</set-body>\r\n                                        </return-response>\r\n                                    </when>\r\n                                    <otherwise>\r\n                                        <!-- CSRF validation passed -->\r\n                                        <!-- Delete CSRF token from cache to prevent reuse -->\r\n                                        <cache-remove-value key=\"@($\"CSRF-{context.Variables.GetValueOrDefault<string>(\"csrf_token_from_form\")}\")\" />\r\n                                        \r\n                                        <choose>\r\n                                            <when condition=\"@(context.Variables.GetValueOrDefault<string>(\"consent_action\") == \"allow\")\">\r\n                        <!-- Process consent approval -->\r\n                        <set-variable name=\"response_status_code\" value=\"302\" />\r\n                        <set-variable name=\"response_redirect_location\" value=\"@{\r\n                            string baseUrl = \"{{APIMGatewayURL}}\";\r\n                            \r\n                            // Use already extracted parameters instead of re-parsing form data\r\n                            string clientId = context.Variables.GetValueOrDefault<string>(\"client_id\", \"\");\r\n                            string redirectUri = context.Variables.GetValueOrDefault<string>(\"normalized_redirect_uri\", \"\");\r\n                            string state = context.Variables.GetValueOrDefault<string>(\"state\", \"\");\r\n                            \r\n                            // URL encode parameters to prevent injection attacks\r\n                            string encodedClientId = System.Net.WebUtility.UrlEncode(clientId);\r\n                            string encodedRedirectUri = System.Net.WebUtility.UrlEncode(redirectUri);\r\n                            // State is already properly encoded from form submission, don't double-encode\r\n                            string encodedState = state;\r\n                            \r\n                            // Add PKCE parameters if they exist\r\n                            string codeChallenge = context.Variables.GetValueOrDefault<string>(\"code_challenge\", \"\");\r\n                            string codeChallengeMethod = context.Variables.GetValueOrDefault<string>(\"code_challenge_method\", \"\");\r\n                            \r\n                            string url = $\"{baseUrl}/authorize?client_id={encodedClientId}&redirect_uri={encodedRedirectUri}&state={encodedState}\";\r\n                            \r\n                            if (!string.IsNullOrEmpty(codeChallenge)) {\r\n                                url += $\"&code_challenge={System.Net.WebUtility.UrlEncode(codeChallenge)}\";\r\n                            }\r\n                            \r\n                            if (!string.IsNullOrEmpty(codeChallengeMethod)) {\r\n                                url += $\"&code_challenge_method={System.Net.WebUtility.UrlEncode(codeChallengeMethod)}\";\r\n                            }\r\n                            \r\n                            return url;\r\n                        }\" />\r\n                          <!-- Calculate approval cookie value -->\r\n                        <set-variable name=\"approval_cookie\" value=\"@{\r\n                            string cookieName = \"MCP_APPROVED_CLIENTS\";\r\n                            \r\n                            // Use already extracted parameters instead of re-parsing form data\r\n                            string clientId = context.Variables.GetValueOrDefault<string>(\"client_id\", \"\");\r\n                            string redirectUri = context.Variables.GetValueOrDefault<string>(\"normalized_redirect_uri\", \"\");\r\n                            \r\n                            // Create a unique identifier for this client/redirect combination\r\n                            string clientKey = $\"{clientId}:{redirectUri}\";\r\n                            \r\n                            // Check for existing cookie\r\n                            var cookieHeader = context.Request.Headers.GetValueOrDefault(\"Cookie\", \"\");\r\n                            JArray approvedClients = new JArray();\r\n                            \r\n                            if (!string.IsNullOrEmpty(cookieHeader)) {\r\n                                // Parse cookies to find our approval cookie\r\n                                string[] cookies = cookieHeader.Split(';');\r\n                                foreach (string cookie in cookies) {\r\n                                    string trimmedCookie = cookie.Trim();\r\n                                    if (trimmedCookie.StartsWith(cookieName + \"=\")) {\r\n                                        try {\r\n                                            // Extract and parse the cookie value\r\n                                            string cookieValue = trimmedCookie.Substring(cookieName.Length + 1);\r\n                                            // Get the payload part (before the first dot if cookie is signed)\r\n                                            string payload = cookieValue.Contains('.') ? \r\n                                                cookieValue.Split('.')[0] : cookieValue;\r\n                                            string decodedValue = System.Text.Encoding.UTF8.GetString(\r\n                                                System.Convert.FromBase64String(payload));\r\n                                            approvedClients = JArray.Parse(decodedValue);\r\n                                        } catch (Exception) {\r\n                                            // If parsing fails, we'll just create a new cookie\r\n                                            approvedClients = new JArray();\r\n                                        }\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                            \r\n                            // Add the current client if not already in the list\r\n                            bool clientExists = false;\r\n                            foreach (var item in approvedClients) {\r\n                                if (item.ToString() == clientKey) {\r\n                                    clientExists = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            \r\n                            if (!clientExists) {\r\n                                approvedClients.Add(clientKey);\r\n                            }\r\n                            \r\n                            // Base64 encode the client list\r\n                            string jsonClients = approvedClients.ToString(Newtonsoft.Json.Formatting.None);\r\n                            string encodedClients = System.Convert.ToBase64String(\r\n                                System.Text.Encoding.UTF8.GetBytes(jsonClients));\r\n                            \r\n                            // Return the full cookie string with appropriate settings\r\n                            return $\"{cookieName}={encodedClients}; Max-Age=31536000; Path=/; Secure; HttpOnly; SameSite=Lax\";\r\n                        }\" />\r\n                        \r\n                        <!-- Set variables for outbound policy awareness -->\r\n                        <set-variable name=\"consent_approved\" value=\"true\" />\r\n                        <set-variable name=\"cookie_name\" value=\"MCP_APPROVED_CLIENTS\" />\r\n                        \r\n                        <!-- Return the response with the cookie already set -->\r\n                        <return-response>\r\n                            <set-status code=\"302\" reason=\"Found\" />\r\n                            <set-header name=\"Location\" exists-action=\"override\">\r\n                                <value>@(context.Variables.GetValueOrDefault<string>(\"response_redirect_location\", \"\"))</value>\r\n                            </set-header>\r\n                            <set-header name=\"Set-Cookie\" exists-action=\"append\">\r\n                                <value>@(context.Variables.GetValueOrDefault<string>(\"approval_cookie\"))</value>\r\n                            </set-header>\r\n                        </return-response>\r\n                    </when>\r\n                    <when condition=\"@(context.Variables.GetValueOrDefault<string>(\"consent_action\") == \"deny\")\">\r\n                        <!-- Process consent denial -->\r\n                        <set-variable name=\"response_status_code\" value=\"403\" />\r\n                        <set-variable name=\"response_content_type\" value=\"text/html\" />\r\n                        <set-variable name=\"response_cache_control\" value=\"no-store, no-cache\" />\r\n                        <set-variable name=\"response_pragma\" value=\"no-cache\" />\r\n                        \r\n                        <!-- Calculate the cookie value right here in inbound before returning response -->\r\n                        <set-variable name=\"denial_cookie\" value=\"@{\r\n                            string cookieName = \"MCP_DENIED_CLIENTS\";\r\n                            \r\n                            // Use already extracted parameters instead of re-parsing form data\r\n                            string clientId = context.Variables.GetValueOrDefault<string>(\"client_id\", \"\");\r\n                            string redirectUri = context.Variables.GetValueOrDefault<string>(\"normalized_redirect_uri\", \"\");\r\n                            \r\n                            // Create a unique identifier for this client/redirect combination\r\n                            string clientKey = $\"{clientId}:{redirectUri}\";\r\n                            \r\n                            // Check for existing cookie\r\n                            var cookieHeader = context.Request.Headers.GetValueOrDefault(\"Cookie\", \"\");\r\n                            JArray deniedClients = new JArray();\r\n                            \r\n                            if (!string.IsNullOrEmpty(cookieHeader)) {\r\n                                // Parse cookies to find our denial cookie\r\n                                string[] cookies = cookieHeader.Split(';');\r\n                                foreach (string cookie in cookies) {\r\n                                    string trimmedCookie = cookie.Trim();\r\n                                    if (trimmedCookie.StartsWith(cookieName + \"=\")) {\r\n                                        try {\r\n                                            // Extract and parse the cookie value\r\n                                            string cookieValue = trimmedCookie.Substring(cookieName.Length + 1);\r\n                                            // Get the payload part (before the first dot if cookie is signed)\r\n                                            string payload = cookieValue.Contains('.') ? \r\n                                                cookieValue.Split('.')[0] : cookieValue;\r\n                                            string decodedValue = System.Text.Encoding.UTF8.GetString(\r\n                                                System.Convert.FromBase64String(payload));\r\n                                            deniedClients = JArray.Parse(decodedValue);\r\n                                        } catch (Exception) {\r\n                                            // If parsing fails, we'll just create a new cookie\r\n                                            deniedClients = new JArray();\r\n                                        }\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                            \r\n                            // Add the current client if not already in the list\r\n                            bool clientExists = false;\r\n                            foreach (var item in deniedClients) {\r\n                                if (item.ToString() == clientKey) {\r\n                                    clientExists = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            \r\n                            if (!clientExists) {\r\n                                deniedClients.Add(clientKey);\r\n                            }\r\n                            \r\n                            // Base64 encode the client list\r\n                            string jsonClients = deniedClients.ToString(Newtonsoft.Json.Formatting.None);\r\n                            string encodedClients = System.Convert.ToBase64String(\r\n                                System.Text.Encoding.UTF8.GetBytes(jsonClients));\r\n                            \r\n                            // Return the full cookie string with appropriate settings\r\n                            return $\"{cookieName}={encodedClients}; Max-Age=31536000; Path=/; Secure; HttpOnly; SameSite=Lax\";\r\n                        }\" />                        <!-- Store the HTML content for the access denied page -->\r\n                        <set-variable name=\"response_body\" value=\"@{\r\n                            string denialTemplate = context.Variables.GetValueOrDefault<string>(\"access_denied_template\");\r\n                            string commonStyles = context.Variables.GetValueOrDefault<string>(\"common_styles\");\r\n                            \r\n                            // Replace placeholders with actual content\r\n                            denialTemplate = denialTemplate.Replace(\"__COMMON_STYLES__\", commonStyles);\r\n                            denialTemplate = denialTemplate.Replace(\"__DENIAL_MESSAGE__\", \r\n                                \"You have denied authorization for this application against the MCP server.\");\r\n                            \r\n                            return denialTemplate;\r\n                        }\" />\r\n                        \r\n                        <!-- Set variables for outbound policy awareness -->\r\n                        <set-variable name=\"consent_denied\" value=\"true\" />\r\n                        <set-variable name=\"cookie_name\" value=\"MCP_DENIED_CLIENTS\" />\r\n                        \r\n                        <!-- Return the response with the cookie already set -->\r\n                        <return-response>\r\n                            <set-status code=\"403\" reason=\"Forbidden\" />\r\n                            <set-header name=\"Content-Type\" exists-action=\"override\">\r\n                                <value>text/html</value>\r\n                            </set-header>\r\n                            <set-header name=\"Cache-Control\" exists-action=\"override\">\r\n                                <value>no-store, no-cache</value>\r\n                            </set-header>\r\n                            <set-header name=\"Pragma\" exists-action=\"override\">\r\n                                <value>no-cache</value>\r\n                            </set-header>\r\n                            <set-header name=\"Set-Cookie\" exists-action=\"append\">\r\n                                <value>@(context.Variables.GetValueOrDefault<string>(\"denial_cookie\"))</value>\r\n                            </set-header>\r\n                            <set-body>@(context.Variables.GetValueOrDefault<string>(\"response_body\", \"\"))</set-body>\r\n                        </return-response>\r\n                    </when>\r\n                    <otherwise>\r\n                        <!-- Invalid consent action - return error -->\r\n                        <return-response>\r\n                            <set-status code=\"403\" reason=\"Forbidden\" />\r\n                            <set-header name=\"Content-Type\" exists-action=\"override\">\r\n                                <value>text/html</value>\r\n                            </set-header>\r\n                            <!-- Explicitly disable any redirects -->\r\n                            <set-header name=\"Cache-Control\" exists-action=\"override\">\r\n                                <value>no-store, no-cache</value>\r\n                            </set-header>\r\n                            <set-header name=\"Pragma\" exists-action=\"override\">\r\n                                <value>no-cache</value>\r\n                            </set-header>\r\n                            <set-body>@{\r\n                                string denialTemplate = context.Variables.GetValueOrDefault<string>(\"access_denied_template\");\r\n                                string commonStyles = context.Variables.GetValueOrDefault<string>(\"common_styles\");\r\n                                string consentAction = context.Variables.GetValueOrDefault<string>(\"consent_action\", \"\");\r\n                                \r\n                                string detailedMessage = $\"Invalid consent action '{consentAction}' received. Expected 'allow' or 'deny'. This may indicate a form tampering attempt or a browser compatibility issue.\";\r\n                                \r\n                                // Replace placeholders with actual content\r\n                                denialTemplate = denialTemplate.Replace(\"__COMMON_STYLES__\", commonStyles);\r\n                                denialTemplate = denialTemplate.Replace(\"__DENIAL_MESSAGE__\", detailedMessage);\r\n                                \r\n                                return denialTemplate;\r\n                            }</set-body>\r\n                        </return-response>\r\n                                            </otherwise>\r\n                                        </choose>\r\n                                    </otherwise>\r\n                                </choose>\r\n                            </otherwise>\r\n                        </choose>\r\n                    </otherwise>\r\n                </choose>\r\n            </when>\r\n            <!-- For GET requests, check for cookies first, then display consent page if no cookie found -->\r\n            <otherwise>\r\n                <choose>\r\n                    <!-- If there's an approval cookie, skip consent and redirect to authorization endpoint -->\r\n                    <when condition=\"@(context.Variables.GetValueOrDefault<bool>(\"has_approval_cookie\"))\">\r\n                        <!-- Set redirect location to authorization endpoint -->\r\n                        <set-variable name=\"response_redirect_location\" value=\"@{\r\n                            string baseUrl = \"{{APIMGatewayURL}}\";\r\n                            string clientId = context.Variables.GetValueOrDefault<string>(\"client_id\", \"\");\r\n                            string redirectUri = context.Variables.GetValueOrDefault<string>(\"normalized_redirect_uri\", \"\");\r\n                            string state = context.Variables.GetValueOrDefault<string>(\"state\", \"\");\r\n                            \r\n                            // URL encode parameters to prevent injection attacks\r\n                            string encodedClientId = System.Net.WebUtility.UrlEncode(clientId);\r\n                            string encodedRedirectUri = System.Net.WebUtility.UrlEncode(redirectUri);\r\n                            // State is already properly encoded, don't double-encode\r\n                            string encodedState = state;\r\n                            \r\n                            // Add PKCE parameters if they exist\r\n                            string codeChallenge = context.Variables.GetValueOrDefault<string>(\"code_challenge\", \"\");\r\n                            string codeChallengeMethod = context.Variables.GetValueOrDefault<string>(\"code_challenge_method\", \"\");\r\n                            \r\n                            string url = $\"{baseUrl}/authorize?client_id={encodedClientId}&redirect_uri={encodedRedirectUri}&state={encodedState}\";\r\n                            \r\n                            if (!string.IsNullOrEmpty(codeChallenge)) {\r\n                                url += $\"&code_challenge={System.Net.WebUtility.UrlEncode(codeChallenge)}\";\r\n                            }\r\n                            \r\n                            if (!string.IsNullOrEmpty(codeChallengeMethod)) {\r\n                                url += $\"&code_challenge_method={System.Net.WebUtility.UrlEncode(codeChallengeMethod)}\";\r\n                            }\r\n                            \r\n                            return url;\r\n                        }\" />\r\n                        \r\n                        <!-- Redirect to authorization endpoint -->\r\n                        <return-response>\r\n                            <set-status code=\"302\" reason=\"Found\" />\r\n                            <set-header name=\"Location\" exists-action=\"override\">\r\n                                <value>@(context.Variables.GetValueOrDefault<string>(\"response_redirect_location\", \"\"))</value>\r\n                            </set-header>\r\n                        </return-response>\r\n                    </when>\r\n                    \r\n                    <!-- If there's a denial cookie, return access denied page immediately -->\r\n                    <when condition=\"@(context.Variables.GetValueOrDefault<bool>(\"has_denial_cookie\"))\">\r\n                        <return-response>\r\n                            <set-status code=\"403\" reason=\"Forbidden\" />\r\n                            <set-header name=\"Content-Type\" exists-action=\"override\">\r\n                                <value>text/html</value>\r\n                            </set-header>\r\n                            <!-- Explicitly disable any redirects -->\r\n                            <set-header name=\"Cache-Control\" exists-action=\"override\">\r\n                                <value>no-store, no-cache</value>\r\n                            </set-header>\r\n                            <set-header name=\"Pragma\" exists-action=\"override\">\r\n                                <value>no-cache</value>\r\n                            </set-header>\r\n                            <set-body>@{\r\n                                string denialTemplate = context.Variables.GetValueOrDefault<string>(\"access_denied_template\");\r\n                                string commonStyles = context.Variables.GetValueOrDefault<string>(\"common_styles\");\r\n                                \r\n                                // Replace placeholders with actual content\r\n                                denialTemplate = denialTemplate.Replace(\"__COMMON_STYLES__\", commonStyles);\r\n                                denialTemplate = denialTemplate.Replace(\"__DENIAL_MESSAGE__\", \r\n                                    \"You have previously denied access to this application.\");\r\n                                \r\n                                return denialTemplate;\r\n                            }</set-body>\r\n                        </return-response>\r\n                    </when>\r\n                      <!-- If no cookies found, show the consent screen -->\r\n                    <otherwise>\r\n                        <!-- Check if client is registered first -->\r\n                        <choose>\r\n                            <when condition=\"@(!context.Variables.GetValueOrDefault<bool>(\"is_client_registered\"))\">\r\n                                <!-- Client is not registered, show error page -->\r\n                                <return-response>\r\n                                    <set-status code=\"403\" reason=\"Forbidden\" />\r\n                                    <set-header name=\"Content-Type\" exists-action=\"override\">\r\n                                        <value>text/html</value>\r\n                                    </set-header>\r\n                                    <set-header name=\"Cache-Control\" exists-action=\"override\">\r\n                                        <value>no-store, no-cache</value>\r\n                                    </set-header>\r\n                                    <set-header name=\"Pragma\" exists-action=\"override\">\r\n                                        <value>no-cache</value>\r\n                                    </set-header>\r\n                                    <set-body>@{\r\n                                        string template = context.Variables.GetValueOrDefault<string>(\"client_not_found_template\");\r\n                                        string commonStyles = context.Variables.GetValueOrDefault<string>(\"common_styles\");\r\n                                        string clientId = context.Variables.GetValueOrDefault<string>(\"client_id\", \"\");\r\n                                        string redirectUri = context.Variables.GetValueOrDefault<string>(\"normalized_redirect_uri\", \"\");\r\n                                        \r\n                                        // Replace placeholders with HTML-encoded content to prevent XSS\r\n                                        template = template.Replace(\"__COMMON_STYLES__\", commonStyles);\r\n                                        template = template.Replace(\"__CLIENT_ID_DISPLAY__\", System.Net.WebUtility.HtmlEncode(clientId));\r\n                                        template = template.Replace(\"__REDIRECT_URI__\", System.Net.WebUtility.HtmlEncode(redirectUri));\r\n                                        \r\n                                        return template;\r\n                                    }</set-body>\r\n                                </return-response>\r\n                            </when>\r\n                            <otherwise>                                <!-- Client is registered, get client name from the cache -->\r\n                                <!-- Build consent page using the standardized template -->\r\n                                <set-variable name=\"consent_page\" value=\"@{\r\n                                    string template = context.Variables.GetValueOrDefault<string>(\"consent_page_template\");\r\n                                    string commonStyles = context.Variables.GetValueOrDefault<string>(\"common_styles\");\r\n                                    \r\n                                    // Use the service URL from APIM configuration\r\n                                    string basePath = \"{{APIMGatewayURL}}\";\r\n                                    \r\n                                    string clientId = context.Variables.GetValueOrDefault<string>(\"client_id\", \"\");\r\n                                    string clientName = context.Variables.GetValueOrDefault<string>(\"client_name\", \"Unknown Application\");\r\n                                    string clientUri = context.Variables.GetValueOrDefault<string>(\"client_uri\", \"N/A\");\r\n                                    string oauthScopes = context.Variables.GetValueOrDefault<string>(\"oauth_scopes\", \"\");\r\n                                    \r\n                                    // Get the normalized (human-readable) redirect URI for display\r\n                                    string normalizedRedirectUri = context.Variables.GetValueOrDefault<string>(\"normalized_redirect_uri\", \"\");\r\n                                    \r\n                                    // Use the normalized redirect URI for form submission to ensure consistency\r\n                                    string formRedirectUri = context.Variables.GetValueOrDefault<string>(\"normalized_redirect_uri\", \"\");\r\n                                    string htmlEncodedFormUri = System.Net.WebUtility.HtmlEncode(formRedirectUri);\r\n                                    \r\n                                    string state = context.Variables.GetValueOrDefault<string>(\"state\", \"\");\r\n                                    string csrfToken = context.Variables.GetValueOrDefault<string>(\"csrf_token\", \"\");\r\n                                    \r\n                                    // Create a temporary placeholder for the form fields\r\n                                    string FORM_FIELD_PLACEHOLDER = \"___ENCODED_REDIRECT_URI___\";\r\n                                    \r\n                                    // Replace the styles first\r\n                                    template = template.Replace(\"__COMMON_STYLES__\", commonStyles);\r\n                                    \r\n                                    // First, create a temporary placeholder for the form fields\r\n                                    template = template.Replace(\"value='__REDIRECT_URI__'\", \"value='\" + FORM_FIELD_PLACEHOLDER + \"'\");\r\n                                      \r\n                                    // Replace template placeholders with properly encoded values\r\n                                    template = template.Replace(\"__CLIENT_NAME__\", System.Net.WebUtility.HtmlEncode(clientName));\r\n                                    template = template.Replace(\"__CLIENT_URI__\", System.Net.WebUtility.HtmlEncode(clientUri));\r\n                                    // For display purposes, use HtmlEncode for safety\r\n                                    template = template.Replace(\"__CLIENT_ID_DISPLAY__\", System.Net.WebUtility.HtmlEncode(clientId));\r\n                                    template = template.Replace(\"__REDIRECT_URI__\", System.Net.WebUtility.HtmlEncode(normalizedRedirectUri));\r\n                                    // For form field values, use HtmlEncode for XSS protection\r\n                                    template = template.Replace(\"__CLIENT_ID_FORM__\", System.Net.WebUtility.HtmlEncode(clientId));\r\n                                    // State needs to be URL-decoded first since it comes URL-encoded from query, then HTML-encoded for form safety\r\n                                    string decodedState = System.Net.WebUtility.UrlDecode(state);\r\n                                    template = template.Replace(\"__STATE__\", System.Net.WebUtility.HtmlEncode(decodedState));\r\n                                    template = template.Replace(\"__CODE_CHALLENGE__\", System.Net.WebUtility.HtmlEncode(context.Variables.GetValueOrDefault<string>(\"code_challenge\", \"\")));\r\n                                    template = template.Replace(\"__CODE_CHALLENGE_METHOD__\", System.Net.WebUtility.HtmlEncode(context.Variables.GetValueOrDefault<string>(\"code_challenge_method\", \"\")));\r\n                                    template = template.Replace(\"__CSRF_TOKEN__\", System.Net.WebUtility.HtmlEncode(csrfToken));\r\n                                    template = template.Replace(\"__CONSENT_ACTION_URL__\", basePath + \"/consent\");                                    \r\n                                    // Handle space-separated OAuth scopes and create individual list items with HTML encoding\r\n                                    string[] scopeArray = oauthScopes.Split(new char[] {' '}, StringSplitOptions.RemoveEmptyEntries);\r\n                                    StringBuilder scopeList = new StringBuilder();\r\n                                    \r\n                                    foreach (string scope in scopeArray) {\r\n                                        scopeList.AppendLine($\"<li><code>{System.Net.WebUtility.HtmlEncode(scope)}</code></li>\");\r\n                                    }\r\n                                    \r\n                                    template = template.Replace(\"__OAUTH_SCOPES__\", scopeList.ToString());\r\n                                    \r\n                                // Replace form field placeholder with encoded URI\r\n                                template = template.Replace(FORM_FIELD_PLACEHOLDER, htmlEncodedFormUri);                                    return template;\r\n                                }\" />\r\n                                \r\n                                <!-- Return consent page -->\r\n                                <return-response>\r\n                                    <set-status code=\"200\" reason=\"OK\" />\r\n                                    <set-header name=\"Content-Type\" exists-action=\"override\">\r\n                                        <value>text/html</value>\r\n                                    </set-header>\r\n                                    <!-- Security headers -->\r\n                                    <set-header name=\"X-Frame-Options\" exists-action=\"override\">\r\n                                        <value>DENY</value>\r\n                                    </set-header>\r\n                                    <set-header name=\"X-Content-Type-Options\" exists-action=\"override\">\r\n                                        <value>nosniff</value>\r\n                                    </set-header>\r\n                                    <set-header name=\"X-XSS-Protection\" exists-action=\"override\">\r\n                                        <value>1; mode=block</value>\r\n                                    </set-header>\r\n                                    <set-header name=\"Referrer-Policy\" exists-action=\"override\">\r\n                                        <value>strict-origin-when-cross-origin</value>\r\n                                    </set-header>\r\n                                    <set-header name=\"Content-Security-Policy\" exists-action=\"override\">\r\n                                        <value>default-src 'self'; style-src 'unsafe-inline'; script-src 'none'; object-src 'none'; base-uri 'self'; form-action 'self' https:</value>\r\n                                    </set-header>\r\n                                    <set-header name=\"Cache-Control\" exists-action=\"override\">\r\n                                        <value>no-store, no-cache, must-revalidate</value>\r\n                                    </set-header>\r\n                                    <set-header name=\"Pragma\" exists-action=\"override\">\r\n                                        <value>no-cache</value>\r\n                                    </set-header>\r\n                                    <set-body>@{\r\n                                        return context.Variables.GetValueOrDefault<string>(\"consent_page\", \"\");\r\n                                    }</set-body>\r\n                                </return-response>\r\n                            </otherwise>\r\n                        </choose>\r\n                    </otherwise>\r\n                </choose>\r\n            </otherwise>\r\n        </choose>\r\n    </inbound>\r\n    <backend>\r\n        <base />\r\n    </backend>\r\n    <outbound>\r\n        <base />\r\n        <!-- Debug trace for variable verification -->\r\n        <trace source=\"outbound-debug\" severity=\"information\">\r\n            <message>@{\r\n                return $\"Outbound policy: consent_approved={context.Variables.GetValueOrDefault<bool>(\"consent_approved\")}, consent_denied={context.Variables.GetValueOrDefault<bool>(\"consent_denied\")}, cookie_name={context.Variables.GetValueOrDefault<string>(\"cookie_name\")}\";\r\n            }</message>\r\n        </trace>\r\n        \r\n        <!-- Set cookies based on consent decision -->\r\n        <choose>\r\n            <!-- Handle approval cookie -->\r\n            <when condition=\"@(context.Variables.GetValueOrDefault<bool>(\"consent_approved\"))\">\r\n                <set-header name=\"Set-Cookie\" exists-action=\"append\">\r\n                    <value>@{\r\n                        string cookieName = context.Variables.GetValueOrDefault<string>(\"cookie_name\", \"MCP_APPROVED_CLIENTS\");\r\n                        string clientId = context.Variables.GetValueOrDefault<string>(\"client_id\", \"\");\r\n                        // Use normalized redirect URI for cookies\r\n                        string redirectUri = context.Variables.GetValueOrDefault<string>(\"normalized_redirect_uri\", \"\");\r\n                        \r\n                        // Create unique client/redirect identifier\r\n                        string clientKey = $\"{clientId}:{redirectUri}\";\r\n                        \r\n                        // Check for existing cookie\r\n                        var cookieHeader = context.Request.Headers.GetValueOrDefault(\"Cookie\", \"\");\r\n                        JArray approvedClients = new JArray();\r\n                        \r\n                        if (!string.IsNullOrEmpty(cookieHeader)) {\r\n                            // Parse cookies to find approval cookie\r\n                            string[] cookies = cookieHeader.Split(';');\r\n                            foreach (string cookie in cookies) {\r\n                                string trimmedCookie = cookie.Trim();\r\n                                if (trimmedCookie.StartsWith(cookieName + \"=\")) {\r\n                                    try {\r\n                                        // Extract and parse cookie value\r\n                                        string cookieValue = trimmedCookie.Substring(cookieName.Length + 1);\r\n                                        // Get payload part (before first dot if signed)\r\n                                        string payload = cookieValue.Contains('.') ? \r\n                                            cookieValue.Split('.')[0] : cookieValue;\r\n                                        string decodedValue = System.Text.Encoding.UTF8.GetString(\r\n                                            System.Convert.FromBase64String(payload));\r\n                                        approvedClients = JArray.Parse(decodedValue);\r\n                                    } catch (Exception) {\r\n                                        // If parsing fails, create new cookie\r\n                                        approvedClients = new JArray();\r\n                                    }\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        \r\n                        // Add the current client if not already in the list\r\n                        bool clientExists = false;\r\n                        foreach (var item in approvedClients) {\r\n                            if (item.ToString() == clientKey) {\r\n                                clientExists = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        \r\n                        if (!clientExists) {\r\n                            approvedClients.Add(clientKey);\r\n                        }\r\n                        \r\n                        // Base64 encode the client list\r\n                        string jsonClients = approvedClients.ToString(Newtonsoft.Json.Formatting.None);\r\n                        string encodedClients = System.Convert.ToBase64String(\r\n                            System.Text.Encoding.UTF8.GetBytes(jsonClients));\r\n                        \r\n                        // Return the cookie with appropriate settings\r\n                        return $\"{cookieName}={encodedClients}; Max-Age=31536000; Path=/; Secure; HttpOnly; SameSite=Lax\";\r\n                    }</value>\r\n                </set-header>\r\n                \r\n                <!-- Set response status and redirect for approval -->\r\n                <set-status code=\"@(context.Variables.GetValueOrDefault<int>(\"response_status_code\", 302))\" reason=\"Found\" />\r\n                <set-header name=\"Location\" exists-action=\"override\">\r\n                    <value>@(context.Variables.GetValueOrDefault<string>(\"response_redirect_location\", \"\"))</value>\r\n                </set-header>\r\n            </when>\r\n            \r\n            <!-- Handle denial cookie -->\r\n            <when condition=\"@(context.Variables.GetValueOrDefault<bool>(\"consent_denied\"))\">\r\n                <set-header name=\"Set-Cookie\" exists-action=\"append\">\r\n                    <value>@{\r\n                        string cookieName = context.Variables.GetValueOrDefault<string>(\"cookie_name\", \"MCP_DENIED_CLIENTS\");\r\n                        string clientId = context.Variables.GetValueOrDefault<string>(\"client_id\", \"\");\r\n                        // Use normalized redirect URI for cookies\r\n                        string redirectUri = context.Variables.GetValueOrDefault<string>(\"normalized_redirect_uri\", \"\");\r\n                        \r\n                        // Create unique client/redirect identifier\r\n                        string clientKey = $\"{clientId}:{redirectUri}\";\r\n                        \r\n                        // Check for existing cookie\r\n                        var cookieHeader = context.Request.Headers.GetValueOrDefault(\"Cookie\", \"\");\r\n                        JArray deniedClients = new JArray();\r\n                        \r\n                        if (!string.IsNullOrEmpty(cookieHeader)) {\r\n                            // Parse cookies to find denial cookie\r\n                            string[] cookies = cookieHeader.Split(';');\r\n                            foreach (string cookie in cookies) {\r\n                                string trimmedCookie = cookie.Trim();\r\n                                if (trimmedCookie.StartsWith(cookieName + \"=\")) {\r\n                                    try {\r\n                                        // Extract and parse cookie value\r\n                                        string cookieValue = trimmedCookie.Substring(cookieName.Length + 1);\r\n                                        // Get payload part (before first dot if signed)\r\n                                        string payload = cookieValue.Contains('.') ? \r\n                                            cookieValue.Split('.')[0] : cookieValue;\r\n                                        string decodedValue = System.Text.Encoding.UTF8.GetString(\r\n                                            System.Convert.FromBase64String(payload));\r\n                                        deniedClients = JArray.Parse(decodedValue);\r\n                                    } catch (Exception) {\r\n                                        // If parsing fails, create new cookie\r\n                                        deniedClients = new JArray();\r\n                                    }\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        \r\n                        // Add client if not already in list\r\n                        bool clientExists = false;\r\n                        foreach (var item in deniedClients) {\r\n                            if (item.ToString() == clientKey) {\r\n                                clientExists = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        \r\n                        if (!clientExists) {\r\n                            deniedClients.Add(clientKey);\r\n                        }\r\n                        \r\n                        // Base64 encode client list\r\n                        string jsonClients = deniedClients.ToString(Newtonsoft.Json.Formatting.None);\r\n                        string encodedClients = System.Convert.ToBase64String(\r\n                            System.Text.Encoding.UTF8.GetBytes(jsonClients));\r\n                        \r\n                        // Return cookie with security settings\r\n                        return $\"{cookieName}={encodedClients}; Max-Age=31536000; Path=/; Secure; HttpOnly; SameSite=Lax\";\r\n                    }</value>\r\n                </set-header>\r\n            </when>\r\n        </choose>\r\n    </outbound>\r\n    <on-error>\r\n        <base />\r\n    </on-error>\r\n</policies>\r\n"
          },
          "resources": {
            "apimService": {
              "existing": true,
              "type": "Microsoft.ApiManagement/service",
              "apiVersion": "2021-08-01",
              "name": "[parameters('apimServiceName')]"
            },
            "encryptionKeyNamedValue": {
              "type": "Microsoft.ApiManagement/service/namedValues",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}', parameters('apimServiceName'), 'EncryptionKey')]",
              "properties": {
                "displayName": "EncryptionKey",
                "value": "[base64(uniqueString(resourceGroup().id, parameters('apimServiceName'), parameters('location'), 'encryption-key'))]",
                "secret": true
              },
              "dependsOn": [
                "apimService"
              ]
            },
            "encryptionIVNamedValue": {
              "type": "Microsoft.ApiManagement/service/namedValues",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}', parameters('apimServiceName'), 'EncryptionIV')]",
              "properties": {
                "displayName": "EncryptionIV",
                "value": "[base64(uniqueString(resourceGroup().id, parameters('apimServiceName'), parameters('location'), 'encryption-iv'))]",
                "secret": true
              },
              "dependsOn": [
                "apimService"
              ]
            },
            "EntraIDTenantIdNamedValue": {
              "type": "Microsoft.ApiManagement/service/namedValues",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}', parameters('apimServiceName'), 'EntraIDTenantId')]",
              "properties": {
                "displayName": "EntraIDTenantId",
                "value": "[reference('entraApp').outputs.entraAppTenantId.value]",
                "secret": false
              },
              "dependsOn": [
                "apimService",
                "entraApp"
              ]
            },
            "EntraIDClientIdNamedValue": {
              "type": "Microsoft.ApiManagement/service/namedValues",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}', parameters('apimServiceName'), 'EntraIDClientId')]",
              "properties": {
                "displayName": "EntraIDClientId",
                "value": "[reference('entraApp').outputs.entraAppId.value]",
                "secret": false
              },
              "dependsOn": [
                "apimService",
                "entraApp"
              ]
            },
            "EntraIdFicClientIdNamedValue": {
              "type": "Microsoft.ApiManagement/service/namedValues",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}', parameters('apimServiceName'), 'EntraIDFicClientId')]",
              "properties": {
                "displayName": "EntraIdFicClientId",
                "value": "[parameters('entraAppUserAssignedIdentityClientId')]",
                "secret": false
              },
              "dependsOn": [
                "apimService"
              ]
            },
            "OAuthCallbackUriNamedValue": {
              "type": "Microsoft.ApiManagement/service/namedValues",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}', parameters('apimServiceName'), 'OAuthCallbackUri')]",
              "properties": {
                "displayName": "OAuthCallbackUri",
                "value": "[format('{0}/oauth-callback', reference('apimService').gatewayUrl)]",
                "secret": false
              },
              "dependsOn": [
                "apimService"
              ]
            },
            "OAuthScopesNamedValue": {
              "type": "Microsoft.ApiManagement/service/namedValues",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}', parameters('apimServiceName'), 'OAuthScopes')]",
              "properties": {
                "displayName": "OAuthScopes",
                "value": "[parameters('oauthScopes')]",
                "secret": false
              },
              "dependsOn": [
                "apimService"
              ]
            },
            "McpClientIdNamedValue": {
              "type": "Microsoft.ApiManagement/service/namedValues",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}', parameters('apimServiceName'), 'McpClientId')]",
              "properties": {
                "displayName": "McpClientId",
                "value": "[reference('entraApp').outputs.entraAppId.value]",
                "secret": false
              },
              "dependsOn": [
                "apimService",
                "entraApp"
              ]
            },
            "APIMGatewayURLNamedValue": {
              "type": "Microsoft.ApiManagement/service/namedValues",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}', parameters('apimServiceName'), 'APIMGatewayURL')]",
              "properties": {
                "displayName": "APIMGatewayURL",
                "value": "[reference('apimService').gatewayUrl]",
                "secret": false
              },
              "dependsOn": [
                "apimService"
              ]
            },
            "MCPServerNamedValue": {
              "type": "Microsoft.ApiManagement/service/namedValues",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}', parameters('apimServiceName'), 'MCPServerName')]",
              "properties": {
                "displayName": "MCPServerName",
                "value": "[parameters('mcpServerName')]",
                "secret": false
              },
              "dependsOn": [
                "apimService"
              ]
            },
            "oauthApi": {
              "type": "Microsoft.ApiManagement/service/apis",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}', parameters('apimServiceName'), 'oauth')]",
              "properties": {
                "displayName": "OAuth",
                "description": "OAuth 2.0 Authentication API",
                "subscriptionRequired": false,
                "path": "",
                "protocols": [
                  "https"
                ],
                "serviceUrl": "[format('{0}{1}/oauth2/v2.0', environment().authentication.loginEndpoint, reference('entraApp').outputs.entraAppTenantId.value)]"
              },
              "dependsOn": [
                "apimService",
                "entraApp"
              ]
            },
            "oauthAuthorizeOperation": {
              "type": "Microsoft.ApiManagement/service/apis/operations",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}/{2}', parameters('apimServiceName'), 'oauth', 'authorize')]",
              "properties": {
                "displayName": "Authorize",
                "method": "GET",
                "urlTemplate": "/authorize",
                "description": "OAuth 2.0 authorization endpoint"
              },
              "dependsOn": [
                "oauthApi"
              ]
            },
            "oauthAuthorizePolicy": {
              "type": "Microsoft.ApiManagement/service/apis/operations/policies",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}/{2}/{3}', parameters('apimServiceName'), 'oauth', 'authorize', 'policy')]",
              "properties": {
                "format": "rawxml",
                "value": "[variables('$fxv#0')]"
              },
              "dependsOn": [
                "oauthAuthorizeOperation"
              ]
            },
            "oauthTokenOperation": {
              "type": "Microsoft.ApiManagement/service/apis/operations",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}/{2}', parameters('apimServiceName'), 'oauth', 'token')]",
              "properties": {
                "displayName": "Token",
                "method": "POST",
                "urlTemplate": "/token",
                "description": "OAuth 2.0 token endpoint"
              },
              "dependsOn": [
                "oauthApi"
              ]
            },
            "oauthTokenPolicy": {
              "type": "Microsoft.ApiManagement/service/apis/operations/policies",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}/{2}/{3}', parameters('apimServiceName'), 'oauth', 'token', 'policy')]",
              "properties": {
                "format": "rawxml",
                "value": "[variables('$fxv#1')]"
              },
              "dependsOn": [
                "oauthTokenOperation"
              ]
            },
            "oauthCallbackOperation": {
              "type": "Microsoft.ApiManagement/service/apis/operations",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}/{2}', parameters('apimServiceName'), 'oauth', 'oauth-callback')]",
              "properties": {
                "displayName": "OAuth Callback",
                "method": "GET",
                "urlTemplate": "/oauth-callback",
                "description": "OAuth 2.0 callback endpoint to handle authorization code flow"
              },
              "dependsOn": [
                "oauthApi"
              ]
            },
            "oauthCallbackPolicy": {
              "type": "Microsoft.ApiManagement/service/apis/operations/policies",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}/{2}/{3}', parameters('apimServiceName'), 'oauth', 'oauth-callback', 'policy')]",
              "properties": {
                "format": "rawxml",
                "value": "[variables('$fxv#2')]"
              },
              "dependsOn": [
                "encryptionIVNamedValue",
                "encryptionKeyNamedValue",
                "oauthCallbackOperation"
              ]
            },
            "oauthRegisterOperation": {
              "type": "Microsoft.ApiManagement/service/apis/operations",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}/{2}', parameters('apimServiceName'), 'oauth', 'register')]",
              "properties": {
                "displayName": "Register",
                "method": "POST",
                "urlTemplate": "/register",
                "description": "OAuth 2.0 client registration endpoint"
              },
              "dependsOn": [
                "oauthApi"
              ]
            },
            "oauthRegisterPolicy": {
              "type": "Microsoft.ApiManagement/service/apis/operations/policies",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}/{2}/{3}', parameters('apimServiceName'), 'oauth', 'register', 'policy')]",
              "properties": {
                "format": "rawxml",
                "value": "[variables('$fxv#3')]"
              },
              "dependsOn": [
                "oauthRegisterOperation"
              ]
            },
            "oauthRegisterOptionsOperation": {
              "type": "Microsoft.ApiManagement/service/apis/operations",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}/{2}', parameters('apimServiceName'), 'oauth', 'register-options')]",
              "properties": {
                "displayName": "Register Options",
                "method": "OPTIONS",
                "urlTemplate": "/register",
                "description": "CORS preflight request handler for register endpoint"
              },
              "dependsOn": [
                "oauthApi"
              ]
            },
            "oauthRegisterOptionsPolicy": {
              "type": "Microsoft.ApiManagement/service/apis/operations/policies",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}/{2}/{3}', parameters('apimServiceName'), 'oauth', 'register-options', 'policy')]",
              "properties": {
                "format": "rawxml",
                "value": "[variables('$fxv#4')]"
              },
              "dependsOn": [
                "oauthRegisterOptionsOperation"
              ]
            },
            "oauthMetadataOptionsOperation": {
              "type": "Microsoft.ApiManagement/service/apis/operations",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}/{2}', parameters('apimServiceName'), 'oauth', 'oauthmetadata-options')]",
              "properties": {
                "displayName": "OAuth Metadata Options",
                "method": "OPTIONS",
                "urlTemplate": "/.well-known/oauth-authorization-server",
                "description": "CORS preflight request handler for OAuth metadata endpoint"
              },
              "dependsOn": [
                "oauthApi"
              ]
            },
            "oauthMetadataOptionsPolicy": {
              "type": "Microsoft.ApiManagement/service/apis/operations/policies",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}/{2}/{3}', parameters('apimServiceName'), 'oauth', 'oauthmetadata-options', 'policy')]",
              "properties": {
                "format": "rawxml",
                "value": "[variables('$fxv#5')]"
              },
              "dependsOn": [
                "oauthMetadataOptionsOperation"
              ]
            },
            "oauthMetadataGetOperation": {
              "type": "Microsoft.ApiManagement/service/apis/operations",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}/{2}', parameters('apimServiceName'), 'oauth', 'oauthmetadata-get')]",
              "properties": {
                "displayName": "OAuth Metadata Get",
                "method": "GET",
                "urlTemplate": "/.well-known/oauth-authorization-server",
                "description": "OAuth 2.0 metadata endpoint"
              },
              "dependsOn": [
                "oauthApi"
              ]
            },
            "oauthMetadataGetPolicy": {
              "type": "Microsoft.ApiManagement/service/apis/operations/policies",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}/{2}/{3}', parameters('apimServiceName'), 'oauth', 'oauthmetadata-get', 'policy')]",
              "properties": {
                "format": "rawxml",
                "value": "[variables('$fxv#6')]"
              },
              "dependsOn": [
                "oauthMetadataGetOperation"
              ]
            },
            "oauthConsentGetOperation": {
              "type": "Microsoft.ApiManagement/service/apis/operations",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}/{2}', parameters('apimServiceName'), 'oauth', 'consent-get')]",
              "properties": {
                "displayName": "Consent Page",
                "method": "GET",
                "urlTemplate": "/consent",
                "description": "Client consent page endpoint"
              },
              "dependsOn": [
                "oauthApi"
              ]
            },
            "oauthConsentGetPolicy": {
              "type": "Microsoft.ApiManagement/service/apis/operations/policies",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}/{2}/{3}', parameters('apimServiceName'), 'oauth', 'consent-get', 'policy')]",
              "properties": {
                "format": "rawxml",
                "value": "[variables('$fxv#7')]"
              },
              "dependsOn": [
                "oauthConsentGetOperation"
              ]
            },
            "oauthConsentPostOperation": {
              "type": "Microsoft.ApiManagement/service/apis/operations",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}/{2}', parameters('apimServiceName'), 'oauth', 'consent-post')]",
              "properties": {
                "displayName": "Consent Submission",
                "method": "POST",
                "urlTemplate": "/consent",
                "description": "Client consent submission endpoint"
              },
              "dependsOn": [
                "oauthApi"
              ]
            },
            "oauthConsentPostPolicy": {
              "type": "Microsoft.ApiManagement/service/apis/operations/policies",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}/{2}/{3}', parameters('apimServiceName'), 'oauth', 'consent-post', 'policy')]",
              "properties": {
                "format": "rawxml",
                "value": "[variables('$fxv#8')]"
              },
              "dependsOn": [
                "oauthConsentPostOperation"
              ]
            },
            "entraApp": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "entraApp",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "entraAppUniqueName": {
                    "value": "[parameters('entraAppUniqueName')]"
                  },
                  "entraAppDisplayName": {
                    "value": "[parameters('entraAppDisplayName')]"
                  },
                  "apimOauthCallback": {
                    "value": "[format('{0}/oauth-callback', reference('apimService').gatewayUrl)]"
                  },
                  "userAssignedIdentityPrincipleId": {
                    "value": "[parameters('entraAppUserAssignedIdentityPrincipleId')]"
                  },
                  "existingEntraAppId": {
                    "value": "[parameters('existingEntraAppId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.1-experimental",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_EXPERIMENTAL_WARNING": "This template uses ARM features that are experimental. Experimental features should be enabled for testing purposes only, as there are no guarantees about the quality or stability of these features. Do not enable these settings for any production usage, or your production environment may be subject to breaking.",
                    "_EXPERIMENTAL_FEATURES_ENABLED": [
                      "Extensibility"
                    ],
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "2284224736508070452"
                    }
                  },
                  "parameters": {
                    "entraAppUniqueName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Entra application"
                      }
                    },
                    "entraAppDisplayName": {
                      "type": "string",
                      "metadata": {
                        "description": "The display name of the Entra application"
                      }
                    },
                    "tenantId": {
                      "type": "string",
                      "defaultValue": "[tenant().tenantId]",
                      "metadata": {
                        "description": "Tenant ID where the application is registered"
                      }
                    },
                    "apimOauthCallback": {
                      "type": "string",
                      "metadata": {
                        "description": "The OAuth callback URL for the API Management service"
                      }
                    },
                    "userAssignedIdentityPrincipleId": {
                      "type": "string",
                      "metadata": {
                        "description": "The principle id of the user-assigned managed identity"
                      }
                    },
                    "existingEntraAppId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The pre-created Entra application client ID - must be provided for now"
                      }
                    }
                  },
                  "resources": {},
                  "outputs": {
                    "entraAppId": {
                      "type": "string",
                      "value": "[if(not(equals(parameters('existingEntraAppId'), '')), parameters('existingEntraAppId'), '6441e54f-8149-487b-aac4-3a55a049a362')]"
                    },
                    "entraAppTenantId": {
                      "type": "string",
                      "value": "[parameters('tenantId')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "apimService"
              ]
            }
          },
          "outputs": {
            "apiId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ApiManagement/service/apis', parameters('apimServiceName'), 'oauth')]"
            }
          }
        }
      },
      "dependsOn": [
        "apimService",
        "rg"
      ]
    },
    "mcpApiModule": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "mcpApiModule",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "apimServiceName": {
            "value": "[variables('apiManagementName')]"
          },
          "functionAppName": {
            "value": "[variables('functionAppName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.1-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "This template uses ARM features that are experimental. Experimental features should be enabled for testing purposes only, as there are no guarantees about the quality or stability of these features. Do not enable these settings for any production usage, or your production environment may be subject to breaking.",
            "_EXPERIMENTAL_FEATURES_ENABLED": [
              "Extensibility"
            ],
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "17907883431916232892"
            }
          },
          "parameters": {
            "apimServiceName": {
              "type": "string",
              "metadata": {
                "description": "The name of the API Management service"
              }
            },
            "functionAppName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Function App hosting the MCP endpoints"
              }
            }
          },
          "variables": {
            "$fxv#0": "<!--\r\n    MCP API POLICY\r\n    This policy applies to all operations in the MCP API.\r\n    It adds authorization header check for security.\r\n-->\r\n<policies>\r\n    <inbound>\r\n        <base />\r\n        <check-header name=\"Authorization\" failed-check-httpcode=\"401\" failed-check-error-message=\"Not authorized\" ignore-case=\"false\" />\r\n        <set-variable name=\"IV\" value=\"{{EncryptionIV}}\" />\r\n        <set-variable name=\"key\" value=\"{{EncryptionKey}}\" />\r\n        <set-variable name=\"decryptedSessionKey\" value=\"@{\r\n            // Retrieve the encrypted session key from the request header\r\n            string authHeader = context.Request.Headers.GetValueOrDefault(\"Authorization\");\r\n        \r\n            string encryptedSessionKey = authHeader.StartsWith(\"Bearer \") ? authHeader.Substring(7) : authHeader;\r\n            \r\n            // Decrypt the session key using AES\r\n            byte[] IV = Convert.FromBase64String((string)context.Variables[\"IV\"]);\r\n            byte[] key = Convert.FromBase64String((string)context.Variables[\"key\"]);\r\n            \r\n            byte[] encryptedBytes = Convert.FromBase64String(encryptedSessionKey);\r\n            byte[] decryptedBytes = encryptedBytes.Decrypt(\"Aes\", key, IV);\r\n            \r\n            return Encoding.UTF8.GetString(decryptedBytes);\r\n        }\" />\r\n        <cache-lookup-value key=\"@($\"EntraToken-{context.Variables.GetValueOrDefault(\"decryptedSessionKey\")}\")\" variable-name=\"accessToken\" />\r\n        \r\n        <choose>\r\n            <when condition=\"@(context.Variables.GetValueOrDefault(\"accessToken\") == null)\">\r\n                <return-response>\r\n                    <set-status code=\"401\" reason=\"Unauthorized\" />\r\n                    <set-header name=\"WWW-Authenticate\" exists-action=\"override\">\r\n                        <value>Bearer error=\"invalid_token\"</value>\r\n                    </set-header>\r\n                </return-response>\r\n            </when>\r\n        </choose>\r\n        \r\n        <set-header name=\"x-functions-key\" exists-action=\"override\">\r\n            <value>{{function-host-key}}</value>\r\n        </set-header>\r\n    </inbound>\r\n    <backend>\r\n        <base />\r\n    </backend>\r\n    <outbound>\r\n        <base />\r\n    </outbound>\r\n    <on-error>\r\n        <base />\r\n    </on-error>\r\n</policies>\r\n"
          },
          "resources": {
            "apimService": {
              "existing": true,
              "type": "Microsoft.ApiManagement/service",
              "apiVersion": "2023-05-01-preview",
              "name": "[parameters('apimServiceName')]"
            },
            "functionApp": {
              "existing": true,
              "type": "Microsoft.Web/sites",
              "apiVersion": "2023-12-01",
              "name": "[parameters('functionAppName')]"
            },
            "functionHostKeyNamedValue": {
              "type": "Microsoft.ApiManagement/service/namedValues",
              "apiVersion": "2023-05-01-preview",
              "name": "[format('{0}/{1}', parameters('apimServiceName'), 'function-host-key')]",
              "properties": {
                "displayName": "function-host-key",
                "secret": true,
                "value": "[listKeys(format('{0}/host/default', resourceId('Microsoft.Web/sites', parameters('functionAppName'))), '2023-12-01').masterKey]"
              },
              "dependsOn": [
                "apimService",
                "functionApp"
              ]
            },
            "mcpApi": {
              "type": "Microsoft.ApiManagement/service/apis",
              "apiVersion": "2023-05-01-preview",
              "name": "[format('{0}/{1}', parameters('apimServiceName'), 'mcp')]",
              "properties": {
                "displayName": "MCP API",
                "description": "Model Context Protocol API endpoints",
                "subscriptionRequired": false,
                "path": "mcp",
                "protocols": [
                  "https"
                ],
                "serviceUrl": "[format('https://{0}/runtime/webhooks/mcp', reference('functionApp').defaultHostName)]"
              },
              "dependsOn": [
                "apimService",
                "functionApp",
                "functionHostKeyNamedValue"
              ]
            },
            "mcpApiPolicy": {
              "type": "Microsoft.ApiManagement/service/apis/policies",
              "apiVersion": "2023-05-01-preview",
              "name": "[format('{0}/{1}/{2}', parameters('apimServiceName'), 'mcp', 'policy')]",
              "properties": {
                "format": "rawxml",
                "value": "[variables('$fxv#0')]"
              },
              "dependsOn": [
                "mcpApi"
              ]
            },
            "mcpSseOperation": {
              "type": "Microsoft.ApiManagement/service/apis/operations",
              "apiVersion": "2023-05-01-preview",
              "name": "[format('{0}/{1}/{2}', parameters('apimServiceName'), 'mcp', 'mcp-sse')]",
              "properties": {
                "displayName": "MCP SSE Endpoint",
                "method": "GET",
                "urlTemplate": "/sse",
                "description": "Server-Sent Events endpoint for MCP Server"
              },
              "dependsOn": [
                "mcpApi"
              ]
            },
            "mcpMessageOperation": {
              "type": "Microsoft.ApiManagement/service/apis/operations",
              "apiVersion": "2023-05-01-preview",
              "name": "[format('{0}/{1}/{2}', parameters('apimServiceName'), 'mcp', 'mcp-message')]",
              "properties": {
                "displayName": "MCP Message Endpoint",
                "method": "POST",
                "urlTemplate": "/message",
                "description": "Message endpoint for MCP Server"
              },
              "dependsOn": [
                "mcpApi"
              ]
            }
          },
          "outputs": {
            "apiId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ApiManagement/service/apis', parameters('apimServiceName'), 'mcp')]"
            }
          }
        }
      },
      "dependsOn": [
        "api",
        "apimService",
        "apiWithVnet",
        "oauthAPIModule",
        "rg"
      ]
    },
    "apiUserAssignedIdentity": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "apiUserAssignedIdentity",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "identityName": "[if(not(empty(parameters('apiUserAssignedIdentityName'))), createObject('value', parameters('apiUserAssignedIdentityName')), createObject('value', format('{0}api-{1}', variables('abbrs').managedIdentityUserAssignedIdentities, variables('resourceToken'))))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.1-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "This template uses ARM features that are experimental. Experimental features should be enabled for testing purposes only, as there are no guarantees about the quality or stability of these features. Do not enable these settings for any production usage, or your production environment may be subject to breaking.",
            "_EXPERIMENTAL_FEATURES_ENABLED": [
              "Extensibility"
            ],
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "10442426509339802394"
            }
          },
          "parameters": {
            "identityName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": {
            "userAssignedIdentity": {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-07-31-preview",
              "name": "[parameters('identityName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            }
          },
          "outputs": {
            "identityId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName'))]"
            },
            "identityName": {
              "type": "string",
              "value": "[parameters('identityName')]"
            },
            "identityPrincipalId": {
              "type": "string",
              "value": "[reference('userAssignedIdentity').principalId]"
            },
            "identityClientId": {
              "type": "string",
              "value": "[reference('userAssignedIdentity').clientId]"
            }
          }
        }
      },
      "dependsOn": [
        "rg"
      ]
    },
    "appServicePlan": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "appserviceplan",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": "[if(not(empty(parameters('appServicePlanName'))), createObject('value', parameters('appServicePlanName')), createObject('value', format('{0}{1}', variables('abbrs').webServerFarms, variables('resourceToken'))))]",
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "sku": {
            "value": {
              "name": "FC1",
              "tier": "FlexConsumption"
            }
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.1-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "This template uses ARM features that are experimental. Experimental features should be enabled for testing purposes only, as there are no guarantees about the quality or stability of these features. Do not enable these settings for any production usage, or your production environment may be subject to breaking.",
            "_EXPERIMENTAL_FEATURES_ENABLED": [
              "Extensibility"
            ],
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "7199032645194660460"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "kind": {
              "type": "string",
              "defaultValue": ""
            },
            "reserved": {
              "type": "bool",
              "defaultValue": true
            },
            "sku": {
              "type": "object"
            }
          },
          "resources": {
            "appServicePlan": {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2023-12-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": "[parameters('sku')]",
              "kind": "[parameters('kind')]",
              "properties": {
                "reserved": "[parameters('reserved')]"
              }
            }
          },
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/serverfarms', parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "rg"
      ]
    },
    "api": {
      "condition": "[not(parameters('vnetEnabled'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "api",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('functionAppName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "applicationInsightsName": {
            "value": "[reference('monitoring').outputs.applicationInsightsName.value]"
          },
          "appServicePlanId": {
            "value": "[reference('appServicePlan').outputs.id.value]"
          },
          "runtimeName": {
            "value": "python"
          },
          "runtimeVersion": {
            "value": "3.11"
          },
          "storageAccountName": {
            "value": "[reference('storage').outputs.name.value]"
          },
          "storageAccountPrimaryEndpoints": {
            "value": "[reference('storage').outputs.primaryEndpoints.value]"
          },
          "deploymentStorageContainerName": {
            "value": "[variables('deploymentStorageContainerName')]"
          },
          "identityId": {
            "value": "[reference('apiUserAssignedIdentity').outputs.identityId.value]"
          },
          "identityClientId": {
            "value": "[reference('apiUserAssignedIdentity').outputs.identityClientId.value]"
          },
          "appSettings": {
            "value": {}
          },
          "virtualNetworkSubnetId": {
            "value": ""
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.1-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "This template uses ARM features that are experimental. Experimental features should be enabled for testing purposes only, as there are no guarantees about the quality or stability of these features. Do not enable these settings for any production usage, or your production environment may be subject to breaking.",
            "_EXPERIMENTAL_FEATURES_ENABLED": [
              "Extensibility"
            ],
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "7781434090416756834"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "applicationInsightsName": {
              "type": "string",
              "minLength": 1
            },
            "appServicePlanId": {
              "type": "string"
            },
            "appSettings": {
              "type": "object",
              "defaultValue": {}
            },
            "runtimeName": {
              "type": "string"
            },
            "runtimeVersion": {
              "type": "string"
            },
            "serviceName": {
              "type": "string",
              "defaultValue": "api"
            },
            "storageAccountName": {
              "type": "string"
            },
            "deploymentStorageContainerName": {
              "type": "string"
            },
            "storageAccountPrimaryEndpoints": {
              "type": "object"
            },
            "virtualNetworkSubnetId": {
              "type": "string",
              "defaultValue": ""
            },
            "instanceMemoryMB": {
              "type": "int",
              "defaultValue": 2048
            },
            "maximumInstanceCount": {
              "type": "int",
              "defaultValue": 100
            },
            "identityId": {
              "type": "string",
              "defaultValue": ""
            },
            "identityClientId": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "applicationInsightsIdentity": "[format('ClientId={0};Authorization=AAD', parameters('identityClientId'))]"
          },
          "resources": {
            "api": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-functions-module', parameters('serviceName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[union(parameters('tags'), createObject('azd-service-name', parameters('serviceName')))]"
                  },
                  "identityType": {
                    "value": "UserAssigned"
                  },
                  "identityId": {
                    "value": "[parameters('identityId')]"
                  },
                  "appSettings": {
                    "value": "[union(parameters('appSettings'), createObject('AzureWebJobsStorage__clientId', parameters('identityClientId'), 'APPLICATIONINSIGHTS_AUTHENTICATION_STRING', variables('applicationInsightsIdentity')))]"
                  },
                  "applicationInsightsName": {
                    "value": "[parameters('applicationInsightsName')]"
                  },
                  "appServicePlanId": {
                    "value": "[parameters('appServicePlanId')]"
                  },
                  "runtimeName": {
                    "value": "[parameters('runtimeName')]"
                  },
                  "runtimeVersion": {
                    "value": "[parameters('runtimeVersion')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "storageAccountPrimaryEndpoints": {
                    "value": "[parameters('storageAccountPrimaryEndpoints')]"
                  },
                  "deploymentStorageContainerName": {
                    "value": "[parameters('deploymentStorageContainerName')]"
                  },
                  "virtualNetworkSubnetId": {
                    "value": "[parameters('virtualNetworkSubnetId')]"
                  },
                  "instanceMemoryMB": {
                    "value": "[parameters('instanceMemoryMB')]"
                  },
                  "maximumInstanceCount": {
                    "value": "[parameters('maximumInstanceCount')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.1-experimental",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_EXPERIMENTAL_WARNING": "This template uses ARM features that are experimental. Experimental features should be enabled for testing purposes only, as there are no guarantees about the quality or stability of these features. Do not enable these settings for any production usage, or your production environment may be subject to breaking.",
                    "_EXPERIMENTAL_FEATURES_ENABLED": [
                      "Extensibility"
                    ],
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "13150241913873019334"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "applicationInsightsName": {
                      "type": "string",
                      "minLength": 1
                    },
                    "appServicePlanId": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "storageAccountPrimaryEndpoints": {
                      "type": "object"
                    },
                    "virtualNetworkSubnetId": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "identityType": {
                      "type": "string",
                      "allowedValues": [
                        "SystemAssigned",
                        "UserAssigned"
                      ]
                    },
                    "identityId": {
                      "type": "string",
                      "metadata": {
                        "description": "User assigned identity name"
                      }
                    },
                    "runtimeName": {
                      "type": "string",
                      "allowedValues": [
                        "dotnet-isolated",
                        "node",
                        "python",
                        "java",
                        "powershell",
                        "custom"
                      ]
                    },
                    "runtimeVersion": {
                      "type": "string",
                      "allowedValues": [
                        "3.10",
                        "3.11",
                        "7.4",
                        "8.0",
                        "10",
                        "11",
                        "17",
                        "20"
                      ]
                    },
                    "kind": {
                      "type": "string",
                      "defaultValue": "functionapp,linux"
                    },
                    "appSettings": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "instanceMemoryMB": {
                      "type": "int",
                      "defaultValue": 2048
                    },
                    "maximumInstanceCount": {
                      "type": "int",
                      "defaultValue": 100
                    },
                    "deploymentStorageContainerName": {
                      "type": "string"
                    }
                  },
                  "resources": {
                    "functions::configAppSettings": {
                      "type": "Microsoft.Web/sites/config",
                      "apiVersion": "2023-12-01",
                      "name": "[format('{0}/{1}', parameters('name'), 'appsettings')]",
                      "properties": "[union(parameters('appSettings'), createObject('AzureWebJobsStorage__accountName', parameters('storageAccountName'), 'AzureWebJobsStorage__credential', 'managedidentity', 'AzureWebJobsStorage__blobServiceUri', parameters('storageAccountPrimaryEndpoints').blob, 'AzureWebJobsStorage__queueServiceUri', parameters('storageAccountPrimaryEndpoints').queue, 'AzureWebJobsStorage__tableServiceUri', parameters('storageAccountPrimaryEndpoints').table), if(empty(parameters('applicationInsightsName')), createObject(), createObject('APPLICATIONINSIGHTS_CONNECTION_STRING', reference('applicationInsights').ConnectionString)))]",
                      "dependsOn": [
                        "applicationInsights",
                        "functions",
                        "stg"
                      ]
                    },
                    "stg": {
                      "existing": true,
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2022-09-01",
                      "name": "[parameters('storageAccountName')]"
                    },
                    "functions": {
                      "type": "Microsoft.Web/sites",
                      "apiVersion": "2023-12-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "kind": "[parameters('kind')]",
                      "identity": {
                        "type": "[parameters('identityType')]",
                        "userAssignedIdentities": {
                          "[format('{0}', parameters('identityId'))]": {}
                        }
                      },
                      "properties": {
                        "serverFarmId": "[parameters('appServicePlanId')]",
                        "functionAppConfig": {
                          "deployment": {
                            "storage": {
                              "type": "blobContainer",
                              "value": "[format('{0}{1}', parameters('storageAccountPrimaryEndpoints').blob, parameters('deploymentStorageContainerName'))]",
                              "authentication": {
                                "type": "[if(equals(parameters('identityType'), 'SystemAssigned'), 'SystemAssignedIdentity', 'UserAssignedIdentity')]",
                                "userAssignedIdentityResourceId": "[if(equals(parameters('identityType'), 'UserAssigned'), parameters('identityId'), '')]"
                              }
                            }
                          },
                          "scaleAndConcurrency": {
                            "instanceMemoryMB": "[parameters('instanceMemoryMB')]",
                            "maximumInstanceCount": "[parameters('maximumInstanceCount')]"
                          },
                          "runtime": {
                            "name": "[parameters('runtimeName')]",
                            "version": "[parameters('runtimeVersion')]"
                          }
                        },
                        "virtualNetworkSubnetId": "[if(not(empty(parameters('virtualNetworkSubnetId'))), parameters('virtualNetworkSubnetId'), null())]"
                      }
                    },
                    "applicationInsights": {
                      "existing": true,
                      "type": "Microsoft.Insights/components",
                      "apiVersion": "2020-02-02",
                      "name": "[parameters('applicationInsightsName')]"
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    },
                    "uri": {
                      "type": "string",
                      "value": "[format('https://{0}', reference('functions').defaultHostName)]"
                    },
                    "identityPrincipalId": {
                      "type": "string",
                      "value": "[if(equals(parameters('identityType'), 'SystemAssigned'), reference('functions', '2023-12-01', 'full').identity.principalId, '')]"
                    }
                  }
                }
              }
            }
          },
          "outputs": {
            "SERVICE_API_NAME": {
              "type": "string",
              "value": "[reference('api').outputs.name.value]"
            },
            "SERVICE_API_IDENTITY_PRINCIPAL_ID": {
              "type": "string",
              "value": "[reference('api').outputs.identityPrincipalId.value]"
            }
          }
        }
      },
      "dependsOn": [
        "apiUserAssignedIdentity",
        "appServicePlan",
        "monitoring",
        "rg",
        "storage"
      ]
    },
    "apiWithVnet": {
      "condition": "[parameters('vnetEnabled')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "api-with-vnet",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('functionAppName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "applicationInsightsName": {
            "value": "[reference('monitoring').outputs.applicationInsightsName.value]"
          },
          "appServicePlanId": {
            "value": "[reference('appServicePlan').outputs.id.value]"
          },
          "runtimeName": {
            "value": "python"
          },
          "runtimeVersion": {
            "value": "3.11"
          },
          "storageAccountName": {
            "value": "[reference('storage').outputs.name.value]"
          },
          "storageAccountPrimaryEndpoints": {
            "value": "[reference('storage').outputs.primaryEndpoints.value]"
          },
          "deploymentStorageContainerName": {
            "value": "[variables('deploymentStorageContainerName')]"
          },
          "identityId": {
            "value": "[reference('apiUserAssignedIdentity').outputs.identityId.value]"
          },
          "identityClientId": {
            "value": "[reference('apiUserAssignedIdentity').outputs.identityClientId.value]"
          },
          "appSettings": {
            "value": {}
          },
          "virtualNetworkSubnetId": {
            "value": "[format('{0}/providers/Microsoft.Network/virtualNetworks/{1}/subnets/{2}', subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), variables('serviceVirtualNetworkName'), variables('serviceVirtualNetworkAppSubnetName'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.1-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "This template uses ARM features that are experimental. Experimental features should be enabled for testing purposes only, as there are no guarantees about the quality or stability of these features. Do not enable these settings for any production usage, or your production environment may be subject to breaking.",
            "_EXPERIMENTAL_FEATURES_ENABLED": [
              "Extensibility"
            ],
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "7781434090416756834"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "applicationInsightsName": {
              "type": "string",
              "minLength": 1
            },
            "appServicePlanId": {
              "type": "string"
            },
            "appSettings": {
              "type": "object",
              "defaultValue": {}
            },
            "runtimeName": {
              "type": "string"
            },
            "runtimeVersion": {
              "type": "string"
            },
            "serviceName": {
              "type": "string",
              "defaultValue": "api"
            },
            "storageAccountName": {
              "type": "string"
            },
            "deploymentStorageContainerName": {
              "type": "string"
            },
            "storageAccountPrimaryEndpoints": {
              "type": "object"
            },
            "virtualNetworkSubnetId": {
              "type": "string",
              "defaultValue": ""
            },
            "instanceMemoryMB": {
              "type": "int",
              "defaultValue": 2048
            },
            "maximumInstanceCount": {
              "type": "int",
              "defaultValue": 100
            },
            "identityId": {
              "type": "string",
              "defaultValue": ""
            },
            "identityClientId": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "applicationInsightsIdentity": "[format('ClientId={0};Authorization=AAD', parameters('identityClientId'))]"
          },
          "resources": {
            "api": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-functions-module', parameters('serviceName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[union(parameters('tags'), createObject('azd-service-name', parameters('serviceName')))]"
                  },
                  "identityType": {
                    "value": "UserAssigned"
                  },
                  "identityId": {
                    "value": "[parameters('identityId')]"
                  },
                  "appSettings": {
                    "value": "[union(parameters('appSettings'), createObject('AzureWebJobsStorage__clientId', parameters('identityClientId'), 'APPLICATIONINSIGHTS_AUTHENTICATION_STRING', variables('applicationInsightsIdentity')))]"
                  },
                  "applicationInsightsName": {
                    "value": "[parameters('applicationInsightsName')]"
                  },
                  "appServicePlanId": {
                    "value": "[parameters('appServicePlanId')]"
                  },
                  "runtimeName": {
                    "value": "[parameters('runtimeName')]"
                  },
                  "runtimeVersion": {
                    "value": "[parameters('runtimeVersion')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "storageAccountPrimaryEndpoints": {
                    "value": "[parameters('storageAccountPrimaryEndpoints')]"
                  },
                  "deploymentStorageContainerName": {
                    "value": "[parameters('deploymentStorageContainerName')]"
                  },
                  "virtualNetworkSubnetId": {
                    "value": "[parameters('virtualNetworkSubnetId')]"
                  },
                  "instanceMemoryMB": {
                    "value": "[parameters('instanceMemoryMB')]"
                  },
                  "maximumInstanceCount": {
                    "value": "[parameters('maximumInstanceCount')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.1-experimental",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_EXPERIMENTAL_WARNING": "This template uses ARM features that are experimental. Experimental features should be enabled for testing purposes only, as there are no guarantees about the quality or stability of these features. Do not enable these settings for any production usage, or your production environment may be subject to breaking.",
                    "_EXPERIMENTAL_FEATURES_ENABLED": [
                      "Extensibility"
                    ],
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "13150241913873019334"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "applicationInsightsName": {
                      "type": "string",
                      "minLength": 1
                    },
                    "appServicePlanId": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "storageAccountPrimaryEndpoints": {
                      "type": "object"
                    },
                    "virtualNetworkSubnetId": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "identityType": {
                      "type": "string",
                      "allowedValues": [
                        "SystemAssigned",
                        "UserAssigned"
                      ]
                    },
                    "identityId": {
                      "type": "string",
                      "metadata": {
                        "description": "User assigned identity name"
                      }
                    },
                    "runtimeName": {
                      "type": "string",
                      "allowedValues": [
                        "dotnet-isolated",
                        "node",
                        "python",
                        "java",
                        "powershell",
                        "custom"
                      ]
                    },
                    "runtimeVersion": {
                      "type": "string",
                      "allowedValues": [
                        "3.10",
                        "3.11",
                        "7.4",
                        "8.0",
                        "10",
                        "11",
                        "17",
                        "20"
                      ]
                    },
                    "kind": {
                      "type": "string",
                      "defaultValue": "functionapp,linux"
                    },
                    "appSettings": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "instanceMemoryMB": {
                      "type": "int",
                      "defaultValue": 2048
                    },
                    "maximumInstanceCount": {
                      "type": "int",
                      "defaultValue": 100
                    },
                    "deploymentStorageContainerName": {
                      "type": "string"
                    }
                  },
                  "resources": {
                    "functions::configAppSettings": {
                      "type": "Microsoft.Web/sites/config",
                      "apiVersion": "2023-12-01",
                      "name": "[format('{0}/{1}', parameters('name'), 'appsettings')]",
                      "properties": "[union(parameters('appSettings'), createObject('AzureWebJobsStorage__accountName', parameters('storageAccountName'), 'AzureWebJobsStorage__credential', 'managedidentity', 'AzureWebJobsStorage__blobServiceUri', parameters('storageAccountPrimaryEndpoints').blob, 'AzureWebJobsStorage__queueServiceUri', parameters('storageAccountPrimaryEndpoints').queue, 'AzureWebJobsStorage__tableServiceUri', parameters('storageAccountPrimaryEndpoints').table), if(empty(parameters('applicationInsightsName')), createObject(), createObject('APPLICATIONINSIGHTS_CONNECTION_STRING', reference('applicationInsights').ConnectionString)))]",
                      "dependsOn": [
                        "applicationInsights",
                        "functions",
                        "stg"
                      ]
                    },
                    "stg": {
                      "existing": true,
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2022-09-01",
                      "name": "[parameters('storageAccountName')]"
                    },
                    "functions": {
                      "type": "Microsoft.Web/sites",
                      "apiVersion": "2023-12-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "kind": "[parameters('kind')]",
                      "identity": {
                        "type": "[parameters('identityType')]",
                        "userAssignedIdentities": {
                          "[format('{0}', parameters('identityId'))]": {}
                        }
                      },
                      "properties": {
                        "serverFarmId": "[parameters('appServicePlanId')]",
                        "functionAppConfig": {
                          "deployment": {
                            "storage": {
                              "type": "blobContainer",
                              "value": "[format('{0}{1}', parameters('storageAccountPrimaryEndpoints').blob, parameters('deploymentStorageContainerName'))]",
                              "authentication": {
                                "type": "[if(equals(parameters('identityType'), 'SystemAssigned'), 'SystemAssignedIdentity', 'UserAssignedIdentity')]",
                                "userAssignedIdentityResourceId": "[if(equals(parameters('identityType'), 'UserAssigned'), parameters('identityId'), '')]"
                              }
                            }
                          },
                          "scaleAndConcurrency": {
                            "instanceMemoryMB": "[parameters('instanceMemoryMB')]",
                            "maximumInstanceCount": "[parameters('maximumInstanceCount')]"
                          },
                          "runtime": {
                            "name": "[parameters('runtimeName')]",
                            "version": "[parameters('runtimeVersion')]"
                          }
                        },
                        "virtualNetworkSubnetId": "[if(not(empty(parameters('virtualNetworkSubnetId'))), parameters('virtualNetworkSubnetId'), null())]"
                      }
                    },
                    "applicationInsights": {
                      "existing": true,
                      "type": "Microsoft.Insights/components",
                      "apiVersion": "2020-02-02",
                      "name": "[parameters('applicationInsightsName')]"
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    },
                    "uri": {
                      "type": "string",
                      "value": "[format('https://{0}', reference('functions').defaultHostName)]"
                    },
                    "identityPrincipalId": {
                      "type": "string",
                      "value": "[if(equals(parameters('identityType'), 'SystemAssigned'), reference('functions', '2023-12-01', 'full').identity.principalId, '')]"
                    }
                  }
                }
              }
            }
          },
          "outputs": {
            "SERVICE_API_NAME": {
              "type": "string",
              "value": "[reference('api').outputs.name.value]"
            },
            "SERVICE_API_IDENTITY_PRINCIPAL_ID": {
              "type": "string",
              "value": "[reference('api').outputs.identityPrincipalId.value]"
            }
          }
        }
      },
      "dependsOn": [
        "apiUserAssignedIdentity",
        "appServicePlan",
        "monitoring",
        "rg",
        "storage"
      ]
    },
    "storage": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "storage",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": "[if(not(empty(parameters('storageAccountName'))), createObject('value', parameters('storageAccountName')), createObject('value', format('{0}{1}', variables('abbrs').storageStorageAccounts, variables('resourceToken'))))]",
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "containers": {
            "value": [
              {
                "name": "[variables('deploymentStorageContainerName')]"
              },
              {
                "name": "snippets"
              }
            ]
          },
          "publicNetworkAccess": "[if(parameters('vnetEnabled'), createObject('value', 'Disabled'), createObject('value', 'Enabled'))]",
          "networkAcls": "[if(not(parameters('vnetEnabled')), createObject('value', createObject()), createObject('value', createObject('defaultAction', 'Deny')))]",
          "allowSharedKeyAccess": {
            "value": true
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.1-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "This template uses ARM features that are experimental. Experimental features should be enabled for testing purposes only, as there are no guarantees about the quality or stability of these features. Do not enable these settings for any production usage, or your production environment may be subject to breaking.",
            "_EXPERIMENTAL_FEATURES_ENABLED": [
              "Extensibility"
            ],
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "4456596093947429742"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "allowBlobPublicAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ]
            },
            "containers": {
              "type": "array",
              "defaultValue": []
            },
            "kind": {
              "type": "string",
              "defaultValue": "StorageV2"
            },
            "minimumTlsVersion": {
              "type": "string",
              "defaultValue": "TLS1_2"
            },
            "sku": {
              "type": "object",
              "defaultValue": {
                "name": "Standard_LRS"
              }
            },
            "networkAcls": {
              "type": "object",
              "defaultValue": {
                "bypass": "AzureServices",
                "defaultAction": "Allow"
              }
            },
            "allowSharedKeyAccess": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Controls whether Shared Key authorization is permitted. Leave disabled to enforce managed identity only access."
              }
            }
          },
          "resources": {
            "storage::blobServices::container": {
              "copy": {
                "name": "container",
                "count": "[length(parameters('containers'))]"
              },
              "condition": "[not(empty(parameters('containers')))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}/{2}', parameters('name'), 'default', parameters('containers')[copyIndex()].name)]",
              "properties": {
                "publicAccess": "[coalesce(tryGet(parameters('containers')[copyIndex()], 'publicAccess'), 'None')]"
              },
              "dependsOn": [
                "storage::blobServices"
              ]
            },
            "storage::blobServices": {
              "condition": "[not(empty(parameters('containers')))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}', parameters('name'), 'default')]",
              "dependsOn": [
                "storage"
              ]
            },
            "storage": {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2023-01-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "[parameters('kind')]",
              "sku": "[parameters('sku')]",
              "properties": {
                "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
                "allowBlobPublicAccess": "[parameters('allowBlobPublicAccess')]",
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                "allowSharedKeyAccess": "[parameters('allowSharedKeyAccess')]",
                "networkAcls": "[parameters('networkAcls')]"
              }
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "primaryEndpoints": {
              "type": "object",
              "value": "[reference('storage').primaryEndpoints]"
            }
          }
        }
      },
      "dependsOn": [
        "rg"
      ]
    },
    "blobRoleAssignmentApi": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "blobRoleAssignmentapi",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[reference('storage').outputs.name.value]"
          },
          "roleDefinitionID": {
            "value": "[variables('StorageBlobDataOwner')]"
          },
          "principalID": {
            "value": "[reference('apiUserAssignedIdentity').outputs.identityPrincipalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.1-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "This template uses ARM features that are experimental. Experimental features should be enabled for testing purposes only, as there are no guarantees about the quality or stability of these features. Do not enable these settings for any production usage, or your production environment may be subject to breaking.",
            "_EXPERIMENTAL_FEATURES_ENABLED": [
              "Extensibility"
            ],
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "17837289506947700335"
            }
          },
          "parameters": {
            "principalID": {
              "type": "string"
            },
            "roleDefinitionID": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            }
          },
          "resources": {
            "storageAccount": {
              "existing": true,
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-09-01",
              "name": "[parameters('storageAccountName')]"
            },
            "storageRoleAssignment": {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('principalID'), parameters('roleDefinitionID'))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionID'))]",
                "principalId": "[parameters('principalID')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "storageAccount"
              ]
            }
          },
          "outputs": {
            "ROLE_ASSIGNMENT_NAME": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('principalID'), parameters('roleDefinitionID'))]"
            }
          }
        }
      },
      "dependsOn": [
        "apiUserAssignedIdentity",
        "rg",
        "storage"
      ]
    },
    "queueRoleAssignmentApi": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "queueRoleAssignmentapi",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[reference('storage').outputs.name.value]"
          },
          "roleDefinitionID": {
            "value": "[variables('StorageQueueDataContributor')]"
          },
          "principalID": {
            "value": "[reference('apiUserAssignedIdentity').outputs.identityPrincipalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.1-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "This template uses ARM features that are experimental. Experimental features should be enabled for testing purposes only, as there are no guarantees about the quality or stability of these features. Do not enable these settings for any production usage, or your production environment may be subject to breaking.",
            "_EXPERIMENTAL_FEATURES_ENABLED": [
              "Extensibility"
            ],
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "17837289506947700335"
            }
          },
          "parameters": {
            "principalID": {
              "type": "string"
            },
            "roleDefinitionID": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            }
          },
          "resources": {
            "storageAccount": {
              "existing": true,
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-09-01",
              "name": "[parameters('storageAccountName')]"
            },
            "storageRoleAssignment": {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('principalID'), parameters('roleDefinitionID'))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionID'))]",
                "principalId": "[parameters('principalID')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "storageAccount"
              ]
            }
          },
          "outputs": {
            "ROLE_ASSIGNMENT_NAME": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('principalID'), parameters('roleDefinitionID'))]"
            }
          }
        }
      },
      "dependsOn": [
        "apiUserAssignedIdentity",
        "rg",
        "storage"
      ]
    },
    "serviceVirtualNetwork": {
      "condition": "[parameters('vnetEnabled')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "serviceVirtualNetwork",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "vNetName": {
            "value": "[variables('serviceVirtualNetworkName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.1-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "This template uses ARM features that are experimental. Experimental features should be enabled for testing purposes only, as there are no guarantees about the quality or stability of these features. Do not enable these settings for any production usage, or your production environment may be subject to breaking.",
            "_EXPERIMENTAL_FEATURES_ENABLED": [
              "Extensibility"
            ],
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "653757879319854353"
            }
          },
          "parameters": {
            "vNetName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the virtual network."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Specifies the location."
              }
            },
            "peSubnetName": {
              "type": "string",
              "defaultValue": "private-endpoints-subnet",
              "metadata": {
                "description": "Specifies the name of the subnet for the Service Bus private endpoint."
              }
            },
            "appSubnetName": {
              "type": "string",
              "defaultValue": "app",
              "metadata": {
                "description": "Specifies the name of the subnet for Function App virtual network integration."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": {
            "virtualNetwork": {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2023-05-01",
              "name": "[parameters('vNetName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "10.0.0.0/16"
                  ]
                },
                "encryption": {
                  "enabled": false,
                  "enforcement": "AllowUnencrypted"
                },
                "subnets": [
                  {
                    "name": "[parameters('peSubnetName')]",
                    "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vNetName'), 'private-endpoints-subnet')]",
                    "properties": {
                      "addressPrefixes": [
                        "10.0.1.0/24"
                      ],
                      "delegations": [],
                      "privateEndpointNetworkPolicies": "Disabled",
                      "privateLinkServiceNetworkPolicies": "Enabled"
                    },
                    "type": "Microsoft.Network/virtualNetworks/subnets"
                  },
                  {
                    "name": "[parameters('appSubnetName')]",
                    "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vNetName'), 'app')]",
                    "properties": {
                      "addressPrefixes": [
                        "10.0.2.0/24"
                      ],
                      "delegations": [
                        {
                          "name": "delegation",
                          "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets/delegations', parameters('vNetName'), 'app', 'delegation')]",
                          "properties": {
                            "serviceName": "Microsoft.App/environments"
                          },
                          "type": "Microsoft.Network/virtualNetworks/subnets/delegations"
                        }
                      ],
                      "privateEndpointNetworkPolicies": "Disabled",
                      "privateLinkServiceNetworkPolicies": "Enabled"
                    },
                    "type": "Microsoft.Network/virtualNetworks/subnets"
                  }
                ],
                "virtualNetworkPeerings": [],
                "enableDdosProtection": false
              }
            }
          },
          "outputs": {
            "peSubnetName": {
              "type": "string",
              "value": "[reference('virtualNetwork').subnets[0].name]"
            },
            "peSubnetID": {
              "type": "string",
              "value": "[reference('virtualNetwork').subnets[0].id]"
            },
            "appSubnetName": {
              "type": "string",
              "value": "[reference('virtualNetwork').subnets[1].name]"
            },
            "appSubnetID": {
              "type": "string",
              "value": "[reference('virtualNetwork').subnets[1].id]"
            }
          }
        }
      },
      "dependsOn": [
        "rg"
      ]
    },
    "storagePrivateEndpoint": {
      "condition": "[parameters('vnetEnabled')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "servicePrivateEndpoint",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "virtualNetworkName": {
            "value": "[variables('serviceVirtualNetworkName')]"
          },
          "subnetName": "[if(parameters('vnetEnabled'), createObject('value', variables('serviceVirtualNetworkPrivateEndpointSubnetName')), createObject('value', ''))]",
          "resourceName": {
            "value": "[reference('storage').outputs.name.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.1-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "This template uses ARM features that are experimental. Experimental features should be enabled for testing purposes only, as there are no guarantees about the quality or stability of these features. Do not enable these settings for any production usage, or your production environment may be subject to breaking.",
            "_EXPERIMENTAL_FEATURES_ENABLED": [
              "Extensibility"
            ],
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "1033442020867061602"
            }
          },
          "parameters": {
            "virtualNetworkName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the virtual network."
              }
            },
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the subnet which contains the virtual machine."
              }
            },
            "resourceName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the resource name of the Storage resource with an endpoint."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Specifies the location."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "variables": {
            "blobPrivateDNSZoneName": "[format('privatelink.blob.{0}', environment().suffixes.storage)]",
            "blobPrivateDnsZoneVirtualNetworkLinkName": "[format('{0}-blob-link-{1}', parameters('resourceName'), take(toLower(uniqueString(parameters('resourceName'), parameters('virtualNetworkName'))), 4))]",
            "queuePrivateDNSZoneName": "[format('privatelink.queue.{0}', environment().suffixes.storage)]",
            "queuePrivateDnsZoneVirtualNetworkLinkName": "[format('{0}-queue-link-{1}', parameters('resourceName'), take(toLower(uniqueString(parameters('resourceName'), parameters('virtualNetworkName'))), 4))]"
          },
          "resources": {
            "vnet": {
              "existing": true,
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2021-08-01",
              "name": "[parameters('virtualNetworkName')]"
            },
            "storageAccount": {
              "existing": true,
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-09-01",
              "name": "[parameters('resourceName')]"
            },
            "blobPrivateDnsZone": {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[variables('blobPrivateDNSZoneName')]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {},
              "dependsOn": [
                "vnet"
              ]
            },
            "queuePrivateDnsZone": {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[variables('queuePrivateDNSZoneName')]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {},
              "dependsOn": [
                "vnet"
              ]
            },
            "blobPrivateDnsZoneVirtualNetworkLink": {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', variables('blobPrivateDNSZoneName'), variables('blobPrivateDnsZoneVirtualNetworkLinkName'))]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                }
              },
              "dependsOn": [
                "blobPrivateDnsZone",
                "vnet"
              ]
            },
            "queuePrivateDnsZoneVirtualNetworkLink": {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', variables('queuePrivateDNSZoneName'), variables('queuePrivateDnsZoneVirtualNetworkLinkName'))]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                }
              },
              "dependsOn": [
                "queuePrivateDnsZone",
                "vnet"
              ]
            },
            "blobPrivateEndpoint": {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-08-01",
              "name": "blob-private-endpoint",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "privateLinkServiceConnections": [
                  {
                    "name": "blobPrivateLinkConnection",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('resourceName'))]",
                      "groupIds": [
                        "blob"
                      ]
                    }
                  }
                ],
                "subnet": {
                  "id": "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), parameters('subnetName'))]"
                }
              },
              "dependsOn": [
                "storageAccount",
                "vnet"
              ]
            },
            "blobPrivateDnsZoneGroupName": {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2022-01-01",
              "name": "[format('{0}/{1}', 'blob-private-endpoint', 'blobPrivateDnsZoneGroup')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "storageBlobARecord",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('blobPrivateDNSZoneName'))]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "blobPrivateDnsZone",
                "blobPrivateEndpoint"
              ]
            },
            "queuePrivateEndpoint": {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-08-01",
              "name": "queue-private-endpoint",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "privateLinkServiceConnections": [
                  {
                    "name": "queuePrivateLinkConnection",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('resourceName'))]",
                      "groupIds": [
                        "queue"
                      ]
                    }
                  }
                ],
                "subnet": {
                  "id": "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), parameters('subnetName'))]"
                }
              },
              "dependsOn": [
                "storageAccount",
                "vnet"
              ]
            },
            "queuePrivateDnsZoneGroupName": {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2022-01-01",
              "name": "[format('{0}/{1}', 'queue-private-endpoint', 'queuePrivateDnsZoneGroup')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "storageQueueARecord",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('queuePrivateDNSZoneName'))]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "queuePrivateDnsZone",
                "queuePrivateEndpoint"
              ]
            }
          }
        }
      },
      "dependsOn": [
        "rg",
        "serviceVirtualNetwork",
        "storage"
      ]
    },
    "monitoring": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "monitoring",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "logAnalyticsName": "[if(not(empty(parameters('logAnalyticsName'))), createObject('value', parameters('logAnalyticsName')), createObject('value', format('{0}{1}', variables('abbrs').operationalInsightsWorkspaces, variables('resourceToken'))))]",
          "applicationInsightsName": "[if(not(empty(parameters('applicationInsightsName'))), createObject('value', parameters('applicationInsightsName')), createObject('value', format('{0}{1}', variables('abbrs').insightsComponents, variables('resourceToken'))))]",
          "disableLocalAuth": {
            "value": "[parameters('disableLocalAuth')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.1-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "This template uses ARM features that are experimental. Experimental features should be enabled for testing purposes only, as there are no guarantees about the quality or stability of these features. Do not enable these settings for any production usage, or your production environment may be subject to breaking.",
            "_EXPERIMENTAL_FEATURES_ENABLED": [
              "Extensibility"
            ],
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "7448301686395053287"
            }
          },
          "parameters": {
            "logAnalyticsName": {
              "type": "string"
            },
            "applicationInsightsName": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "disableLocalAuth": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": {
            "logAnalytics": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "loganalytics",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('logAnalyticsName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.1-experimental",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_EXPERIMENTAL_WARNING": "This template uses ARM features that are experimental. Experimental features should be enabled for testing purposes only, as there are no guarantees about the quality or stability of these features. Do not enable these settings for any production usage, or your production environment may be subject to breaking.",
                    "_EXPERIMENTAL_FEATURES_ENABLED": [
                      "Extensibility"
                    ],
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "2621439323348702860"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    }
                  },
                  "resources": {
                    "logAnalytics": {
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2021-12-01-preview",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "retentionInDays": 30,
                        "features": {
                          "searchVersion": 1
                        },
                        "sku": {
                          "name": "PerGB2018"
                        }
                      }
                    }
                  },
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    }
                  }
                }
              }
            },
            "applicationInsights": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "applicationinsights",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('applicationInsightsName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "logAnalyticsWorkspaceId": {
                    "value": "[reference('logAnalytics').outputs.id.value]"
                  },
                  "disableLocalAuth": {
                    "value": "[parameters('disableLocalAuth')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.1-experimental",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_EXPERIMENTAL_WARNING": "This template uses ARM features that are experimental. Experimental features should be enabled for testing purposes only, as there are no guarantees about the quality or stability of these features. Do not enable these settings for any production usage, or your production environment may be subject to breaking.",
                    "_EXPERIMENTAL_FEATURES_ENABLED": [
                      "Extensibility"
                    ],
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "13318299466077675376"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "logAnalyticsWorkspaceId": {
                      "type": "string"
                    },
                    "disableLocalAuth": {
                      "type": "bool",
                      "defaultValue": false
                    }
                  },
                  "resources": {
                    "applicationInsights": {
                      "type": "Microsoft.Insights/components",
                      "apiVersion": "2020-02-02",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "kind": "web",
                      "properties": {
                        "Application_Type": "web",
                        "WorkspaceResourceId": "[parameters('logAnalyticsWorkspaceId')]",
                        "DisableLocalAuth": "[parameters('disableLocalAuth')]"
                      }
                    }
                  },
                  "outputs": {
                    "connectionString": {
                      "type": "string",
                      "value": "[reference('applicationInsights').ConnectionString]"
                    },
                    "instrumentationKey": {
                      "type": "string",
                      "value": "[reference('applicationInsights').InstrumentationKey]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalytics"
              ]
            }
          },
          "outputs": {
            "applicationInsightsConnectionString": {
              "type": "string",
              "value": "[reference('applicationInsights').outputs.connectionString.value]"
            },
            "applicationInsightsInstrumentationKey": {
              "type": "string",
              "value": "[reference('applicationInsights').outputs.instrumentationKey.value]"
            },
            "applicationInsightsName": {
              "type": "string",
              "value": "[reference('applicationInsights').outputs.name.value]"
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "value": "[reference('logAnalytics').outputs.id.value]"
            },
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "value": "[reference('logAnalytics').outputs.name.value]"
            }
          }
        }
      },
      "dependsOn": [
        "rg"
      ]
    },
    "appInsightsRoleAssignmentApi": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "appInsightsRoleAssignmentapi",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appInsightsName": {
            "value": "[reference('monitoring').outputs.applicationInsightsName.value]"
          },
          "roleDefinitionID": {
            "value": "[variables('monitoringRoleDefinitionId')]"
          },
          "principalID": {
            "value": "[reference('apiUserAssignedIdentity').outputs.identityPrincipalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.1-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "This template uses ARM features that are experimental. Experimental features should be enabled for testing purposes only, as there are no guarantees about the quality or stability of these features. Do not enable these settings for any production usage, or your production environment may be subject to breaking.",
            "_EXPERIMENTAL_FEATURES_ENABLED": [
              "Extensibility"
            ],
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "8163196177579809349"
            }
          },
          "parameters": {
            "principalID": {
              "type": "string"
            },
            "roleDefinitionID": {
              "type": "string"
            },
            "appInsightsName": {
              "type": "string"
            }
          },
          "resources": {
            "applicationInsights": {
              "existing": true,
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[parameters('appInsightsName')]"
            },
            "appInsightsRoleAssignment": {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Insights/components/{0}', parameters('appInsightsName'))]",
              "name": "[guid(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), parameters('principalID'), parameters('roleDefinitionID'))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionID'))]",
                "principalId": "[parameters('principalID')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "applicationInsights"
              ]
            }
          },
          "outputs": {
            "ROLE_ASSIGNMENT_NAME": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), parameters('principalID'), parameters('roleDefinitionID'))]"
            }
          }
        }
      },
      "dependsOn": [
        "apiUserAssignedIdentity",
        "monitoring",
        "rg"
      ]
    }
  },
  "outputs": {
    "APPLICATIONINSIGHTS_CONNECTION_STRING": {
      "type": "string",
      "value": "[reference('monitoring').outputs.applicationInsightsConnectionString.value]"
    },
    "AZURE_LOCATION": {
      "type": "string",
      "value": "[parameters('location')]"
    },
    "AZURE_TENANT_ID": {
      "type": "string",
      "value": "[tenant().tenantId]"
    },
    "SERVICE_API_NAME": {
      "type": "string",
      "value": "[variables('functionAppName')]"
    },
    "AZURE_FUNCTION_NAME": {
      "type": "string",
      "value": "[variables('functionAppName')]"
    },
    "SERVICE_API_ENDPOINTS": {
      "type": "array",
      "value": [
        "[format('{0}/mcp/sse', reference('apimService').outputs.gatewayUrl.value)]"
      ]
    }
  }
}