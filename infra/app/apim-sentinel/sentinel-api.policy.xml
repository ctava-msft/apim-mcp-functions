<policies>
    <inbound>
        <base />
        <!-- CORS policy for browser access -->
        <cors allow-credentials="true">
            <allowed-origins>
                <origin>*</origin>
            </allowed-origins>
            <allowed-methods>
                <method>POST</method>
                <method>OPTIONS</method>
            </allowed-methods>
            <allowed-headers>
                <header>*</header>
            </allowed-headers>
        </cors>
        
        <!-- Rate limiting for security -->
        <rate-limit calls="100" renewal-period="60" />
        
        <!-- Authentication using function key -->
        <set-header name="x-functions-key" exists-action="override">
            <value>{{sentinel-function-host-key}}</value>
        </set-header>
        
        <!-- Validate request content type -->
        <choose>
            <when condition="@(context.Request.Headers.GetValueOrDefault("Content-Type","").Contains("application/json") == false)">
                <return-response>
                    <set-status code="400" reason="Bad Request" />
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>{"error": "Content-Type must be application/json"}</set-body>
                </return-response>
            </when>
        </choose>
        
        <!-- Log incoming request for monitoring -->
        <log-to-eventhub logger-id="sentinel-logger" partition-id="0">
            @{
                return new JObject(
                    new JProperty("timestamp", DateTime.UtcNow.ToString()),
                    new JProperty("method", context.Request.Method),
                    new JProperty("url", context.Request.Url.ToString()),
                    new JProperty("headers", context.Request.Headers.Where(h => h.Key != "x-functions-key").ToDictionary(h => h.Key, h => string.Join(";", h.Value))),
                    new JProperty("body", context.Request.Body?.As<string>(preserveContent: true))
                ).ToString();
            }
        </log-to-eventhub>
    </inbound>
    
    <backend>
        <base />
    </backend>
    
    <outbound>
        <base />
        
        <!-- Set response headers -->
        <set-header name="Content-Type" exists-action="override">
            <value>application/json</value>
        </set-header>
        
        <!-- Add security headers -->
        <set-header name="X-Content-Type-Options" exists-action="override">
            <value>nosniff</value>
        </set-header>
        
        <set-header name="X-Frame-Options" exists-action="override">
            <value>DENY</value>
        </set-header>
        
        <!-- Log outbound response for monitoring -->
        <log-to-eventhub logger-id="sentinel-logger" partition-id="1">
            @{
                return new JObject(
                    new JProperty("timestamp", DateTime.UtcNow.ToString()),
                    new JProperty("responseStatus", context.Response.StatusCode),
                    new JProperty("responseBody", context.Response.Body?.As<string>(preserveContent: true))
                ).ToString();
            }
        </log-to-eventhub>
    </outbound>
    
    <on-error>
        <base />
        
        <!-- Log errors -->
        <log-to-eventhub logger-id="sentinel-logger" partition-id="2">
            @{
                return new JObject(
                    new JProperty("timestamp", DateTime.UtcNow.ToString()),
                    new JProperty("error", context.LastError?.Message),
                    new JProperty("source", context.LastError?.Source),
                    new JProperty("reason", context.LastError?.Reason)
                ).ToString();
            }
        </log-to-eventhub>
        
        <!-- Return structured error response -->
        <return-response>
            <set-status code="500" reason="Internal Server Error" />
            <set-header name="Content-Type" exists-action="override">
                <value>application/json</value>
            </set-header>
            <set-body>{"error": "An error occurred while processing your request", "timestamp": "@(DateTime.UtcNow.ToString())"}</set-body>
        </return-response>
    </on-error>
</policies>